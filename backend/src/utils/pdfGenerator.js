const PDFDocument = require('pdfkit');
const path = require('path');
const fs = require('fs').promises;
const QRCodeGenerator = require('./qrCodeGenerator');

class PDFGenerator {
  constructor() {
    this.outputDir = path.join(__dirname, '../../uploads/tickets');
    this.logoPath = path.join(__dirname, '../../uploads/logo/–ª–æ–≥–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ.png');
    this.qrGenerator = new QRCodeGenerator();
    this.ensureOutputDir();
    
    // –ü—É—Ç–∏ –∫ —à—Ä–∏—Ñ—Ç–∞–º Roboto
    this.robotoRegular = path.join(__dirname, '../../fonts/Roboto-Regular.ttf');
    this.robotoBold = path.join(__dirname, '../../fonts/Roboto-Bold.ttf');
  }

  async ensureOutputDir() {
    try {
      await fs.mkdir(this.outputDir, { recursive: true });
      await fs.mkdir(path.join(this.outputDir, 'qr'), { recursive: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –±–∏–ª–µ—Ç–æ–≤:', error);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –±–∏–ª–µ—Ç
   * @param {Object} ticketData - –î–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–∞
   * @returns {Promise<string>} - –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É PDF —Ñ–∞–π–ª—É
   */
  async generateTicket(ticketData) {
    try {
      const {
        ticketId,
        eventName,
        eventDate,
        eventTime,
        hallName,
        hallAddress,
        seatSection,
        seatRow,
        seatNumber,
        price,
        currency = 'RUB',
        buyerName,
        buyerEmail,
        purchaseDate,
        orderNumber,
        isInvitation = false, // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        notes = '' // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
      } = ticketData;

      console.log('üìÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é PDF –¥–ª—è –±–∏–ª–µ—Ç–∞:', ticketId);

      // –°–æ–∑–¥–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç
      const doc = new PDFDocument({
        size: 'A4',
        margins: {
          top: 50,
          bottom: 50,
          left: 50,
          right: 50
        }
      });

      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —à—Ä–∏—Ñ—Ç—ã Roboto
      doc.registerFont('Roboto', this.robotoRegular);
      doc.registerFont('Roboto-Bold', this.robotoBold);

      // –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
      const filename = `ticket_${ticketId}.pdf`;
      const filepath = path.join(this.outputDir, filename);
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏
      const stream = require('fs').createWriteStream(filepath);
      doc.pipe(stream);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
      console.log('üî≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥...');
      const qrBuffer = await this.qrGenerator.generateQRCodeBuffer(ticketId, {
        size: 200,
        margin: 2
      });
      console.log('‚úÖ QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω, —Ä–∞–∑–º–µ—Ä:', qrBuffer.length, '–±–∞–π—Ç');

      // –†–∏—Å—É–µ–º –±–∏–ª–µ—Ç
      console.log('üé® –†–∏—Å—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∏–ª–µ—Ç–∞...');
      console.log('üé´ –î–∞–Ω–Ω—ã–µ –¥–ª—è –±–∏–ª–µ—Ç–∞:', { 
        ticketId, 
        seatSection, 
        seatRow, 
        seatNumber,
        seatId: ticketData.seatId || '–ù–ï–¢ SEATID'
      });
      await this.drawTicket(doc, {
        ticketId,
        eventName,
        eventDate,
        eventTime,
        hallName,
        hallAddress,
        seatSection,
        seatRow,
        seatNumber,
        seatId: ticketData.seatId, // –î–æ–±–∞–≤–ª—è–µ–º seatId –≤ –¥–∞–Ω–Ω—ã–µ
        price,
        currency,
        buyerName,
        buyerEmail,
        purchaseDate,
        orderNumber,
        qrBuffer,
        isInvitation, // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        notes // –ü–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
      });
      console.log('‚úÖ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∏–ª–µ—Ç–∞ –Ω–∞—Ä–∏—Å–æ–≤–∞–Ω–æ');

      // –ó–∞–≤–µ—Ä—à–∞–µ–º PDF
      doc.end();

      return new Promise((resolve, reject) => {
        stream.on('finish', () => {
          console.log(`‚úÖ PDF –±–∏–ª–µ—Ç —Å–æ–∑–¥–∞–Ω: ${filepath}`);
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
          fs.stat(filepath).then(stats => {
            console.log(`üìä –†–∞–∑–º–µ—Ä PDF —Ñ–∞–π–ª–∞: ${stats.size} –±–∞–π—Ç`);
            resolve(filepath);
          }).catch(err => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞:', err);
            resolve(filepath);
          });
        });
        
        stream.on('error', (error) => {
          console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF:', error);
          reject(error);
        });
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF –±–∏–ª–µ—Ç–∞:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å PDF –±–∏–ª–µ—Ç: ${error.message}`);
    }
  }

  /**
   * –†–∏—Å—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∏–ª–µ—Ç–∞
   * @param {PDFDocument} doc - PDF –¥–æ–∫—É–º–µ–Ω—Ç
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
   */
  async drawTicket(doc, data) {
    const {
      ticketId,
      eventName,
      eventDate,
      eventTime,
      hallName,
      hallAddress,
      seatSection,
      seatRow,
      seatNumber,
      seatId, // –î–æ–±–∞–≤–ª—è–µ–º seatId
      price,
      currency,
      buyerName,
      buyerEmail,
      purchaseDate,
      orderNumber,
      qrBuffer,
      isInvitation = false, // –§–ª–∞–≥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      notes = '' // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
    } = data;

    // –†–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const pageWidth = doc.page.width;
    const pageHeight = doc.page.height;
    const margin = 40;

    console.log('üé´ drawTicket –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:', { 
      seatId, 
      seatSection, 
      seatRow, 
      seatNumber,
      isSpecialZone: seatId && seatId.includes('_seat_')
    });

    // –¶–≤–µ—Ç–∞
    const primaryColor = '#000000';
    const secondaryColor = '#666666';
    const lightGray = '#f5f5f5';
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π –∫–∏—Ä–∏–ª–ª–∏—Ü—É
    doc.font('Roboto');

    // 1. –®–∞–ø–∫–∞ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ QR-–∫–æ–¥–æ–º
    await this.drawHeader(doc, pageWidth, margin, qrBuffer);

    // 2. –ù–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞
    this.drawTicketNumber(doc, ticketId, pageWidth, margin, 100);

    // 3. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ
    this.drawPurchaseInfo(doc, {
      buyerName,
      buyerEmail,
      purchaseDate,
      ticketId,
      price,
      currency,
      isInvitation,
      notes
    }, pageWidth, margin, 140);

    // 4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
    this.drawEventInfo(doc, {
      eventName,
      eventDate,
      eventTime,
      hallName,
      hallAddress
    }, pageWidth, margin, 220);

    // 5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ (–≤ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏)
    this.drawSeatInfo(doc, {
      seatSection,
      seatRow,
      seatNumber,
      seatId: data.seatId // –ü–µ—Ä–µ–¥–∞–µ–º seatId –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –º–µ—Å—Ç–∞
    }, pageWidth, margin, 350);

    // 6. –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è
    this.drawDashedLine(doc, pageWidth, margin, 420);

    // 7. –ü—Ä–∞–≤–∏–ª–∞
    this.drawRules(doc, pageWidth, margin, 440);
  }

  /**
   * –†–∏—Å—É–µ—Ç —à–∞–ø–∫—É —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º –∏ QR-–∫–æ–¥–æ–º
   */
  async drawHeader(doc, pageWidth, margin, qrBuffer) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞
      console.log('üñºÔ∏è –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–æ—Ç–∏–ø –ø–æ –ø—É—Ç–∏:', this.logoPath);
      await fs.access(this.logoPath);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø
      console.log('‚úÖ –õ–æ–≥–æ—Ç–∏–ø –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –≤ PDF');
      doc.image(this.logoPath, margin, margin, {
        width: 225, // 150 * 1.5
        height: 68, // 45 * 1.5
        fit: [225, 68]
      });
    } catch (error) {
      // –ï—Å–ª–∏ –ª–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
      console.log('‚ö†Ô∏è –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫:', error.message);
      doc.fontSize(30) // 20 * 1.5
         .font('Roboto-Bold')
         .fillColor('#000000')
         .text('INTICKETS', margin, margin + 10);
    }

    // QR-–∫–æ–¥ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
    if (qrBuffer) {
      doc.image(qrBuffer, pageWidth - margin - 80, margin, {
        width: 60,
        height: 60
      });
    }
  }

  /**
   * –†–∏—Å—É–µ—Ç –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞
   */
  drawTicketNumber(doc, ticketId, pageWidth, margin, y) {
    doc.fontSize(14)
       .font('Roboto-Bold')
       .fillColor('#000000')
       .text(`–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –±–∏–ª–µ—Ç ‚Ññ ${ticketId}`, margin, y);
  }

  /**
   * –†–∏—Å—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ
   */
  drawPurchaseInfo(doc, data, pageWidth, margin, y) {
    const { buyerName, buyerEmail, purchaseDate, ticketId, price, currency, isInvitation, notes } = data;
    
    doc.fontSize(12)
       .font('Roboto')
       .fillColor('#000000')
       .text(`–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: ${buyerName}`, margin, y)
       .text(`–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: ${this.formatDate(purchaseDate)}`, margin, y + 15);
    
    if (isInvitation) {
      // –î–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –∏ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è
      doc.fontSize(14)
         .font('Roboto-Bold')
         .fillColor('#000000') // –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
         .text('–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï', margin, y + 30);
      
      if (notes && notes.trim()) {
        doc.fontSize(10)
           .font('Roboto')
           .fillColor('#666666')
           .text(`–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: ${notes}`, margin, y + 50, {
             width: pageWidth - 2 * margin
           });
      }
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
      doc.text(`–°—Ç–æ–∏–º–æ—Å—Ç—å: ${price} ${currency}`, margin, y + 30);
    }
  }

  /**
   * –†–∏—Å—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏
   */
  drawEventInfo(doc, data, pageWidth, margin, y) {
    const { eventName, eventDate, eventTime, hallName, hallAddress } = data;
    
    // –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ)
    doc.fontSize(20)
       .font('Roboto-Bold')
       .fillColor('#000000')
       .text(eventName.toUpperCase(), margin, y, {
         align: 'center',
         width: pageWidth - 2 * margin
       });

    // –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞)
    const eventY = y + 40;
    const centerX = pageWidth / 2;
    
    // –ë–æ–ª—å—à–∞—è —Ü–∏—Ñ—Ä–∞ –¥–∞—Ç—ã
    const day = new Date(eventDate).getDate();
    doc.fontSize(32)
       .font('Roboto-Bold')
       .fillColor('#000000')
       .text(day.toString(), margin, eventY);
    
    // –ú–µ—Å—è—Ü –ø–æ–¥ –¥–∞—Ç–æ–π
    const month = new Date(eventDate).toLocaleDateString('ru-RU', { month: 'long' });
    doc.fontSize(14)
       .font('Roboto-Bold')
       .text(month, margin, eventY + 35);
    
    // –í—Ä–µ–º—è —Ä—è–¥–æ–º —Å –¥–∞—Ç–æ–π
    const timeX = margin + 120; // –ü–æ–∑–∏—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä—è–¥–æ–º —Å –¥–∞—Ç–æ–π
    doc.fontSize(12)
       .font('Roboto-Bold')
       .text('–ù–∞—á–∞–ª–æ', timeX, eventY)
       .fontSize(18)
       .text(eventTime, timeX, eventY + 15);
    
    // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –∏ –∑–∞–ª–æ–º
    const lineX = centerX - 30;
    doc.moveTo(lineX, eventY - 5)
       .lineTo(lineX, eventY + 25)
       .stroke();
    
    // –ó–∞–ª –∏ –∞–¥—Ä–µ—Å —Å–ø—Ä–∞–≤–∞ (–±–æ–ª—å—à–µ –º–µ—Å—Ç–∞)
    const hallX = centerX + 20; // –ë–ª–∏–∂–µ –∫ —Ü–µ–Ω—Ç—Ä—É –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    doc.fontSize(12)
       .font('Roboto-Bold')
       .text(hallName, hallX, eventY)
       .fontSize(10)
       .font('Roboto')
       .text(hallAddress || '', hallX, eventY + 15, {
         width: 200 // –£–≤–µ–ª–∏—á–∏–ª–∏ —à–∏—Ä–∏–Ω—É –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
       });
  }

  /**
   * –†–∏—Å—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ (–≤ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏)
   */
  drawSeatInfo(doc, data, pageWidth, margin, y) {
    const { seatSection, seatRow, seatNumber, seatId } = data;
    
    const centerX = pageWidth / 2;
    const colWidth = 120;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω–æ–π (–≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ)
    const isSpecialZone = seatId && seatId.includes('_seat_');
    
    console.log('üé´ drawSeatInfo:', { 
      seatId, 
      isSpecialZone, 
      seatSection, 
      seatRow, 
      seatNumber,
      seatIdType: typeof seatId,
      seatIdLength: seatId ? seatId.length : 'undefined',
      containsSeat: seatId ? seatId.includes('_seat_') : false
    });
    
    if (isSpecialZone) {
      // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ü–∏—é
      doc.fontSize(16)
         .font('Roboto-Bold')
         .fillColor('#000000')
         .text(seatSection.toUpperCase(), margin, y)
         .fontSize(12)
         .font('Roboto')
         .text('–°–µ–∫—Ç–æ—Ä', margin, y + 20);
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –º–µ—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏
      // –°–µ–∫—Ç–æ—Ä (–ª–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
      doc.fontSize(16)
         .font('Roboto-Bold')
         .fillColor('#000000')
         .text(seatSection.toUpperCase(), margin, y)
         .fontSize(12)
         .font('Roboto')
         .text('–°–µ–∫—Ç–æ—Ä', margin, y + 20);
      
      // –†—è–¥ (—Å—Ä–µ–¥–Ω—è—è –∫–æ–ª–æ–Ω–∫–∞)
      doc.fontSize(16)
         .font('Roboto-Bold')
         .text(seatRow.toString(), centerX - colWidth/2, y)
         .fontSize(12)
         .font('Roboto')
         .text('–†—è–¥', centerX - colWidth/2, y + 20);
      
      // –ú–µ—Å—Ç–æ (–ø—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞)
      doc.fontSize(16)
         .font('Roboto-Bold')
         .text(seatNumber.toString(), centerX + colWidth/2, y)
         .fontSize(12)
         .font('Roboto')
         .text('–ú–µ—Å—Ç–æ', centerX + colWidth/2, y + 20);
    }
  }

  /**
   * –†–∏—Å—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞
   */
  drawRules(doc, pageWidth, margin, y) {
    const rules = [
      '–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–º –±–∏–ª–µ—Ç–æ–º',
      '–í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ –ø–æ –∫–æ–ø–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.',
      '1. –í—Å—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —è–≤–ª—è–µ—Ç—Å—è –±–∏–ª–µ—Ç–æ–º –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.',
      '2. –î–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –±–∏–ª–µ—Ç–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∞ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–æ–≥–æ–º –±–∏–ª–µ—Ç–∞ –Ω–∞ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–º –±–ª–∞–Ω–∫–µ –∏ –¥–∞–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é.',
      '3. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞—á–µ–π –¥—Ä—É–≥–æ–º—É –ª–∏—Ü—É –±–∏–ª–µ—Ç–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–∏–ª–µ—Ç–∞.',
      '4. –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –ø—Ä–æ—Ö–æ–¥–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤—Å–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –±–∏–ª–µ—Ç–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —à—Ç—Ä–∏—Ö-–∫–æ–¥–æ–º –≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–Ω–µ–±—Ä–µ–∂–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞.'
    ];

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∞–≤–∏–ª
    doc.fontSize(12)
       .font('Roboto-Bold')
       .fillColor('#000000')
       .text(rules[0], margin, y);

    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    doc.fontSize(10)
       .font('Roboto-Bold')
       .text(rules[1], margin, y + 20);

    // –ü—Ä–∞–≤–∏–ª–∞
    doc.fontSize(10)
       .font('Roboto')
       .text(rules[2], margin, y + 40)
       .text(rules[3], margin, y + 55, { width: pageWidth - 2 * margin })
       .text(rules[4], margin, y + 85, { width: pageWidth - 2 * margin })
       .text(rules[5], margin, y + 115, { width: pageWidth - 2 * margin });
  }

  /**
   * –†–∏—Å—É–µ—Ç –ø—É–Ω–∫—Ç–∏—Ä–Ω—É—é –ª–∏–Ω–∏—é
   */
  drawDashedLine(doc, pageWidth, margin, y) {
    const dashLength = 5;
    const gapLength = 3;
    const lineLength = pageWidth - 2 * margin;
    
    let currentX = margin;
    while (currentX < pageWidth - margin) {
      doc.moveTo(currentX, y)
         .lineTo(Math.min(currentX + dashLength, pageWidth - margin), y)
         .stroke();
      currentX += dashLength + gapLength;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É
   */
  formatDate(date) {
    if (typeof date === 'string') {
      date = new Date(date);
    }
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
   */
  formatEventDate(date) {
    if (typeof date === 'string') {
      date = new Date(date);
    }
    const day = date.getDate();
    const month = date.toLocaleDateString('ru-RU', { month: 'long' });
    return `${day} ${month}`;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç PDF —Ñ–∞–π–ª
   */
  async deleteTicket(ticketId) {
    try {
      const filename = `ticket_${ticketId}.pdf`;
      const filepath = path.join(this.outputDir, filename);
      
      await fs.unlink(filepath);
      console.log(`‚úÖ PDF –±–∏–ª–µ—Ç —É–¥–∞–ª–µ–Ω: ${filepath}`);
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è PDF –±–∏–ª–µ—Ç–∞:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–∞
   */
  async ticketExists(ticketId) {
    try {
      const filename = `ticket_${ticketId}.pdf`;
      const filepath = path.join(this.outputDir, filename);
      
      await fs.access(filepath);
      return true;

    } catch (error) {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
   */
  getTicketPath(ticketId) {
    const filename = `ticket_${ticketId}.pdf`;
    return path.join(this.outputDir, filename);
  }
}

module.exports = PDFGenerator;