import React, { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { useEvent } from '../../hooks/useEvents';
import { useHalls } from '../../hooks/useApi';
import { apiClient, getId } from '../../services/api';
import { Layout } from '../../components/Layout';
import { PriceSchemeCreateModal } from '../../components/PriceSchemeCreateModal';
import { Event, SessionFormData } from '../../types/Event.types';
import { Hall } from '../../types/api.types';
import { PriceScheme } from '../../types/PriceScheme.types';
import './SessionCreatePage.scss';

export const SessionCreatePage: React.FC = () => {
  const urlParams = new URLSearchParams(window.location.search);
  const eventId = urlParams.get('eventId');
  const newPriceSchemeId = urlParams.get('newPriceSchemeId');
  
  console.log('üîÑ SessionCreatePage –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:');
  console.log('  - eventId:', eventId);
  console.log('  - newPriceSchemeId:', newPriceSchemeId);
  
  const { data: eventData, loading: eventLoading, error: eventError } = useEvent(eventId || undefined);
  const { data: hallsData, loading: hallsLoading, error: hallsError } = useHalls();
  
  const event = eventData?.event;
  const halls = hallsData?.halls || [];

  const [loading, setLoading] = useState(false);
  const [priceSchemes, setPriceSchemes] = useState<PriceScheme[]>([]);
  const [loadingPriceSchemes, setLoadingPriceSchemes] = useState(false);
  const [showCreateModal, setShowCreateModal] = useState(false);

  const [formData, setFormData] = useState<SessionFormData>({
    eventId: eventId || '',
    date: '',
    time: '',
    hallId: '',
    priceSchemeId: ''
  });

  const [errors, setErrors] = useState<{
    date?: string;
    time?: string;
    hallId?: string;
    priceSchemeId?: string;
  }>({});

  // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ URL –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const restoredData: Partial<SessionFormData> = {};
    
    if (params.get('eventId')) restoredData.eventId = params.get('eventId')!;
    if (params.get('date')) restoredData.date = params.get('date')!;
    if (params.get('time')) restoredData.time = params.get('time')!;
    if (params.get('hallId')) restoredData.hallId = params.get('hallId')!; // –ù–µ –ø–∞—Ä—Å–∏–º –≤ —á–∏—Å–ª–æ!
    
    console.log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –∏–∑ URL:', restoredData);
    
    if (Object.keys(restoredData).length > 0) {
      setFormData(prev => ({ ...prev, ...restoredData }));
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏ –¥–ª—è –∑–∞–ª–∞ –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
      if (restoredData.hallId) {
        loadPriceSchemes(restoredData.hallId);
      }
    }
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫—É –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è
  useEffect(() => {
    if (newPriceSchemeId) {
      console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫—É:', newPriceSchemeId);
      setFormData(prev => ({
        ...prev,
        priceSchemeId: newPriceSchemeId
      }));
      
      // –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ newPriceSchemeId
      const newUrl = new URL(window.location.href);
      newUrl.searchParams.delete('newPriceSchemeId');
      window.history.replaceState({}, '', newUrl.toString());
    }
  }, [newPriceSchemeId]);

  const loadPriceSchemes = useCallback(async (hallId: string) => {
    if (!hallId) {
      setPriceSchemes([]);
      return;
    }

    setLoadingPriceSchemes(true);
    try {
      const response = await apiClient.getHallPriceSchemes(hallId);
      setPriceSchemes(response.priceSchemes);
      
      // –ï—Å–ª–∏ –Ω–µ—Ç —Ä–∞—Å–ø–æ—è—Å–æ–≤–æ–∫, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
      if (response.priceSchemes.length === 0) {
        setFormData(prev => ({ ...prev, priceSchemeId: '' }));
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–æ—è—Å–æ–≤–æ–∫:', error);
      setPriceSchemes([]);
    } finally {
      setLoadingPriceSchemes(false);
    }
  }, []);

  const handleInputChange = (field: keyof SessionFormData) => (
    e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>
  ) => {
    const value = e.target.value;
    
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[field as keyof typeof errors]) {
      setErrors(prev => ({
        ...prev,
        [field]: undefined
      }));
    }

    // –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–∞–ª–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏
    if (field === 'hallId' && value) {
      loadPriceSchemes(value as string);
    }
  };

  const handleCreatePriceScheme = () => {
    console.log('–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–µ–∞–Ω—Å–∞:', formData);
    console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π –∑–∞–ª ID:', formData.hallId);
    
    if (!formData.hallId) {
      alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª');
      return;
    }

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    setShowCreateModal(true);
  };

  const handlePriceSchemeCreated = async (priceSchemeId: string) => {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  };

  const handleCloseModal = () => {
    setShowCreateModal(false);
  };

  const validateForm = () => {
    const newErrors: typeof errors = {};

    if (!formData.date) {
      newErrors.date = '–î–∞—Ç–∞ —Å–µ–∞–Ω—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞';
    } else {
      const selectedDate = new Date(formData.date);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      if (selectedDate < today) {
        newErrors.date = '–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º';
      }
    }

    if (!formData.time) {
      newErrors.time = '–í—Ä–µ–º—è —Å–µ–∞–Ω—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (!formData.hallId) {
      newErrors.hallId = '–í—ã–±–æ—Ä –∑–∞–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }

    if (!formData.priceSchemeId) {
      newErrors.priceSchemeId = '–í—ã–±–æ—Ä —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      const sessionData = {
        eventId: formData.eventId,
        date: formData.date,
        time: formData.time,
        hallId: formData.hallId,
        priceSchemeId: formData.priceSchemeId
      };

      const response = await apiClient.createSession(sessionData);
      alert('–°–µ–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é
      window.location.href = `/events/${formData.eventId}`;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∞–Ω—Å–∞:', error);
      alert(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∞–Ω—Å–∞: ${error.message}`);
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    if (Object.values(formData).some(value => value)) {
      if (confirm('–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
        window.location.href = eventId ? `/events/${eventId}` : '/events';
      }
    } else {
      window.location.href = eventId ? `/events/${eventId}` : '/events';
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è)
  const getMinDate = () => {
    const today = new Date();
    return today.toISOString().split('T')[0];
  };

  if (!eventId) {
    return (
      <Layout currentPage="events">
        <div className="session-create-page">
          <div className="session-create-page__error">
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>–ù–µ —É–∫–∞–∑–∞–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∞–Ω—Å–∞</p>
            <button onClick={() => window.location.href = '/events'} className="btn btn--primary">
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  if (eventLoading || hallsLoading) {
    return (
      <Layout currentPage="events">
        <div className="session-create-page">
          <div className="session-create-page__loading">
            <div className="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...</p>
          </div>
        </div>
      </Layout>
    );
  }

  if (eventError || !event) {
    return (
      <Layout currentPage="events">
        <div className="session-create-page">
          <div className="session-create-page__error">
            <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
            <p>{eventError || '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}</p>
            <button onClick={() => window.location.href = '/events'} className="btn btn--primary">
              –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  if (hallsError || halls.length === 0) {
    return (
      <Layout currentPage="events">
        <div className="session-create-page">
          <div className="session-create-page__error">
            <h2>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–ª–æ–≤</h2>
            <p>–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∞–Ω—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–ª</p>
            <div className="session-create-page__error-actions">
              <button onClick={() => window.location.href = '/halls/create'} className="btn btn--primary">
                –°–æ–∑–¥–∞—Ç—å –∑–∞–ª
              </button>
              <button onClick={handleCancel} className="btn btn--secondary">
                –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥
              </button>
            </div>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout currentPage="events">
      <div className="session-create-page">
        <header className="session-create-page__header">
          <div className="session-create-page__title">
            <button 
              onClick={handleCancel}
              className="session-create-page__back-btn"
              title="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é"
            >
              ‚Üê {event.name}
            </button>
            <h1>–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–∞–Ω—Å–∞</h1>
          </div>
          
        </header>

        <main className="session-create-page__content">
          <div className="session-create-page__container">
            <form onSubmit={handleSubmit} className="session-form">
              <div className="session-form__section">
                <h2 className="session-form__section-title">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏</h2>
                
                <div className="session-form__event-info">
                  <div className="session-form__event-visual">
                    {event.image ? (
                      <img src={event.image} alt={event.name} className="session-form__event-image" />
                    ) : (
                      <div className="session-form__event-placeholder">üé≠</div>
                    )}
                  </div>
                  <div className="session-form__event-details">
                    <h3>{event.name}</h3>
                    <p>{event.description}</p>
                  </div>
                </div>
              </div>

              <div className="session-form__section">
                <h2 className="session-form__section-title">–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</h2>
                
                <div className="session-form__row">
                  <div className="session-form__field">
                    <label htmlFor="date" className="session-form__label">
                      –î–∞—Ç–∞ —Å–µ–∞–Ω—Å–∞ *
                    </label>
                    <input
                      type="date"
                      id="date"
                      value={formData.date}
                      min={getMinDate()}
                      onChange={handleInputChange('date')}
                      className={`session-form__input ${errors.date ? 'session-form__input--error' : ''}`}
                      disabled={loading}
                    />
                    {errors.date && (
                      <span className="session-form__error">{errors.date}</span>
                    )}
                  </div>

                  <div className="session-form__field">
                    <label htmlFor="time" className="session-form__label">
                      –í—Ä–µ–º—è —Å–µ–∞–Ω—Å–∞ *
                    </label>
                    <input
                      type="time"
                      id="time"
                      value={formData.time}
                      onChange={handleInputChange('time')}
                      className={`session-form__input ${errors.time ? 'session-form__input--error' : ''}`}
                      disabled={loading}
                    />
                    {errors.time && (
                      <span className="session-form__error">{errors.time}</span>
                    )}
                  </div>
                </div>
              </div>

              <div className="session-form__section">
                <h2 className="session-form__section-title">–ó–∞–ª –∏ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∞</h2>
                
                <div className="session-form__field">
                  <label htmlFor="hallId" className="session-form__label">
                    –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª *
                  </label>
                  <select
                    id="hallId"
                    value={formData.hallId}
                    onChange={handleInputChange('hallId')}
                    className={`session-form__select ${errors.hallId ? 'session-form__select--error' : ''}`}
                    disabled={loading}
                  >
                    <option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª --</option>
                    {halls.map((hall) => (
                      <option key={hall.id} value={hall.id}>
                        {hall.name} {hall.city ? `(${hall.city})` : ''}
                      </option>
                    ))}
                  </select>
                  {errors.hallId && (
                    <span className="session-form__error">{errors.hallId}</span>
                  )}
                </div>

                <div className="session-form__field">
                  <label htmlFor="priceSchemeId" className="session-form__label">
                    –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫—É *
                  </label>
                  <div className="session-form__price-scheme-wrapper">
                    <select
                      id="priceSchemeId"
                      value={formData.priceSchemeId}
                      onChange={handleInputChange('priceSchemeId')}
                      className={`session-form__select ${errors.priceSchemeId ? 'session-form__select--error' : ''}`}
                      disabled={loading || loadingPriceSchemes || !formData.hallId}
                    >
                      <option value="">
                        {!formData.hallId 
                          ? '-- –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ª --' 
                          : loadingPriceSchemes 
                            ? '–ó–∞–≥—Ä—É–∑–∫–∞...'
                            : priceSchemes.length === 0 
                              ? '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å–ø–æ—è—Å–æ–≤–æ–∫'
                              : '-- –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫—É --'
                        }
                      </option>
                      {priceSchemes.map((scheme) => (
                        <option key={scheme.id} value={scheme.id}>
                          {scheme.name} ({scheme.prices.length} {scheme.prices.length === 1 ? '—Ü–µ–Ω–∞' : scheme.prices.length < 5 ? '—Ü–µ–Ω—ã' : '—Ü–µ–Ω'})
                        </option>
                      ))}
                    </select>
                    
                    {formData.hallId && (
                      <button
                        type="button"
                        onClick={handleCreatePriceScheme}
                        className="session-form__create-price-scheme-btn"
                        disabled={loading || loadingPriceSchemes}
                        title="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫—É –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–ª–∞"
                      >
                        ‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
                      </button>
                    )}
                  </div>
                  {errors.priceSchemeId && (
                    <span className="session-form__error">{errors.priceSchemeId}</span>
                  )}
                  
                  {formData.hallId && priceSchemes.length === 0 && !loadingPriceSchemes && (
                    <div className="session-form__hint session-form__hint--warning">
                      ‚ö†Ô∏è –î–ª—è —ç—Ç–æ–≥–æ –∑–∞–ª–∞ –Ω–µ—Ç —Ä–∞—Å–ø–æ—è—Å–æ–≤–æ–∫. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫—É.
                    </div>
                  )}
                </div>
              </div>

              <div className="session-form__actions">
                <button
                  type="button"
                  onClick={handleCancel}
                  className="btn btn--secondary"
                  disabled={loading}
                >
                  –û—Ç–º–µ–Ω–∞
                </button>
                
                <button
                  type="submit"
                  className="btn btn--primary"
                  disabled={loading}
                >
                  {loading ? (
                    <>
                      <span className="btn__spinner"></span>
                      –°–æ–∑–¥–∞–Ω–∏–µ...
                    </>
                  ) : (
                    'üé¨ –°–æ–∑–¥–∞—Ç—å —Å–µ–∞–Ω—Å'
                  )}
                </button>
              </div>
            </form>
          </div>
        </main>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏ */}
      <PriceSchemeCreateModal
        isOpen={showCreateModal}
        onClose={handleCloseModal}
        onSuccess={handlePriceSchemeCreated}
        preselectedHallId={formData.hallId}
        hallName={halls.find(h => h.id === formData.hallId)?.name}
        sessionFormData={{
          eventId: formData.eventId,
          date: formData.date,
          time: formData.time
        }}
      />
    </Layout>
  );
};
