const fs = require('fs');
const path = require('path');
const { JSDOM } = require('jsdom');

/**
 * –ü–∞—Ä—Å–µ—Ä SVG —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–∞—Ö
 */
class SVGParser {
  constructor() {
    this.seatElements = ['circle', 'rect', 'ellipse', 'path', 'polygon'];
    this.excludeAttributes = ['stroke-dasharray']; // –ò—Å–∫–ª—é—á–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –ø–æ–ª–∏–≥–æ–Ω—ã (—É–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–æ)
    this.shapeResolution = {
      'circle': 128,    // –ö—Ä—É–≥–∏ - —É–ª—å—Ç—Ä–∞ –≥–ª–∞–¥–∫–æ—Å—Ç—å
      'ellipse': 128,   // –≠–ª–ª–∏–ø—Å—ã - —É–ª—å—Ç—Ä–∞ –≥–ª–∞–¥–∫–æ—Å—Ç—å  
      'path': 128,      // –°–ª–æ–∂–Ω—ã–µ path - —É–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–æ
      'polygon': 0      // –ü–æ–ª–∏–≥–æ–Ω—ã –æ—Å—Ç–∞—é—Ç—Å—è –∫–∞–∫ –µ—Å—Ç—å
    };
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç SVG —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–∞—Ö
   * @param {string} svgFilePath - –ø—É—Ç—å –∫ SVG —Ñ–∞–π–ª—É
   * @returns {Promise<Array>} –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Å—Ç–∞—Ö
   */
  async parseSVGFile(svgFilePath) {
    try {
      console.log('üìÑ –ü–∞—Ä—Å–∏–º SVG —Ñ–∞–π–ª:', svgFilePath);
      
      // –ß–∏—Ç–∞–µ–º SVG —Ñ–∞–π–ª
      const svgContent = fs.readFileSync(svgFilePath, 'utf8');
      
      // –°–æ–∑–¥–∞–µ–º DOM –∏–∑ SVG
      const dom = new JSDOM(svgContent, { contentType: 'image/svg+xml' });
      const document = dom.window.document;
      const svgElement = document.querySelector('svg');
      
      if (!svgElement) {
        throw new Error('SVG —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ');
      }

      // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã SVG
      const svgWidth = parseFloat(svgElement.getAttribute('width')) || 800;
      const svgHeight = parseFloat(svgElement.getAttribute('height')) || 600;
      
      console.log('üìè –†–∞–∑–º–µ—Ä—ã SVG:', { width: svgWidth, height: svgHeight });

      // –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ—Å—Ç–∞–º–∏
      const allElements = svgElement.querySelectorAll(
        this.seatElements.map(tag => tag).join(', ')
      );
      
      console.log('üîç –ù–∞–π–¥–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', allElements.length);

      const seats = [];
      let seatCounter = 0;

      allElements.forEach((element, index) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        if (this.isDecorativeElement(element)) {
          return;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞
        const coords = this.getElementCoordinates(element);
        if (!coords) {
          return;
        }

        seatCounter++;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ–∫—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏
        const section = this.determineSectionByPosition(coords, svgWidth, svgHeight);
        
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä—è–¥ –∏ –º–µ—Å—Ç–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å–µ–∫—Ü–∏–∏
        const { row, seatNumber } = this.calculateRowAndSeat(coords, section, seatCounter);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –≤ –ø–æ–ª–∏–≥–æ–Ω –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        const polygonData = this.convertToPolygon(element);
        
        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
        const seatId = element.id || `element-${row}-${seatNumber}-${index}`;
        
        const seat = {
          seatId: seatId,
          row: row,
          seatNumber: seatNumber,
          section: section,
          x: Math.round(coords.x),
          y: Math.round(coords.y),
          width: Math.round(coords.width || 0),
          height: Math.round(coords.height || 0),
          objectType: 'seat', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –º–∞—Ä—à—Ä—É—Ç–µ
          svgElementId: element.id || `temp-element-${index}`,
          svgTagName: element.tagName,
          isAvailable: true,
          svgData: polygonData || {
            shape: element.tagName.toLowerCase(),
            originalShape: element.tagName.toLowerCase(),
            fallback: true
          },
          metadata: {
            originalIndex: index,
            svgAttributes: this.getRelevantAttributes(element)
          }
        };

        seats.push(seat);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç
        if (seatCounter <= 10) {
          console.log(`üé≠ –ú–µ—Å—Ç–æ ${seatCounter}:`, {
            seatId: seat.seatId,
            row: seat.row,
            seatNumber: seat.seatNumber,
            section: seat.section,
            coords: { x: seat.x, y: seat.y, width: seat.width, height: seat.height },
            shape: seat.svgData?.shape || 'unknown',
            pointsCount: seat.svgData?.points?.length || 0,
            originalShape: seat.svgData?.originalShape || seat.svgTagName
          });
        }
      });

      console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç:', seats.length);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–∞ –ø–æ —Å–µ–∫—Ü–∏—è–º, —Ä—è–¥–∞–º –∏ –Ω–æ–º–µ—Ä–∞–º
      seats.sort((a, b) => {
        if (a.section !== b.section) {
          return this.getSectionPriority(a.section) - this.getSectionPriority(b.section);
        }
        if (a.row !== b.row) {
          return a.row - b.row;
        }
        return a.seatNumber - b.seatNumber;
      });

      return seats;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SVG:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º
   */
  isDecorativeElement(element) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    for (const attr of this.excludeAttributes) {
      if (element.hasAttribute(attr)) {
        return true;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ (—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ)
    const coords = this.getElementCoordinates(element);
    if (coords && (coords.width > 100 || coords.height > 100)) {
      return true;
    }

    return false;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
   */
  getElementCoordinates(element) {
    const tagName = element.tagName.toLowerCase();
    
    try {
      switch (tagName) {
        case 'circle':
          return {
            x: parseFloat(element.getAttribute('cx')) || 0,
            y: parseFloat(element.getAttribute('cy')) || 0,
            width: (parseFloat(element.getAttribute('r')) || 5) * 2,
            height: (parseFloat(element.getAttribute('r')) || 5) * 2
          };
          
        case 'rect':
          return {
            x: parseFloat(element.getAttribute('x')) || 0,
            y: parseFloat(element.getAttribute('y')) || 0,
            width: parseFloat(element.getAttribute('width')) || 10,
            height: parseFloat(element.getAttribute('height')) || 10
          };
          
        case 'ellipse':
          return {
            x: parseFloat(element.getAttribute('cx')) || 0,
            y: parseFloat(element.getAttribute('cy')) || 0,
            width: (parseFloat(element.getAttribute('rx')) || 5) * 2,
            height: (parseFloat(element.getAttribute('ry')) || 5) * 2
          };
          
        case 'path':
          // –î–ª—è path —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å bounding box
          const d = element.getAttribute('d');
          if (d) {
            // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ path
            const match = d.match(/[ML]\s*(-?\d+(?:\.\d+)?)\s*,?\s*(-?\d+(?:\.\d+)?)/);
            if (match) {
              return {
                x: parseFloat(match[1]),
                y: parseFloat(match[2]),
                width: 10, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä
                height: 10
              };
            }
          }
          return null;
          
        case 'polygon':
          const pointsStr = element.getAttribute('points') || '';
          const coords = pointsStr.trim().split(/[\s,]+/);
          if (coords.length >= 4) {
            const xs = [], ys = [];
            for (let i = 0; i < coords.length; i += 2) {
              if (coords[i] && coords[i + 1]) {
                xs.push(parseFloat(coords[i]));
                ys.push(parseFloat(coords[i + 1]));
              }
            }
            if (xs.length > 0 && ys.length > 0) {
              const minX = Math.min(...xs);
              const maxX = Math.max(...xs);
              const minY = Math.min(...ys);
              const maxY = Math.max(...ys);
              return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };
            }
          }
          return null;
          
        default:
          return null;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞:', tagName, error);
      return null;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–µ–∫—Ü–∏—é –∑–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  determineSectionByPosition(coords, svgWidth, svgHeight) {
    const { x, y } = coords;
    const centerX = svgWidth / 2;
    const centerY = svgHeight / 2;
    
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏
    if (y < svgHeight * 0.6) {
      return 'parterre'; // –ü–∞—Ä—Ç–µ—Ä - –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å
    } else if (y < svgHeight * 0.8) {
      return 'amphitheatre'; // –ê–º—Ñ–∏—Ç–µ–∞—Ç—Ä - —Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å
    } else {
      return 'balcony'; // –ë–∞–ª–∫–æ–Ω - –≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä—è–¥ –∏ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –∏ —Å–µ–∫—Ü–∏–∏
   */
  calculateRowAndSeat(coords, section, globalIndex) {
    const { x, y } = coords;
    
    // –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–ª–∞
    let row, seatNumber;
    
    switch (section) {
      case 'parterre':
        // –ü–∞—Ä—Ç–µ—Ä: –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞
        row = Math.max(1, Math.min(15, Math.ceil(y / 40) + Math.floor(globalIndex / 50)));
        seatNumber = Math.max(1, Math.ceil(x / 25) + (globalIndex % 10));
        break;
        
      case 'amphitheatre':
        // –ê–º—Ñ–∏—Ç–µ–∞—Ç—Ä: 8 —Ä—è–¥–æ–≤
        row = Math.max(1, Math.min(8, Math.ceil(((y - 300) / 100) * 2)));
        seatNumber = Math.max(1, Math.ceil((x / 40)));
        break;
        
      case 'balcony':
        // –ë–∞–ª–∫–æ–Ω: 6 —Ä—è–¥–æ–≤
        row = Math.max(1, Math.min(6, Math.ceil(((y - 500) / 100) * 2)));
        seatNumber = Math.max(1, Math.ceil((x / 60)));
        break;
        
      default:
        // Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        row = Math.ceil(globalIndex / 20);
        seatNumber = ((globalIndex - 1) % 20) + 1;
    }
    
    return { row, seatNumber };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  getRelevantAttributes(element) {
    const relevantAttrs = ['fill', 'stroke', 'stroke-width', 'opacity', 'class'];
    const attrs = {};
    
    relevantAttrs.forEach(attr => {
      const value = element.getAttribute(attr);
      if (value) {
        attrs[attr] = value;
      }
    });
    
    return attrs;
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç SVG —ç–ª–µ–º–µ–Ω—Ç –≤ –ø–æ–ª–∏–≥–æ–Ω —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
   * @param {Element} element - SVG —ç–ª–µ–º–µ–Ω—Ç
   * @returns {Object|null} –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
   */
  convertToPolygon(element) {
    const tagName = element.tagName.toLowerCase();
    
    try {
      switch(tagName) {
        case 'circle':
          return this.circleToPolygon(element);
        case 'ellipse':
          return this.ellipseToPolygon(element);
        case 'path':
          return this.pathToPolygon(element);
        case 'polygon':
          return this.parsePolygon(element);
        case 'rect':
          // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏
          return null;
        default:
          return null;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –ø–æ–ª–∏–≥–æ–Ω:', tagName, error.message);
      return null;
    }
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∫—Ä—É–≥ –≤ –ø–æ–ª–∏–≥–æ–Ω —Å 64 —Ç–æ—á–∫–∞–º–∏
   * @param {Element} circleElement - circle —ç–ª–µ–º–µ–Ω—Ç
   * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
   */
  circleToPolygon(circleElement) {
    const cx = parseFloat(circleElement.getAttribute('cx') || 0);
    const cy = parseFloat(circleElement.getAttribute('cy') || 0);
    const r = parseFloat(circleElement.getAttribute('r') || 0);
    const sides = this.shapeResolution.circle;
    
    const points = [];
    for (let i = 0; i < sides; i++) {
      const angle = (2 * Math.PI * i) / sides;
      points.push({
        x: Math.round(cx + r * Math.cos(angle)),
        y: Math.round(cy + r * Math.sin(angle))
      });
    }
    
    return {
      shape: 'polygon',
      points: points,
      originalShape: 'circle',
      originalData: { cx, cy, r },
      resolution: sides
    };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —ç–ª–ª–∏–ø—Å –≤ –ø–æ–ª–∏–≥–æ–Ω —Å 64 —Ç–æ—á–∫–∞–º–∏
   * @param {Element} ellipseElement - ellipse —ç–ª–µ–º–µ–Ω—Ç
   * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
   */
  ellipseToPolygon(ellipseElement) {
    const cx = parseFloat(ellipseElement.getAttribute('cx') || 0);
    const cy = parseFloat(ellipseElement.getAttribute('cy') || 0);
    const rx = parseFloat(ellipseElement.getAttribute('rx') || 0);
    const ry = parseFloat(ellipseElement.getAttribute('ry') || 0);
    const sides = this.shapeResolution.ellipse;
    
    const points = [];
    for (let i = 0; i < sides; i++) {
      const angle = (2 * Math.PI * i) / sides;
      points.push({
        x: Math.round(cx + rx * Math.cos(angle)),
        y: Math.round(cy + ry * Math.sin(angle))
      });
    }
    
    return {
      shape: 'polygon',
      points: points,
      originalShape: 'ellipse',
      originalData: { cx, cy, rx, ry },
      resolution: sides
    };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç path –≤ –ø–æ–ª–∏–≥–æ–Ω —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
   * @param {Element} pathElement - path —ç–ª–µ–º–µ–Ω—Ç
   * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
   */
  pathToPolygon(pathElement) {
    const pathData = pathElement.getAttribute('d');
    if (!pathData) return null;

    // –î–ª—è –º–µ—Å—Ç (–æ–±—ã—á–Ω–æ –º–∞–ª–µ–Ω—å–∫–∏–µ –∫—Ä—É–≥–ª—ã–µ —Ñ–∏–≥—É—Ä—ã) —Å–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –∫—Ä—É–≥
    const coords = this.getElementCoordinates(pathElement);
    if (coords && coords.width < 50 && coords.height < 50) {
      // –°–æ–∑–¥–∞–µ–º –∏–¥–µ–∞–ª—å–Ω—ã–π –∫—Ä—É–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ bounding box
      const centerX = coords.x + coords.width / 2;
      const centerY = coords.y + coords.height / 2;
      const radius = Math.min(coords.width, coords.height) / 2;
      const sides = this.shapeResolution.path; // 128 —Ç–æ—á–µ–∫
      
      const points = [];
      for (let i = 0; i < sides; i++) {
        const angle = (2 * Math.PI * i) / sides;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–µ–∑ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–ª—è –≥–ª–∞–¥–∫–æ—Å—Ç–∏
        points.push({
          x: centerX + radius * Math.cos(angle),
          y: centerY + radius * Math.sin(angle)
        });
      }
      
      return {
        shape: 'polygon',
        points: points,
        originalShape: 'path',
        originalPath: pathData,
        resolution: sides,
        generatedAsCircle: true, // –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —ç—Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫—Ä—É–≥
        centerX: centerX,
        centerY: centerY,
        radius: radius
      };
    }

    // –î–ª—è –±–æ–ª—å—à–∏—Ö —Å–ª–æ–∂–Ω—ã—Ö path –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    const points = this.samplePathWithHighResolution(pathData);
    
    return {
      shape: 'polygon',
      points: points,
      originalShape: 'path',
      originalPath: pathData,
      resolution: points.length
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –∏–∑ path –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—é
   * @param {string} pathData - —Å—Ç—Ä–æ–∫–∞ —Å path –¥–∞–Ω–Ω—ã–º–∏
   * @returns {Array} –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
   */
  samplePathWithHighResolution(pathData) {
    const targetPoints = this.shapeResolution.path; // 64 —Ç–æ—á–∫–∏
    const points = [];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ path
    const rawPoints = this.extractRawPointsFromPath(pathData);
    
    if (rawPoints.length < 2) {
      return [{x: 0, y: 0}];
    }
    
    // –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –º–∞–ª–æ, –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –º–µ–∂–¥—É –Ω–∏–º–∏
    if (rawPoints.length < targetPoints) {
      points.push(...this.interpolatePoints(rawPoints, targetPoints));
    } else {
      // –ï—Å–ª–∏ —Ç–æ—á–µ–∫ –º–Ω–æ–≥–æ, –±–µ—Ä–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—É—é –≤—ã–±–æ—Ä–∫—É
      points.push(...this.samplePoints(rawPoints, targetPoints));
    }
    
    console.log(`üé® Path ‚Üí Polygon: ${rawPoints.length} –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫ ‚Üí ${points.length} —Ç–æ—á–µ–∫ –ø–æ–ª–∏–≥–æ–Ω–∞`);
    
    return points.length > 0 ? points : [{x: 0, y: 0}];
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ path –¥–∞–Ω–Ω—ã—Ö
   * @param {string} pathData - —Å—Ç—Ä–æ–∫–∞ —Å path –¥–∞–Ω–Ω—ã–º–∏
   * @returns {Array} –º–∞—Å—Å–∏–≤ –∏—Å—Ö–æ–¥–Ω—ã—Ö —Ç–æ—á–µ–∫
   */
  extractRawPointsFromPath(pathData) {
    const points = [];
    
    // –ë–æ–ª–µ–µ —Ç–æ—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∏—Å–ª–æ–≤—ã—Ö –ø–∞—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã: —á–∏—Å–ª–æ –ø—Ä–æ–±–µ–ª/–∑–∞–ø—è—Ç–∞—è —á–∏—Å–ª–æ
    const coordPattern = /(-?\d*\.?\d+)[\s,]+(-?\d*\.?\d+)/g;
    let match;
    
    while ((match = coordPattern.exec(pathData)) !== null) {
      const x = parseFloat(match[1]);
      const y = parseFloat(match[2]);
      
      if (!isNaN(x) && !isNaN(y)) {
        points.push({
          x: Math.round(x),
          y: Math.round(y)
        });
      }
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å–æ—Å–µ–¥–Ω–∏–µ —Ç–æ—á–∫–∏
    const uniquePoints = points.filter((point, index) => {
      if (index === 0) return true;
      const prev = points[index - 1];
      return Math.abs(prev.x - point.x) > 1 || Math.abs(prev.y - point.y) > 1;
    });
    
    return uniquePoints;
  }

  /**
   * –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
   * @param {Array} points - –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏
   * @param {number} targetCount - –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
   * @returns {Array} –∏–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
   */
  interpolatePoints(points, targetCount) {
    if (points.length === 0) return [];
    if (points.length >= targetCount) return points.slice(0, targetCount);
    
    const result = [];
    const segmentCount = targetCount - 1;
    const totalLength = this.calculatePathLength(points);
    
    let currentLength = 0;
    let currentPointIndex = 0;
    
    for (let i = 0; i < targetCount; i++) {
      const targetLength = (i / segmentCount) * totalLength;
      
      // –ù–∞–π—Ç–∏ —Å–µ–≥–º–µ–Ω—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ü–µ–ª–µ–≤–∞—è –¥–ª–∏–Ω–∞
      while (currentPointIndex < points.length - 1) {
        const segmentLength = this.distance(points[currentPointIndex], points[currentPointIndex + 1]);
        
        if (currentLength + segmentLength >= targetLength) {
          // –ò–Ω—Ç–µ—Ä–ø–æ–ª–∏—Ä—É–µ–º –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
          const t = (targetLength - currentLength) / segmentLength;
          const p1 = points[currentPointIndex];
          const p2 = points[currentPointIndex + 1];
          
          result.push({
            x: Math.round(p1.x + t * (p2.x - p1.x)),
            y: Math.round(p1.y + t * (p2.y - p1.y))
          });
        break;
        }
        
        currentLength += segmentLength;
        currentPointIndex++;
      }
      
      // –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞, –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–æ—á–∫—É
      if (currentPointIndex >= points.length - 1) {
        result.push({...points[points.length - 1]});
      }
    }
    
    return result;
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—É—é –≤—ã–±–æ—Ä–∫—É —Ç–æ—á–µ–∫
   * @param {Array} points - –∏—Å—Ö–æ–¥–Ω—ã–µ —Ç–æ—á–∫–∏
   * @param {number} targetCount - –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫
   * @returns {Array} –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
   */
  samplePoints(points, targetCount) {
    if (points.length <= targetCount) return points;
    
    const result = [];
    const step = (points.length - 1) / (targetCount - 1);
    
    for (let i = 0; i < targetCount; i++) {
      const index = Math.round(i * step);
      result.push({...points[Math.min(index, points.length - 1)]});
    }
    
    return result;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é –¥–ª–∏–Ω—É –ø—É—Ç–∏ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏
   * @param {Array} points - –º–∞—Å—Å–∏–≤ —Ç–æ—á–µ–∫
   * @returns {number} –æ–±—â–∞—è –¥–ª–∏–Ω–∞
   */
  calculatePathLength(points) {
    let totalLength = 0;
    for (let i = 0; i < points.length - 1; i++) {
      totalLength += this.distance(points[i], points[i + 1]);
    }
    return totalLength;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏
   * @param {Object} p1 - –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ {x, y}
   * @param {Object} p2 - –≤—Ç–æ—Ä–∞—è —Ç–æ—á–∫–∞ {x, y}
   * @returns {number} —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
   */
  distance(p1, p2) {
    return Math.sqrt(Math.pow(p2.x - p1.x, 2) + Math.pow(p2.y - p1.y, 2));
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª–∏–≥–æ–Ω
   * @param {Element} polygonElement - polygon —ç–ª–µ–º–µ–Ω—Ç
   * @returns {Object} –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–∏–≥–æ–Ω–∞
   */
  parsePolygon(polygonElement) {
    const pointsStr = polygonElement.getAttribute('points') || '';
    const coords = pointsStr.trim().split(/[\s,]+/);
    const points = [];
    
    for (let i = 0; i < coords.length; i += 2) {
      if (coords[i] && coords[i + 1]) {
        points.push({
          x: Math.round(parseFloat(coords[i])),
          y: Math.round(parseFloat(coords[i + 1]))
        });
      }
    }
    
    return {
      shape: 'polygon',
      points: points.length > 0 ? points : [{x: 0, y: 0}],
      originalShape: 'polygon',
      originalPoints: pointsStr
    };
  }


  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
   */
  getSectionPriority(section) {
    const priorities = {
      'parterre': 1,
      'amphitheatre': 2,
      'balcony': 3
    };
    return priorities[section] || 4;
  }
}

module.exports = SVGParser;

