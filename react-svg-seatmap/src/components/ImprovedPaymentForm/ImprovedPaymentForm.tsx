import React, { useState, useCallback } from 'react';
import { PhoneInput } from '../PhoneInput/PhoneInput';
import { ReservationTimer } from '../ReservationTimer/ReservationTimer';
import { formatCurrency, getPrimaryCurrency } from '../../utils/currency';
import './ImprovedPaymentForm.scss';

interface CustomerInfo {
  name: string;
  phone: string;
  email: string;
}

interface SelectedSeat {
  seatId: string;
  row: number;
  place: number;
  zone?: string;
  price: number;
  priceColor?: string;
  currency?: string;
  virtualSeatsCount?: number;
  virtualSeatIds?: string[];
}

interface ImprovedPaymentFormProps {
  selectedSeats: SelectedSeat[];
  sessionId: string;
  totalAmount: number;
  tempOrderId: string | null;
  attribution?: any;
  widgetId?: string; // ID –≤–∏–¥–∂–µ—Ç–∞
  onPaymentSuccess: (orderData: any) => void;
  onCancel: () => void;
  orderExpiresAt?: Date; // –í—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞
}

export const ImprovedPaymentForm: React.FC<ImprovedPaymentFormProps> = ({
  selectedSeats,
  sessionId,
  totalAmount,
  tempOrderId,
  attribution = {},
  widgetId,
  onPaymentSuccess,
  onCancel,
  orderExpiresAt
}) => {
  const [customerInfo, setCustomerInfo] = useState<CustomerInfo>({
    name: '',
    phone: '',
    email: ''
  });
  
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [validationErrors, setValidationErrors] = useState<Partial<CustomerInfo>>({});
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –≤–∞–ª—é—Ç—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
  const primaryCurrency = getPrimaryCurrency(selectedSeats);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π
  const validateForm = useCallback((): boolean => {
    const errors: Partial<CustomerInfo> = {};

    if (!customerInfo.name.trim()) {
      errors.name = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (customerInfo.name.trim().length < 2) {
      errors.name = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞';
    }

    if (!customerInfo.phone.trim()) {
      errors.phone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (customerInfo.phone.length < 10) {
      errors.phone = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }

    if (!customerInfo.email.trim()) {
      errors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(customerInfo.email)) {
      errors.email = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å';
    }

    setValidationErrors(errors);
    return Object.keys(errors).length === 0;
  }, [customerInfo]);

  const handleInputChange = (field: keyof CustomerInfo, value: string) => {
    setCustomerInfo(prev => ({
      ...prev,
      [field]: value
    }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (validationErrors[field]) {
      setValidationErrors(prev => ({
        ...prev,
        [field]: undefined
      }));
    }
  };

  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);
    setError(null);

    try {
      if (!tempOrderId) {
        throw new Error('ID –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å pending
      const updateData = {
        customerName: customerInfo.name,
        customerPhone: customerInfo.phone,
        customerEmail: customerInfo.email,
        attribution, // UTM-–º–µ—Ç–∫–∏ –¥–ª—è –∞—Ç—Ä–∏–±—É—Ü–∏–∏
        widgetId, // ID –≤–∏–¥–∂–µ—Ç–∞
        status: 'pending' // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–∑ temporary –≤ pending –¥–ª—è –æ–ø–ª–∞—Ç—ã
      };

      console.log('üí≥ –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –¥–ª—è –æ–ø–ª–∞—Ç—ã:', updateData);

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º apiClient
      const { apiClient } = await import('../../services/api');
      
      const response = await apiClient.updateOrder(tempOrderId, updateData);
      
      if (response.success) {
        console.log('‚úÖ –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –æ–ø–ª–∞—Ç—ã');
        
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã (Stripe, PayPal –∏ —Ç.–¥.)
        // –ü–æ–∫–∞ —á—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å paid
        const payResponse = await apiClient.payOrder(tempOrderId);
        
        if (payResponse.success) {
          onPaymentSuccess({
            orderId: tempOrderId,
            customerInfo,
            totalAmount
          });
        } else {
          throw new Error(payResponse.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞');
        }
      } else {
        throw new Error(response.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
      }
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ:', err);
      setError(err instanceof Error ? err.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    } finally {
      setIsSubmitting(false);
    }
  }, [customerInfo, validateForm, tempOrderId, totalAmount, onPaymentSuccess]);

  const handleTimeExpired = () => {
    setError('–í—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–∞ –∑–∞–Ω–æ–≤–æ.');
  };

  return (
    <div className="improved-payment-form">
      <div className="improved-payment-form__container">
        {/* –¢–∞–π–º–µ—Ä –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
        <ReservationTimer 
          initialTime={orderExpiresAt ? Math.max(0, Math.floor((orderExpiresAt.getTime() - Date.now()) / 1000)) : 15 * 60}
          onTimeExpired={handleTimeExpired}
        />

        {/* –°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç */}
        <div className="improved-payment-form__seats">
          <h3 className="improved-payment-form__seats-title">–í–∞—à–∏ –±–∏–ª–µ—Ç—ã</h3>
          <div className="improved-payment-form__seats-list">
            {selectedSeats.map((seat, index) => (
              <div key={index} className="seat-item">
                <div className="seat-item__info">
                  {seat.seatId.includes('-virtual-') ? (
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞
                    <>
                      <div className="seat-item__position">{seat.zone || '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞'}</div>
                      <div className="seat-item__zone"></div>
                    </>
                  ) : (
                    // –û–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ
                    <>
                      <div className="seat-item__position">{seat.place} –º–µ—Å—Ç–æ, {seat.row} —Ä—è–¥</div>
                      <div className="seat-item__zone">{seat.zone || '–ü–∞—Ä—Ç–µ—Ä'}</div>
                    </>
                  )}
                </div>
                <div className="seat-item__price">
                  {formatCurrency(seat.price, seat.currency || primaryCurrency)}
                </div>
              </div>
            ))}
          </div>
          
          <div className="improved-payment-form__total">
            <div className="total-line">
              <span>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ:</span>
              <span className="total-amount">{formatCurrency(totalAmount, primaryCurrency)}</span>
            </div>
          </div>
        </div>

        {/* –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–∞—Ç–µ–ª—è */}
        <form onSubmit={handleSubmit} className="improved-payment-form__form">
          <h3 className="improved-payment-form__form-title">–î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è</h3>
          
          {error && (
            <div className="improved-payment-form__error">
              <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="2"/>
                <line x1="15" y1="9" x2="9" y2="15" stroke="currentColor" strokeWidth="2"/>
                <line x1="9" y1="9" x2="15" y2="15" stroke="currentColor" strokeWidth="2"/>
              </svg>
              {error}
            </div>
          )}

          <div className="form-group">
            <label htmlFor="name">–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è *</label>
            <input
              id="name"
              type="text"
              value={customerInfo.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
              className={validationErrors.name ? 'error' : ''}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é"
              disabled={isSubmitting}
            />
            {validationErrors.name && (
              <span className="error-message">{validationErrors.name}</span>
            )}
          </div>

          <div className="form-group">
            <label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
            <PhoneInput
              value={customerInfo.phone}
              onChange={(value) => handleInputChange('phone', value)}
              error={validationErrors.phone}
              disabled={isSubmitting}
            />
          </div>

          <div className="form-group">
            <label htmlFor="email">Email *</label>
            <input
              id="email"
              type="email"
              value={customerInfo.email}
              onChange={(e) => handleInputChange('email', e.target.value)}
              className={validationErrors.email ? 'error' : ''}
              placeholder="example@email.com"
              disabled={isSubmitting}
            />
            {validationErrors.email && (
              <span className="error-message">{validationErrors.email}</span>
            )}
          </div>

          <div className="improved-payment-form__actions">
            <button
              type="button"
              onClick={onCancel}
              className="action-button action-button--secondary"
              disabled={isSubmitting}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="action-button action-button--primary"
              disabled={isSubmitting}
            >
              {isSubmitting ? (
                <>
                  <svg className="spinner" width="20" height="20" viewBox="0 0 24 24">
                    <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="2" fill="none" strokeDasharray="31.416" strokeDashoffset="31.416">
                      <animate attributeName="stroke-dasharray" dur="2s" values="0 31.416;15.708 15.708;0 31.416" repeatCount="indefinite"/>
                      <animate attributeName="stroke-dashoffset" dur="2s" values="0;-15.708;-31.416" repeatCount="indefinite"/>
                    </circle>
                  </svg>
                  –û–±—Ä–∞–±–æ—Ç–∫–∞...
                </>
              ) : (
                <>
                  <svg width="20" height="20" viewBox="0 0 24 24" fill="none">
                    <path d="M9 12l2 2 4-4" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M21 12c-1 0-3-1-3-3s2-3 3-3 3 1 3 3-2 3-3 3" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    <path d="M3 12c1 0 3-1 3-3s-2-3-3-3-3 1-3 3 2 3 3 3" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                  </svg>
                  –û–ø–ª–∞—Ç–∏—Ç—å {formatCurrency(totalAmount, primaryCurrency)}
                </>
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};
