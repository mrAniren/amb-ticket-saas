import { 
  AuthResponse, 
  Hall, 
  HallsResponse, 
  HallResponse,
  FileUploadResponse,
  ApiResponse 
} from '../types/api.types';
import { Seat, Zone } from '../types/Seat.types';
import { 
  PriceScheme, 
  PriceSchemeCreateData, 
  Price 
} from '../types/PriceScheme.types';
import { Event, SessionWithDetails } from '../types/Event.types';
import { 
  PromoCode, 
  PromoCodeCreateRequest, 
  PromoCodeUpdateRequest,
  PromoCodesResponse,
  PromoCodeResponse,
  PromoCodeDeleteResponse,
  PromoCodeValidationResponse
} from '../types/PromoCode.types';

const API_BASE = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';
const SERVER_BASE = import.meta.env.VITE_API_URL?.replace('/api', '') || 'http://localhost:3001';

class ApiClient {
  private token: string | null = localStorage.getItem('auth_token');

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ URL –¥–ª—è —Ä–µ—Å—É—Ä—Å–æ–≤ (SVG, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ç.–¥.)
  getResourceUrl(path: string): string {
    if (path.startsWith('http')) {
      return path; // –£–∂–µ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL
    }
    return `${SERVER_BASE}${path}`;
  }

  async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${API_BASE}${endpoint}`;
    
    
    const config: RequestInit = {
      headers: {
        'Content-Type': 'application/json',
        ...(this.token && { Authorization: `Bearer ${this.token}` }),
        ...options.headers,
      },
      ...options,
    };

    // –£–±–∏—Ä–∞–µ–º Content-Type –¥–ª—è FormData
    if (options.body instanceof FormData) {
      delete (config.headers as any)['Content-Type'];
    }

    const response = await fetch(url, config);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: response.statusText }));
      throw new Error(errorData.error || `HTTP Error: ${response.status}`);
    }

    return response.json();
  }

  // –ú–µ—Ç–æ–¥—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
  async login(username: string, password: string): Promise<AuthResponse> {
    const result = await this.request<AuthResponse>('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ username, password }),
    });
    
    this.token = result.token;
    localStorage.setItem('auth_token', result.token);
    
    return result;
  }

  async verify(): Promise<{ user: any }> {
    return this.request('/auth/verify', { method: 'POST' });
  }

  logout() {
    this.token = null;
    localStorage.removeItem('auth_token');
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ª–∞–º–∏
  async getHalls(): Promise<HallsResponse> {
    return this.request('/halls');
  }

  async getHall(id: string): Promise<HallResponse> {
    return this.request(`/halls/${id}`);
  }

  async createHall(data: FormData): Promise<HallResponse> {
    return this.request('/halls', {
      method: 'POST',
      body: data,
    });
  }

  async updateHall(id: string, data: FormData): Promise<HallResponse> {
    return this.request(`/halls/${id}`, {
      method: 'PUT',
      body: data,
    });
  }

  async updateHallConfig(id: string, config: { seat_config?: string; zone_config?: string; capacity?: number; currency?: string }): Promise<HallResponse> {
    return this.request(`/halls/${id}/config`, {
      method: 'PUT',
      body: JSON.stringify(config),
    });
  }

  async deleteHall(id: string): Promise<{ message: string }> {
    return this.request(`/halls/${id}`, { method: 'DELETE' });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Å—Ç–∞–º–∏
  async getSeats(hallId: number): Promise<{ seats: Seat[] }> {
    return this.request(`/halls/${hallId}/seats`);
  }

  async saveSeats(hallId: number, seats: Seat[]): Promise<{ message: string; seats: Seat[] }> {
    return this.request(`/halls/${hallId}/seats/bulk`, {
      method: 'POST',
      body: JSON.stringify({ seats }),
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–æ–Ω–∞–º–∏
  async getZones(hallId: number): Promise<{ zones: Zone[] }> {
    return this.request(`/halls/${hallId}/zones`);
  }

  async createZone(hallId: number, zone: Omit<Zone, 'id'>): Promise<{ zone: Zone }> {
    return this.request(`/halls/${hallId}/zones`, {
      method: 'POST',
      body: JSON.stringify(zone),
    });
  }

  async updateZone(hallId: number, zoneId: string, zone: Partial<Zone>): Promise<{ zone: Zone }> {
    return this.request(`/halls/${hallId}/zones/${zoneId}`, {
      method: 'PUT',
      body: JSON.stringify(zone),
    });
  }

  async deleteZone(hallId: number, zoneId: string): Promise<{ message: string }> {
    return this.request(`/halls/${hallId}/zones/${zoneId}`, { method: 'DELETE' });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
  async uploadFile(file: File, type: 'svg' | 'photo'): Promise<FileUploadResponse> {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('type', type);

    return this.request('/files/upload', {
      method: 'POST',
      body: formData,
    });
  }

  async updateHallSvg(hallId: string, svgFile: File): Promise<{ message: string; svg_file: any }> {
    const formData = new FormData();
    formData.append('svg', svgFile);

    return this.request(`/halls/${hallId}/svg`, {
      method: 'PUT',
      body: formData,
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∞–µ—Å–æ–≤–∫–∞–º–∏
  async getPriceSchemes(): Promise<{ priceSchemes: PriceScheme[]; total: number }> {
    return this.request('/price-schemes');
  }

  async getPriceScheme(id: string): Promise<{ priceScheme: PriceScheme }> {
    return this.request(`/price-schemes/${id}`);
  }

  async createPriceScheme(data: PriceSchemeCreateData): Promise<{ priceScheme: PriceScheme }> {
    return this.request('/price-schemes', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updatePriceScheme(id: string, data: { 
    name?: string; 
    prices?: Price[]; 
    seatPrices?: { seatId: string; priceId: string }[] 
  }): Promise<{ priceScheme: PriceScheme }> {
    return this.request(`/price-schemes/${id}`, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async deletePriceScheme(id: string): Promise<{ message: string }> {
    return this.request(`/price-schemes/${id}`, { method: 'DELETE' });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏ –≤ —Ä–∞—Å–ø–∞–µ—Å–æ–≤–∫–µ
  async addPrice(priceSchemeId: string, price: Omit<Price, 'id'>): Promise<{ price: Price; priceScheme: PriceScheme }> {
    return this.request(`/price-schemes/${priceSchemeId}/prices`, {
      method: 'POST',
      body: JSON.stringify(price),
    });
  }

  async updatePrice(priceSchemeId: string, priceId: string, price: Partial<Price>): Promise<{ price: Price; priceScheme: PriceScheme }> {
    return this.request(`/price-schemes/${priceSchemeId}/prices/${priceId}`, {
      method: 'PUT',
      body: JSON.stringify(price),
    });
  }

  async deletePrice(priceSchemeId: string, priceId: string): Promise<{ message: string; priceScheme: PriceScheme }> {
    return this.request(`/price-schemes/${priceSchemeId}/prices/${priceId}`, { method: 'DELETE' });
  }

  async applyPriceToSeats(priceSchemeId: string, seatIds: string[], priceId: string): Promise<{ message: string; priceScheme: PriceScheme }> {
    return this.request(`/price-schemes/${priceSchemeId}/apply-price`, {
      method: 'POST',
      body: JSON.stringify({ seatIds, priceId }),
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
  async getEvents(activeOnly: boolean = true): Promise<{ events: Event[] }> {
    const params = new URLSearchParams();
    if (!activeOnly) {
      params.append('active', 'false');
    }
    const queryString = params.toString();
    const url = queryString ? `/events?${queryString}` : '/events';
    console.log('üåê apiClient: –ó–∞–ø—Ä–æ—Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, activeOnly:', activeOnly, 'URL:', url);
    return this.request(url);
  }

  async getEvent(id: string): Promise<{ event: Event }> {
    return this.request(`/events/${id}`);
  }

  async createEvent(eventData: { name: string; description: string; image: string }): Promise<{ event: Event }> {
    return this.request('/events', {
      method: 'POST',
      body: JSON.stringify(eventData),
    });
  }

  async updateEvent(id: string, eventData: { name?: string; description?: string; image?: string }): Promise<{ event: Event }> {
    return this.request(`/events/${id}`, {
      method: 'PUT',
      body: JSON.stringify(eventData),
    });
  }

  async archiveEvent(id: string): Promise<{ message: string; event: Event }> {
    return this.request(`/events/${id}/archive`, { method: 'PATCH' });
  }

  async restoreEvent(id: string): Promise<{ message: string; event: Event }> {
    return this.request(`/events/${id}/restore`, { method: 'PATCH' });
  }

  async deleteEvent(id: string): Promise<{ message: string; event: Event }> {
    return this.request(`/events/${id}`, { method: 'DELETE' });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∞–Ω—Å–∞–º–∏
  async getSessions(): Promise<{ sessions: SessionWithDetails[] }> {
    return this.request('/sessions');
  }

  async getEventSessions(eventId: string): Promise<{ sessions: SessionWithDetails[] }> {
    return this.request(`/sessions/event/${eventId}`);
  }

  async getActiveEventSessions(eventId: string): Promise<{ sessions: SessionWithDetails[] }> {
    return this.request(`/sessions/event/${eventId}/active`);
  }

  async getPastEventSessions(eventId: string): Promise<{ sessions: SessionWithDetails[] }> {
    return this.request(`/sessions/event/${eventId}/past`);
  }

  async getArchivedEventSessions(eventId: string): Promise<{ sessions: SessionWithDetails[] }> {
    return this.request(`/sessions/event/${eventId}/archived`);
  }


  async createSession(sessionData: { 
    eventId: string; 
    date: string; 
    time: string; 
    hallId: string; 
    priceSchemeId: string 
  }): Promise<{ session: SessionWithDetails }> {
    return this.request('/sessions', {
      method: 'POST',
      body: JSON.stringify(sessionData),
    });
  }

  async updateSession(id: string, sessionData: { 
    eventId?: string; 
    date?: string; 
    time?: string; 
    hallId?: string; 
    priceSchemeId?: string 
  }): Promise<{ session: SessionWithDetails }> {
    return this.request(`/sessions/${id}`, {
      method: 'PUT',
      body: JSON.stringify(sessionData),
    });
  }

  async deleteSession(id: string): Promise<{ message: string; session: SessionWithDetails }> {
    return this.request(`/sessions/${id}`, { method: 'DELETE' });
  }

  async archiveSession(id: string): Promise<{ success: boolean; message: string }> {
    return this.request(`/sessions/${id}/archive`, { method: 'PATCH' });
  }

  async unarchiveSession(id: string): Promise<{ success: boolean; message: string }> {
    return this.request(`/sessions/${id}/unarchive`, { method: 'PATCH' });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏
  async getPromoCodes(): Promise<PromoCodesResponse> {
    return this.request('/promo-codes');
  }

  async getPromoCode(id: string): Promise<PromoCodeResponse> {
    return this.request(`/promo-codes/${id}`);
  }

  async createPromoCode(data: PromoCodeCreateRequest): Promise<PromoCodeResponse> {
    return this.request('/promo-codes', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async updatePromoCode(id: string, data: PromoCodeUpdateRequest): Promise<PromoCodeResponse> {
    return this.request(`/promo-codes/${id}`, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async deletePromoCode(id: string): Promise<PromoCodeDeleteResponse> {
    return this.request(`/promo-codes/${id}`, { method: 'DELETE' });
  }

  async validatePromoCode(code: string): Promise<PromoCodeValidationResponse> {
    return this.request(`/promo-codes/validate/${code}`, { method: 'POST' });
  }

  async validatePromoCodeWithAmount(code: string, orderAmount: number): Promise<PromoCodeValidationResponse> {
    return this.request('/promo-codes/validate', {
      method: 'POST',
      body: JSON.stringify({ code, orderAmount }),
    });
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  async getHallPriceSchemes(hallId: string): Promise<{ priceSchemes: PriceScheme[] }> {
    return this.request(`/price-schemes/hall/${hallId}`);
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–ª–µ—Ç–∞–º–∏
  async getSessionTickets(sessionId: string): Promise<{ tickets: any[] }> {
    return this.request(`/tickets/session/${sessionId}`);
  }

  async reserveSeats(sessionId: string, seatIds: string[]): Promise<{ tickets: any[], reservedUntil: string }> {
    return this.request('/tickets/reserve', {
      method: 'POST',
      body: JSON.stringify({ sessionId, seatIds }),
    });
  }

  async cancelReservation(ticketId: string): Promise<{ success: boolean }> {
    return this.request(`/tickets/reserve/${ticketId}`, { method: 'DELETE' });
  }

  async updateTicketStatus(ticketId: string, status: string, orderId?: string): Promise<{ ticket: any }> {
    return this.request(`/tickets/${ticketId}/status`, {
      method: 'PATCH',
      body: JSON.stringify({ status, orderId }),
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
  async createOrder(orderData: {
    sessionId: string;
    customerName: string;
    customerPhone: string;
    customerEmail: string;
    selectedSeatIds: string[]; // –ò–∑–º–µ–Ω–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –º–∞—Å—Å–∏–≤ ID –º–µ—Å—Ç –≤–º–µ—Å—Ç–æ ticketIds
    specialZoneData?: { [key: string]: number }; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω
    promoCode?: string;
    attribution?: any; // UTM-–º–µ—Ç–∫–∏ –¥–ª—è –∞—Ç—Ä–∏–±—É—Ü–∏–∏
    widgetId?: string; // ID –≤–∏–¥–∂–µ—Ç–∞
    isInvitation?: boolean; // –§–ª–∞–≥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    notes?: string; // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
  }): Promise<{ success: boolean; order: any; message?: string }> {
    return this.request('/orders', {
      method: 'POST',
      body: JSON.stringify(orderData),
    });
  }

  async getOrder(orderId: string): Promise<{ order: any }> {
    return this.request(`/orders/${orderId}`);
  }

  async updateOrder(orderId: string, updateData: any): Promise<{ success: boolean; order: any; message?: string }> {
    return this.request(`/orders/${orderId}`, {
      method: 'PATCH',
      body: JSON.stringify(updateData),
    });
  }

  async updateOrderStatus(orderId: string, status: string): Promise<{ success: boolean }> {
    return this.request(`/orders/${orderId}/status`, {
      method: 'PATCH',
      body: JSON.stringify({ status }),
    });
  }

  async payOrder(orderId: string, paymentMethod: string = 'cash'): Promise<{ order: any }> {
    return this.request(`/orders/${orderId}/pay`, {
      method: 'POST',
      body: JSON.stringify({ paymentMethod }),
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –±–∏–ª–µ—Ç–æ–≤
  async getSession(sessionId: string): Promise<{ success: boolean; session?: SessionWithDetails; message?: string }> {
    return this.request(`/sessions/${sessionId}`, { method: 'GET' });
  }

  // === API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∏–ª–µ—Ç–∞–º–∏ ===

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
  async generateTickets(orderId: string): Promise<{ success: boolean; message: string; data?: any }> {
    return this.request('/tickets/generate', {
      method: 'POST',
      body: JSON.stringify({ orderId }),
    });
  }


  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∏–ª–µ—Ç–µ
  async getTicket(ticketId: string): Promise<{ success: boolean; data?: { ticket: any } }> {
    return this.request(`/tickets/${ticketId}`, { method: 'GET' });
  }

  // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ PDF –±–∏–ª–µ—Ç–∞
  async downloadTicket(ticketId: string): Promise<Blob> {
    const response = await fetch(`${API_BASE}/tickets/${ticketId}/download`, {
      method: 'GET',
      headers: {
        'Authorization': this.token ? `Bearer ${this.token}` : '',
      },
    });

    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–∞: ${response.statusText}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ PDF —Ñ–∞–π–ª
    const contentType = response.headers.get('content-type');
    if (!contentType || !contentType.includes('application/pdf')) {
      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ PDF, —á–∏—Ç–∞–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const text = await response.text();
      console.error('–û–∂–∏–¥–∞–ª—Å—è PDF, –Ω–æ –ø–æ–ª—É—á–µ–Ω:', contentType, text);
      throw new Error(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ PDF —Ñ–∞–π–ª. Content-Type: ${contentType}`);
    }

    return response.blob();
  }

  // –ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –±–∏–ª–µ—Ç–∞
  async regenerateTicket(ticketId: string): Promise<{ success: boolean; message: string }> {
    return this.request(`/tickets/${ticketId}/regenerate`, {
      method: 'POST',
    });
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –±–∏–ª–µ—Ç–∞
  async deleteTicket(ticketId: string): Promise<{ success: boolean; message: string }> {
    return this.request(`/tickets/${ticketId}`, {
      method: 'DELETE',
    });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∏–ª–µ—Ç–æ–≤
  async getTicketStats(): Promise<{ success: boolean; data?: any }> {
    return this.request('/tickets/stats/overview', { method: 'GET' });
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
  async getOrderTickets(orderId: string): Promise<{
    success: boolean;
    data?: {
      order: {
        _id: string;
        orderNumber: string;
        customerName: string;
        customerEmail: string;
        customerPhone: string;
        total: number;
        paidAt: string;
        sessionInfo: {
          id: string;
          date: string;
          time: string;
          eventTitle?: string;
          hallName?: string;
        };
      };
      tickets: Array<{
        _id: string;
        ticketId: string;
        seatRow: number;
        seatNumber: number;
        seatSection: string;
        price: number;
        currency: string;
        pdfGenerated: boolean;
      }>;
    };
  }> {
    return this.request(`/customers/${orderId}/tickets`, { method: 'GET' });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã –∑–∞–∫–∞–∑–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ PDF
  async getTicketsByOrderId(orderId: string): Promise<{ success: boolean; data: { tickets: any[] } }> {
    return this.request(`/tickets/order/${orderId}`);
  }

  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π GET –º–µ—Ç–æ–¥
  async get(endpoint: string): Promise<any> {
    return this.request(endpoint, { method: 'GET' });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∏–¥–∂–µ—Ç–∞–º–∏
  async getWidgets(): Promise<{ success: boolean; data: { widgets: any[] } }> {
    return this.request('/widgets');
  }

  async createWidget(data: { name: string; sessionId: string; displayMode: string }): Promise<{ success: boolean; data: { widget: any } }> {
    return this.request('/widgets', {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async deleteWidget(widgetId: string): Promise<{ success: boolean; message: string }> {
    return this.request(`/widgets/${widgetId}`, { method: 'DELETE' });
  }

  async getEvents(): Promise<{ success: boolean; events: any[] }> {
    return this.request('/events');
  }


  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  isAuthenticated(): boolean {
    return !!this.token;
  }

  getToken(): string | null {
    return this.token;
  }
}

export const apiClient = new ApiClient();

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å MongoDB _id –∏ –æ–±—ã—á–Ω—ã–º id)
export const getId = (item: any): string => {
  return item.id || item._id || '';
};