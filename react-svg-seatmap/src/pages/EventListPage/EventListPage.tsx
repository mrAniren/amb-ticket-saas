import React, { useState } from 'react';
import { useAuth } from '../../hooks/useAuth';
import { useEvents } from '../../hooks/useEvents';
import { apiClient, getId } from '../../services/api';
import { Layout } from '../../components/Layout';
import { EventCard } from './components/EventCard';
import { Event } from '../../types/Event.types';
import './EventListPage.scss';

export const EventListPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'active' | 'archived'>('active');
  const { data, loading, error, refetch } = useEvents(activeTab === 'active');
  const events = data?.events || [];
  const [searchTerm, setSearchTerm] = useState('');

  // –°–º–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∏ - —Ö—É–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç –¥–∞–Ω–Ω—ã–µ
  const handleTabChange = (tab: 'active' | 'archived') => {
    console.log('üîÑ EventListPage: –°–º–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞:', tab);
    setActiveTab(tab);
  };

  const handleCreateEvent = () => {
    window.location.href = '/events/create';
  };

  const handleEdit = (id: string) => {
    window.location.href = `/events/${id}/edit`;
  };

  const handleView = (id: string) => {
    window.location.href = `/events/${id}`;
  };

  const handleArchive = async (id: string) => {
    const eventToArchive = events.find(e => getId(e) === id);
    const eventName = eventToArchive ? eventToArchive.name : `ID ${id}`;
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${eventName}"?\n\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞, –Ω–æ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è.`)) {
      return;
    }

    try {
      await apiClient.archiveEvent(id);
      alert('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
      refetch();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ' + (error as any)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  };

  const handleRestore = async (id: string) => {
    const eventToRestore = events.find(e => getId(e) === id);
    const eventName = eventToRestore ? eventToRestore.name : `ID ${id}`;
    
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ "${eventName}"?\n\n–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫.`)) {
      return;
    }

    try {
      await apiClient.restoreEvent(id);
      alert('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      refetch();
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ' + (error as any)?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
    }
  };

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π
  const filteredEvents = events.filter(event => {
    const matchesSearch = !searchTerm || 
      event.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      event.description.toLowerCase().includes(searchTerm.toLowerCase());
    
    return matchesSearch;
  });

  if (loading) {
    return (
      <Layout currentPage="events">
        <div className="event-list-page">
          <div className="event-list-page__loading">
            <div className="spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π...</p>
          </div>
        </div>
      </Layout>
    );
  }

  if (error) {
    return (
      <Layout currentPage="events">
        <div className="event-list-page">
          <div className="event-list-page__error">
            <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h2>
            <p>{error}</p>
            <button onClick={refetch} className="btn btn--primary">
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout currentPage="events">
      <div className="event-list-page">
        <header className="event-list-page__header">
          <div className="event-list-page__title">
            <h1>–ú–æ–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è</h1>
          </div>
          
          <div className="event-list-page__tabs">
            <button 
              className={`event-list-page__tab ${activeTab === 'active' ? 'event-list-page__tab--active' : ''}`}
              onClick={() => handleTabChange('active')}
            >
              –ê–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            </button>
            <button 
              className={`event-list-page__tab ${activeTab === 'archived' ? 'event-list-page__tab--active' : ''}`}
              onClick={() => handleTabChange('archived')}
            >
              –ê—Ä—Ö–∏–≤–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
            </button>
          </div>
          
          <div className="event-list-page__controls">
            <div className="event-list-page__search">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
            </div>
            
            <button onClick={handleCreateEvent} className="btn btn--primary">
              ‚ûï –°–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
            </button>
          </div>
        </header>

        <main className="event-list-page__content">
          {filteredEvents.length === 0 ? (
            <div className="event-list-page__empty">
              <div className="event-list-page__empty-icon">üé≠</div>
              <h3>–ü–æ–∫–∞ –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</h3>
              <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —Å–æ–±—ã—Ç–∏—è</p>
              <button onClick={handleCreateEvent} className="btn btn--primary btn--lg">
                ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
              </button>
            </div>
          ) : (
            <>
              <div className="event-list-page__stats">
                <span className="event-list-page__count">
                  {filteredEvents.length === events.length 
                    ? `–í—Å–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π: ${events.length}`
                    : `–ù–∞–π–¥–µ–Ω–æ: ${filteredEvents.length} –∏–∑ ${events.length}`
                  }
                </span>
              </div>
              
              <div className="event-list-page__grid">
                {filteredEvents.map((event) => (
                  <EventCard
                    key={getId(event)}
                    event={event}
                    onEdit={() => handleEdit(getId(event))}
                    onArchive={() => handleArchive(getId(event))}
                    onRestore={() => handleRestore(getId(event))}
                    onView={() => handleView(getId(event))}
                    showArchiveButton={activeTab === 'active'}
                    showRestoreButton={activeTab === 'archived'}
                  />
                ))}
              </div>
            </>
          )}
        </main>
      </div>
    </Layout>
  );
};
