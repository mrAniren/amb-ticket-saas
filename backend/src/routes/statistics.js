const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const Order = require('../models/Order');
const Session = require('../models/Session');
const currencyService = require('../services/currencyService');

// GET /api/statistics/sales - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
router.get('/sales', async (req, res) => {
  try {
    const { startDate, endDate, groupBy = 'day' } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
    const dateFilter = {};
    if (startDate || endDate) {
      dateFilter.paidAt = {};
      if (startDate) {
        dateFilter.paidAt.$gte = new Date(startDate + 'T00:00:00.000Z');
      }
      if (endDate) {
        dateFilter.paidAt.$lte = new Date(endDate + 'T23:59:59.999Z');
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –ø–æ –¥–∞—Ç–µ
    let dateGroupFormat;
    switch (groupBy) {
      case 'hour':
        dateGroupFormat = {
          year: { $year: '$paidAt' },
          month: { $month: '$paidAt' },
          day: { $dayOfMonth: '$paidAt' },
          hour: { $hour: '$paidAt' }
        };
        break;
      case 'day':
        dateGroupFormat = {
          year: { $year: '$paidAt' },
          month: { $month: '$paidAt' },
          day: { $dayOfMonth: '$paidAt' }
        };
        break;
      case 'month':
        dateGroupFormat = {
          year: { $year: '$paidAt' },
          month: { $month: '$paidAt' }
        };
        break;
      case 'year':
        dateGroupFormat = {
          year: { $year: '$paidAt' }
        };
        break;
      default:
        dateGroupFormat = {
          year: { $year: '$paidAt' },
          month: { $month: '$paidAt' },
          day: { $dayOfMonth: '$paidAt' }
        };
    }

    const salesStats = await Order.aggregate([
      {
        $match: {
          status: 'paid',
          ...dateFilter
        }
      },
      {
        $group: {
          _id: dateGroupFormat,
          totalOrders: { $sum: 1 },
          totalRevenue: { $sum: '$total' },
          totalTickets: { $sum: { $size: '$ticketData' } },
          avgOrderValue: { $avg: '$total' },
          suppliers: { $addToSet: '$supplier' }
        }
      },
      {
        $sort: { '_id.year': 1, '_id.month': 1, '_id.day': 1, '_id.hour': 1 }
      },
      {
        $project: {
          _id: 0,
          date: '$_id',
          totalOrders: 1,
          totalRevenue: 1,
          totalTickets: 1,
          avgOrderValue: { $round: ['$avgOrderValue', 2] },
          suppliersCount: { $size: '$suppliers' }
        }
      }
    ]);

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ ${groupBy}:`, salesStats.length, '–∑–∞–ø–∏—Å–µ–π');

    res.json({
      success: true,
      data: {
        sales: salesStats,
        groupBy,
        period: { startDate, endDate }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// GET /api/statistics/suppliers - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º
router.get('/suppliers', async (req, res) => {
  try {
    const { startDate, endDate } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
    const dateFilter = {};
    if (startDate || endDate) {
      dateFilter.paidAt = {};
      if (startDate) {
        dateFilter.paidAt.$gte = new Date(startDate + 'T00:00:00.000Z');
      }
      if (endDate) {
        dateFilter.paidAt.$lte = new Date(endDate + 'T23:59:59.999Z');
      }
    }

    const supplierStats = await Order.aggregate([
      {
        $match: {
          status: 'paid',
          ...dateFilter
        }
      },
      {
        $lookup: {
          from: 'sessions',
          localField: 'sessionId',
          foreignField: '_id',
          as: 'session'
        }
      },
      {
        $unwind: '$session'
      },
      {
        $lookup: {
          from: 'events',
          localField: 'session.eventId',
          foreignField: '_id',
          as: 'event'
        }
      },
      {
        $unwind: '$event'
      },
      {
        $group: {
          _id: '$supplier',
          totalOrders: { $sum: 1 },
          totalRevenue: { $sum: '$total' },
          totalTickets: { $sum: { $size: '$ticketData' } },
          avgOrderValue: { $avg: '$total' },
          firstSale: { $min: '$paidAt' },
          lastSale: { $max: '$paidAt' },
          events: {
            $push: {
              eventId: '$event._id',
              eventTitle: '$event.name',
              eventRevenue: '$total',
              eventTickets: { $size: '$ticketData' }
            }
          }
        }
      },
      {
        $addFields: {
          events: {
            $reduce: {
              input: '$events',
              initialValue: [],
              in: {
                $cond: {
                  if: { $in: ['$$this.eventId', '$$value.eventId'] },
                  then: {
                    $map: {
                      input: '$$value',
                      as: 'item',
                      in: {
                        $cond: {
                          if: { $eq: ['$$item.eventId', '$$this.eventId'] },
                          then: {
                            eventId: '$$item.eventId',
                            eventTitle: '$$item.eventTitle',
                            eventRevenue: { $add: ['$$item.eventRevenue', '$$this.eventRevenue'] },
                            eventTickets: { $add: ['$$item.eventTickets', '$$this.eventTickets'] }
                          },
                          else: '$$item'
                        }
                      }
                    }
                  },
                  else: { $concatArrays: ['$$value', ['$$this']] }
                }
              }
            }
          }
        }
      },
      {
        $sort: { totalRevenue: -1 }
      },
      {
        $project: {
          _id: 0,
          supplier: '$_id',
          totalOrders: 1,
          totalRevenue: 1,
          totalTickets: 1,
          avgOrderValue: { $round: ['$avgOrderValue', 2] },
          firstSale: 1,
          lastSale: 1,
          events: 1
        }
      }
    ]);

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º:`, supplierStats.length, '–ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤');

    res.json({
      success: true,
      data: {
        suppliers: supplierStats,
        period: { startDate, endDate }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// GET /api/statistics/events - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
router.get('/events', async (req, res) => {
  try {
    const { startDate, endDate } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
    const dateFilter = {};
    if (startDate || endDate) {
      dateFilter.paidAt = {};
      if (startDate) {
        dateFilter.paidAt.$gte = new Date(startDate + 'T00:00:00.000Z');
      }
      if (endDate) {
        dateFilter.paidAt.$lte = new Date(endDate + 'T23:59:59.999Z');
      }
    }

    const eventStats = await Order.aggregate([
      {
        $match: {
          status: 'paid',
          ...dateFilter
        }
      },
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏
      {
        $lookup: {
          from: 'sessions',
          localField: 'sessionId',
          foreignField: '_id',
          as: 'session'
        }
      },
      {
        $unwind: '$session'
      },
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
      {
        $lookup: {
          from: 'events',
          localField: 'session.eventId',
          foreignField: '_id',
          as: 'event'
        }
      },
      {
        $unwind: { path: '$event', preserveNullAndEmptyArrays: true }
      },
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ª–µ
      {
        $lookup: {
          from: 'halls',
          localField: 'session.hallId',
          foreignField: '_id',
          as: 'hall'
        }
      },
      {
        $unwind: { path: '$hall', preserveNullAndEmptyArrays: true }
      },
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ–±—ã—Ç–∏—è–º
      {
        $group: {
          _id: '$event._id',
          eventTitle: { $first: '$event.name' },
          eventDescription: { $first: '$event.description' },
          totalOrders: { $sum: 1 },
          totalRevenue: { $sum: '$total' },
          totalTickets: { $sum: { $size: '$ticketData' } },
          avgOrderValue: { $avg: '$total' },
          sessions: {
            $push: {
              sessionId: '$session._id',
              sessionDate: '$session.date',
              sessionTime: '$session.time',
              hallName: '$hall.name',
              sessionRevenue: '$total',
              sessionTickets: { $size: '$ticketData' }
            }
          }
        }
      },
      {
        $addFields: {
          sessions: {
            $reduce: {
              input: '$sessions',
              initialValue: [],
              in: {
                $cond: {
                  if: { $in: ['$$this.sessionId', '$$value.sessionId'] },
                  then: {
                    $map: {
                      input: '$$value',
                      as: 'item',
                      in: {
                        $cond: {
                          if: { $eq: ['$$item.sessionId', '$$this.sessionId'] },
                          then: {
                            sessionId: '$$item.sessionId',
                            sessionDate: '$$item.sessionDate',
                            sessionTime: '$$item.sessionTime',
                            hallName: '$$item.hallName',
                            sessionRevenue: { $add: ['$$item.sessionRevenue', '$$this.sessionRevenue'] },
                            sessionTickets: { $add: ['$$item.sessionTickets', '$$this.sessionTickets'] }
                          },
                          else: '$$item'
                        }
                      }
                    }
                  },
                  else: { $concatArrays: ['$$value', ['$$this']] }
                }
              }
            }
          }
        }
      },
      {
        $sort: { totalRevenue: -1 }
      },
      {
        $project: {
          _id: 0,
          eventId: '$_id',
          eventTitle: 1,
          eventDescription: 1,
          totalOrders: 1,
          totalRevenue: 1,
          totalTickets: 1,
          avgOrderValue: { $round: ['$avgOrderValue', 2] },
          sessionsCount: { $size: '$sessions' },
          sessions: 1
        }
      }
    ]);

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º:`, eventStats.length, '—Å–æ–±—ã—Ç–∏–π');

    res.json({
      success: true,
      data: {
        events: eventStats,
        period: { startDate, endDate }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// GET /api/statistics/overview - –æ–±—â–∏–π –æ–±–∑–æ—Ä
router.get('/overview', async (req, res) => {
  try {
    const { startDate, endDate } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
    const dateFilter = {};
    if (startDate || endDate) {
      dateFilter.paidAt = {};
      if (startDate) {
        dateFilter.paidAt.$gte = new Date(startDate + 'T00:00:00.000Z');
      }
      if (endDate) {
        dateFilter.paidAt.$lte = new Date(endDate + 'T23:59:59.999Z');
      }
    }

    const overview = await Order.aggregate([
      {
        $match: {
          status: 'paid',
          ...dateFilter
        }
      },
      {
        $group: {
          _id: null,
          totalOrders: { $sum: 1 },
          totalRevenue: { $sum: '$total' },
          totalTickets: { $sum: { $size: '$ticketData' } },
          avgOrderValue: { $avg: '$total' },
          uniqueCustomers: { $addToSet: '$customerEmail' },
          suppliers: { $addToSet: '$supplier' },
          paymentMethods: { $addToSet: '$paymentMethod' }
        }
      },
      {
        $project: {
          _id: 0,
          totalOrders: 1,
          totalRevenue: 1,
          totalTickets: 1,
          avgOrderValue: { $round: ['$avgOrderValue', 2] },
          uniqueCustomersCount: { $size: '$uniqueCustomers' },
          suppliersCount: { $size: '$suppliers' },
          paymentMethodsCount: { $size: '$paymentMethods' }
        }
      }
    ]);

    const result = overview[0] || {
      totalOrders: 0,
      totalRevenue: 0,
      totalTickets: 0,
      avgOrderValue: 0,
      uniqueCustomersCount: 0,
      suppliersCount: 0,
      paymentMethodsCount: 0
    };

    console.log('üìä –û–±—â–∏–π –æ–±–∑–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', result);

    res.json({
      success: true,
      data: {
        overview: result,
        period: { startDate, endDate }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// GET /api/statistics/attribution - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ç—Ä–∏–±—É—Ü–∏–∏
router.get('/attribution', async (req, res) => {
  try {
    const { startDate, endDate } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
    const dateFilter = {};
    if (startDate || endDate) {
      dateFilter.createdAt = {};
      if (startDate) {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è
        dateFilter.createdAt.$gte = new Date(startDate + 'T00:00:00.000Z');
      }
      if (endDate) {
        // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è
        dateFilter.createdAt.$lte = new Date(endDate + 'T23:59:59.999Z');
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ç—Ä–∏–±—É—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤
    const attributionStats = await Order.aggregate([
      {
        $match: {
          status: 'paid',
          ...dateFilter
        }
      },
      {
        $lookup: {
          from: 'sessions',
          localField: 'sessionId',
          foreignField: '_id',
          as: 'session'
        }
      },
      {
        $unwind: '$session'
      },
      {
        $lookup: {
          from: 'events',
          localField: 'session.eventId',
          foreignField: '_id',
          as: 'event'
        }
      },
      {
        $unwind: '$event'
      },
      {
        $lookup: {
          from: 'halls',
          localField: 'session.hallId',
          foreignField: '_id',
          as: 'hall'
        }
      },
      {
        $unwind: '$hall'
      },
      {
        $addFields: {
          processedWidgetId: { $ifNull: ['$widgetId', 'offline'] },
          processedIsInvitation: { $ifNull: ['$isInvitation', false] },
          processedOrderType: {
            $cond: {
              if: { $eq: [{ $ifNull: ['$isInvitation', false] }, true] },
              then: 'invitation',
              else: {
                $cond: {
                  if: { $eq: [{ $ifNull: ['$widgetId', 'offline'] }, 'offline'] },
                  then: 'offline',
                  else: 'widget'
                }
              }
            }
          }
        }
      },
      {
        $group: {
          _id: {
            eventId: '$event._id',
            eventName: '$event.name',
            sessionId: '$session._id',
            sessionDate: '$session.date',
            sessionTime: '$session.time',
            hallName: '$hall.name',
            isInvitation: '$processedIsInvitation',
            orderType: '$processedOrderType',
            widgetId: '$processedWidgetId',
            utm_source: { $ifNull: ['$attribution.utm_source', '–±–µ–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏'] },
            utm_medium: { $ifNull: ['$attribution.utm_medium', '–±–µ–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏'] },
            utm_campaign: { $ifNull: ['$attribution.utm_campaign', '–±–µ–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏'] },
            utm_content: { $ifNull: ['$attribution.utm_content', '–±–µ–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏'] },
            utm_term: { $ifNull: ['$attribution.utm_term', '–±–µ–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏'] }
          },
          totalOrders: { $sum: 1 },
          totalRevenue: { $sum: '$total' },
          totalTickets: { $sum: { $size: '$ticketData' } },
          currency: { $first: '$hall.currency' }
        }
      },
      {
        $project: {
          _id: 0,
          eventId: '$_id.eventId',
          eventName: '$_id.eventName',
          sessionId: '$_id.sessionId',
          sessionDate: '$_id.sessionDate',
          sessionTime: '$_id.sessionTime',
          hallName: '$_id.hallName',
          widgetId: '$_id.widgetId',
          isInvitation: '$_id.isInvitation',
          orderType: '$_id.orderType',
          utm_source: '$_id.utm_source',
          utm_medium: '$_id.utm_medium',
          utm_campaign: '$_id.utm_campaign',
          utm_content: '$_id.utm_content',
          utm_term: '$_id.utm_term',
          totalOrders: 1,
          totalRevenue: 1,
          totalTickets: 1,
          currency: 1
        }
      },
      {
        $sort: {
          eventName: 1,
          sessionDate: 1,
          sessionTime: 1,
          utm_source: 1,
          utm_medium: 1,
          utm_campaign: 1,
          utm_content: 1,
          utm_term: 1
        }
      }
    ]);

    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∞—Ç—Ä–∏–±—É—Ü–∏–∏: ${attributionStats.length}`);

    res.json({
      success: true,
      data: {
        attribution: attributionStats
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Ç—Ä–∏–±—É—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Ç—Ä–∏–±—É—Ü–∏–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// GET /api/statistics/widgets - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤
router.get('/widgets', async (req, res) => {
  try {
    const { startDate, endDate } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
    const dateFilter = {};
    if (startDate || endDate) {
      dateFilter.paidAt = {};
      if (startDate) {
        dateFilter.paidAt.$gte = new Date(startDate + 'T00:00:00.000Z');
      }
      if (endDate) {
        dateFilter.paidAt.$lte = new Date(endDate + 'T23:59:59.999Z');
      }
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–µ–∞–Ω—Å—ã —Å –∏—Ö –≤–∏–¥–∂–µ—Ç–∞–º–∏
    const sessionsWithWidgets = await Session.aggregate([
      {
        $lookup: {
          from: 'events',
          localField: 'eventId',
          foreignField: '_id',
          as: 'event'
        }
      },
      {
        $unwind: '$event'
      },
      {
        $lookup: {
          from: 'halls',
          localField: 'hallId',
          foreignField: '_id',
          as: 'hall'
        }
      },
      {
        $unwind: '$hall'
      },
      {
        $lookup: {
          from: 'widgets',
          localField: '_id',
          foreignField: 'sessionId',
          as: 'widgets'
        }
      },
      {
        $project: {
          _id: 1,
          eventTitle: '$event.name',
          sessionDate: '$date',
          sessionTime: '$time',
          hallName: '$hall.name',
          widgets: {
            _id: 1,
            name: 1,
            widgetId: 1
          }
        }
      }
    ]);

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ–∞–Ω—Å–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–∏–¥–∂–µ—Ç–∞–º
    const widgetStats = await Promise.all(
      sessionsWithWidgets.map(async (session) => {
        const widgets = await Promise.all(
          session.widgets.map(async (widget) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º widgetId –∏–∑ –≤–∏–¥–∂–µ—Ç–∞, –∞ –Ω–µ _id
            const widgetId = widget.widgetId || (widget._id ? widget._id.toString() : widget.toString());
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
            const ordersStats = await Order.aggregate([
              {
                $match: {
                  sessionId: session._id,
                  widgetId: widgetId,
                  status: 'paid',
                  ...dateFilter
                }
              },
              {
                $group: {
                  _id: null,
                  totalOrders: { $sum: 1 },
                  totalRevenue: { $sum: '$total' },
                  totalTickets: { $sum: { $size: '$ticketData' } }
                }
              }
            ]);

            const stats = ordersStats[0] || {
              totalOrders: 0,
              totalRevenue: 0,
              totalTickets: 0
            };

            return {
              widgetId: widget.widgetId || widgetId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º widgetId –∏–∑ –≤–∏–¥–∂–µ—Ç–∞
              widgetName: widget.name || undefined,
              totalOrders: stats.totalOrders,
              totalRevenue: stats.totalRevenue,
              totalTickets: stats.totalTickets
            };
          })
        );

        return {
          sessionId: session._id.toString(),
          eventTitle: session.eventTitle,
          sessionDate: session.sessionDate,
          sessionTime: session.sessionTime,
          hallName: session.hallName,
          widgets: widgets
        };
      })
    );

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–¥–∂–µ—Ç–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', widgetStats.length);

    res.json({
      success: true,
      data: {
        widgetStats: widgetStats,
        period: { startDate, endDate }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–∏–¥–∂–µ—Ç–æ–≤',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// GET /api/statistics/session/:sessionId - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–µ–∞–Ω—Å—É
router.get('/session/:sessionId', async (req, res) => {
  try {
    const { sessionId } = req.params;

    console.log(`üìä –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å–µ–∞–Ω—Å–∞: ${sessionId}`);

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Å–µ–∞–Ω—Å–∞
    const sessionStats = await Order.aggregate([
      {
        $match: {
          sessionId: new mongoose.Types.ObjectId(sessionId),
          status: 'paid'
        }
      },
      {
        $group: {
          _id: null,
          totalOrders: { $sum: 1 },
          totalRevenue: { $sum: '$total' },
          totalTickets: { $sum: { $size: '$ticketData' } },
          avgOrderValue: { $avg: '$total' }
        }
      },
      {
        $project: {
          _id: 0,
          totalOrders: 1,
          totalRevenue: 1,
          totalTickets: 1,
          avgOrderValue: { $round: ['$avgOrderValue', 2] },
          avgTicketsPerOrder: {
            $round: [
              { $divide: ['$totalTickets', '$totalOrders'] },
              1
            ]
          }
        }
      }
    ]);

    const result = sessionStats[0] || {
      totalOrders: 0,
      totalRevenue: 0,
      totalTickets: 0,
      avgOrderValue: 0,
      avgTicketsPerOrder: 1.5
    };

    console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ–∞–Ω—Å–∞ ${sessionId}:`, result);

    res.json({
      success: true,
      data: {
        sessionId,
        stats: result
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–∞–Ω—Å–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ–∞–Ω—Å–∞',
      error: error.message
    });
  }
});

// GET /api/statistics/attribution-with-conversion - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ç—Ä–∏–±—É—Ü–∏–∏ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤–∞–ª—é—Ç
router.get('/attribution-with-conversion', async (req, res) => {
  try {
    const { startDate, endDate, baseCurrency = 'KGS' } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
    const dateFilter = {};
    if (startDate || endDate) {
      dateFilter.createdAt = {};
      if (startDate) {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è
        dateFilter.createdAt.$gte = new Date(startDate + 'T00:00:00.000Z');
      }
      if (endDate) {
        // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è
        dateFilter.createdAt.$lte = new Date(endDate + 'T23:59:59.999Z');
      }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å –≤–∞–ª—é—Ç
    await currencyService.initialize();

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞—Ç—Ä–∏–±—É—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–∫–∞–∑–æ–≤
    const attributionStats = await Order.aggregate([
      {
        $match: {
          status: 'paid',
          ...dateFilter
        }
      },
      {
        $lookup: {
          from: 'sessions',
          localField: 'sessionId',
          foreignField: '_id',
          as: 'session'
        }
      },
      {
        $unwind: '$session'
      },
      {
        $lookup: {
          from: 'events',
          localField: 'session.eventId',
          foreignField: '_id',
          as: 'event'
        }
      },
      {
        $unwind: '$event'
      },
      {
        $lookup: {
          from: 'halls',
          localField: 'session.hallId',
          foreignField: '_id',
          as: 'hall'
        }
      },
      {
        $unwind: '$hall'
      },
      {
        $addFields: {
          processedWidgetId: { $ifNull: ['$widgetId', 'offline'] },
          processedIsInvitation: { $ifNull: ['$isInvitation', false] },
          processedOrderType: {
            $cond: {
              if: { $eq: [{ $ifNull: ['$isInvitation', false] }, true] },
              then: 'invitation',
              else: {
                $cond: {
                  if: { $eq: [{ $ifNull: ['$widgetId', 'offline'] }, 'offline'] },
                  then: 'offline',
                  else: 'widget'
                }
              }
            }
          }
        }
      },
      {
        $group: {
          _id: {
            eventId: '$event._id',
            eventName: '$event.name',
            sessionId: '$session._id',
            sessionDate: '$session.date',
            sessionTime: '$session.time',
            hallName: '$hall.name',
            isInvitation: '$processedIsInvitation',
            orderType: '$processedOrderType',
            widgetId: '$processedWidgetId',
            utm_source: { $ifNull: ['$attribution.utm_source', '–±–µ–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏'] },
            utm_medium: { $ifNull: ['$attribution.utm_medium', '–±–µ–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏'] },
            utm_campaign: { $ifNull: ['$attribution.utm_campaign', '–±–µ–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏'] },
            utm_content: { $ifNull: ['$attribution.utm_content', '–±–µ–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏'] },
            utm_term: { $ifNull: ['$attribution.utm_term', '–±–µ–∑ –∞—Ç—Ä–∏–±—É—Ü–∏–∏'] }
          },
          totalOrders: { $sum: 1 },
          totalRevenue: { $sum: '$total' },
          totalTickets: { $sum: { $size: '$ticketData' } },
          currency: { $first: '$hall.currency' }
        }
      },
      {
        $project: {
          _id: 0,
          eventId: '$_id.eventId',
          eventName: '$_id.eventName',
          sessionId: '$_id.sessionId',
          sessionDate: '$_id.sessionDate',
          sessionTime: '$_id.sessionTime',
          hallName: '$_id.hallName',
          isInvitation: '$_id.isInvitation',
          orderType: '$_id.orderType',
          widgetId: '$_id.widgetId',
          utm_source: '$_id.utm_source',
          utm_medium: '$_id.utm_medium',
          utm_campaign: '$_id.utm_campaign',
          utm_content: '$_id.utm_content',
          utm_term: '$_id.utm_term',
          totalOrders: 1,
          totalRevenue: 1,
          totalTickets: 1,
          currency: 1
        }
      }
    ]);

    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∞—Ç—Ä–∏–±—É—Ü–∏–∏: ${attributionStats.length}`);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤–∞–ª—é—Ç—ã
    const convertedStats = attributionStats.map(stat => {
      const convertedRevenue = currencyService.convertCurrency(
        stat.totalRevenue,
        stat.currency,
        baseCurrency
      );

      return {
        ...stat,
        originalRevenue: stat.totalRevenue,
        originalCurrency: stat.currency,
        totalRevenue: convertedRevenue,
        currency: baseCurrency
      };
    });

    res.json({
      success: true,
      data: {
        stats: convertedStats,
        baseCurrency,
        exchangeRates: currencyService.getRatesInfo()
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Ç—Ä–∏–±—É—Ü–∏–∏ —Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞—Ç—Ä–∏–±—É—Ü–∏–∏'
    });
  }
});

module.exports = router;
