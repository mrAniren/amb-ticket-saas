import React, { useState } from 'react';
import { useParams } from 'react-router-dom';
import { useAuth } from '../../hooks/useAuth';
import { usePriceScheme } from '../../hooks/usePriceSchemes';
import { apiClient } from '../../services/api';
import { PriceCanvasWithSelection, PriceManager, SeatPriceInlineWidget } from '../../components';
import { InteractionMode, Price } from '../../types/PriceScheme.types';
import { Seat, Zone } from '../../types/Seat.types';
import './PriceSchemeEditPage.scss';

export const PriceSchemeEditPage: React.FC = () => {
  const { priceSchemeId } = useParams<{ priceSchemeId: string }>();
  
  if (!priceSchemeId) {
    return <div>–û—à–∏–±–∫–∞: ID —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
  }
  
  const { logout } = useAuth();
  const { data: priceScheme, loading, error, refetch } = usePriceScheme(priceSchemeId);
  
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã URL –¥–ª—è inline —Ä–µ–∂–∏–º–∞
  const urlParams = new URLSearchParams(window.location.search);
  const isInlineMode = urlParams.get('mode') === 'inline';
  const sessionContext = urlParams.get('sessionContext') === 'true';
  const returnTo = urlParams.get('returnTo');
  
  
  const [interactionMode, setInteractionMode] = useState<InteractionMode>(InteractionMode.ZOOM_PAN);
  const [selectedSeats, setSelectedSeats] = useState<string[]>([]);
  const [seats, setSeats] = useState<Seat[]>([]);
  const [zones, setZones] = useState<Zone[]>([]);
  const [hallSeats, setHallSeats] = useState<any[]>([]);
  const [hallCurrency, setHallCurrency] = useState<string>('RUB'); // –í–∞–ª—é—Ç–∞ –∑–∞–ª–∞
  const [isEditingName, setIsEditingName] = useState(false);
  const [editedName, setEditedName] = useState('');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏
  React.useEffect(() => {
    if (priceScheme?.name) {
      setEditedName(priceScheme.name);
    }
  }, [priceScheme?.name]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ª–∞ –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∏–ª–∏ —Ä–∞—Å–ø–∞–µ—Å–æ–≤–∫—É
  React.useEffect(() => {
    const loadHallData = async () => {
      if (priceScheme?.hallId) {
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          const token = localStorage.getItem('auth_token');
          
          if (!token) {
            console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
            return;
          }

          const hallData = await apiClient.getHall(priceScheme.hallId);
          
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          if ((hallData.hall as any).seats) {
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å PriceCanvas
            // –í–ê–ñ–ù–û: –í—Å–µ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏
            const transformedHallSeats = (hallData.hall as any).seats.map((seat: any) => ({
              seatId: seat.id, // id -> seatId
              row: seat.row,
              seatNumber: seat.place, // place -> seatNumber
              section: seat.zone, // zone -> section
              x: seat.x,
              y: seat.y,
              width: seat.width,
              height: seat.height,
              objectType: seat.objectType,
              capacity: seat.capacity, // üé™ –î–æ–±–∞–≤–ª—è–µ–º capacity –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω
              svgElementId: seat.svgElementId || seat.id,
              svgTagName: seat.svgTagName || 'path',
              svgData: seat.svgData,
              // –í–ê–ñ–ù–û: –í—Å–µ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏
              status: 'available',
              isAvailable: true,
              // –£–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–µ—Å—Å–∏–µ–π
              // price: undefined, // –¶–µ–Ω–∞ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏
              // zoneName: undefined, // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ zone_config
            }));
            
            
            setHallSeats(transformedHallSeats);
          }
          
          // –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–µ—Å—Ç
          if ((hallData.hall as any).seat_config) {
            try {
              const seatConfig = JSON.parse((hallData.hall as any).seat_config);
              
              // seat_config —Ç–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Å—Å–∏–≤ –º–µ—Å—Ç –Ω–∞–ø—Ä—è–º—É—é
              const seatsArray = Array.isArray(seatConfig) ? seatConfig : (seatConfig.seats || []);
              
              // –í–ê–ñ–ù–û: –í—Å–µ –º–µ—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏
              const availableSeats = seatsArray.map((seat: any) => ({
                ...seat,
                status: 'available',
                isClickable: true,
                // –£–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å–µ—Å—Å–∏–µ–π
                // price: undefined, // –¶–µ–Ω–∞ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è –∏–∑ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏
              }));
              
              
              setSeats(availableSeats);
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ seat_config:', error);
            }
          }

          // –ü–∞—Ä—Å–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–æ–Ω
          if ((hallData.hall as any).zone_config) {
            try {
              const zoneConfig = JSON.parse((hallData.hall as any).zone_config);
              setZones(zoneConfig.zones || []);
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ zone_config:', error);
            }
          }

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞–ª—é—Ç—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ª–∞
          if (hallData.hall.currency) {
            setHallCurrency(hallData.hall.currency);
          } else {
            // –ï—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –±–∞–∑–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            setHallCurrency('RUB');
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ª–∞:', error);
          if (error instanceof Error && error.message.includes('Access token required')) {
            console.error('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.');
          }
        }
      }
    };

    loadHallData();
  }, [priceScheme?.id, priceScheme?.hallId]); // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ—Ç –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleSeatClick = (seat: Seat) => {
    const seatId = seat.id as string;
    if (selectedSeats.includes(seatId)) {
      setSelectedSeats(prev => prev.filter(id => id !== seatId));
    } else {
      setSelectedSeats(prev => [...prev, seatId]);
    }
  };

  const handleSeatsSelected = (seatIds: string[]) => {
    setSelectedSeats(seatIds);
  };

  const handleClearSelection = () => {
    setSelectedSeats([]);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
  const handleStartEditName = () => {
    setIsEditingName(true);
  };

  const handleSaveName = async () => {
    if (!editedName.trim()) {
      alert('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      return;
    }

    try {
      await apiClient.updatePriceScheme(priceSchemeId, { name: editedName.trim() });
      setIsEditingName(false);
      refetch(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è');
    }
  };

  const handleCancelEditName = () => {
    setEditedName(priceScheme?.name || '');
    setIsEditingName(false);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏
  const handleAddPrice = async (newPrice: Omit<Price, 'id'>) => {
    try {
      await apiClient.addPrice(priceSchemeId, newPrice);
      refetch(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞–µ—Å–æ–≤–∫–∏
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã');
    }
  };

  const handleUpdatePrice = async (priceId: string, updates: Partial<Price>) => {
    try {
      await apiClient.updatePrice(priceSchemeId, priceId, updates);
      refetch(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞–µ—Å–æ–≤–∫–∏
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã');
    }
  };

  const handleDeletePrice = async (priceId: string) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ü–µ–Ω—É?')) {
      try {
        await apiClient.deletePrice(priceSchemeId, priceId);
        refetch(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞–µ—Å–æ–≤–∫–∏
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã');
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–∏–¥–∂–µ—Ç–∞ –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã
  const handleApplyPrice = async (priceId: string) => {
    try {
      // üé™ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü –∑–æ–Ω—ã - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞
      const expandedSeatIds: string[] = [];
      
      for (const seatId of selectedSeats) {
        // –ò—â–µ–º –º–µ—Å—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ª–∞
        const seat = hallSeats?.find(s => s.seatId === seatId);
        
        if (seat && seat.objectType === 'special_zone') {
          // –î–ª—è —Å–ø–µ—Ü –∑–æ–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ capacity
          const seatData = seats.find(s => s.id === seatId);
          const capacity = seatData?.capacity || 1;
          
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç (capacity - 1, —Ç–∞–∫ –∫–∞–∫ —Å–∞–º –æ–±—ä–µ–∫—Ç = 1 –º–µ—Å—Ç–æ)
          for (let i = 1; i < capacity; i++) {
            const virtualSeatId = `${seatId}_seat_${i}`;
            expandedSeatIds.push(virtualSeatId);
          }
          
          // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú —Å–∞–º –æ–±—ä–µ–∫—Ç —Å–ø–µ—Ü –∑–æ–Ω—ã (—ç—Ç–æ –∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ)
          expandedSeatIds.push(seatId);
        } else {
          // –û–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          expandedSeatIds.push(seatId);
        }
      }
      
      
      await apiClient.applyPriceToSeats(priceSchemeId, expandedSeatIds, priceId);
      refetch(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞–µ—Å–æ–≤–∫–∏
      setSelectedSeats([]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã');
    }
  };

  const handleRemovePrice = async () => {
    try {
      // üé™ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü –∑–æ–Ω—ã - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞
      const expandedSeatIds: string[] = [];
      
      for (const seatId of selectedSeats) {
        // –ò—â–µ–º –º–µ—Å—Ç–æ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–ª–∞
        const seat = hallSeats?.find(s => s.seatId === seatId);
        
        if (seat && seat.objectType === 'special_zone') {
          // –î–ª—è —Å–ø–µ—Ü –∑–æ–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ capacity
          const seatData = seats.find(s => s.id === seatId);
          const capacity = seatData?.capacity || 1;
          
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç (capacity - 1, —Ç–∞–∫ –∫–∞–∫ —Å–∞–º –æ–±—ä–µ–∫—Ç = 1 –º–µ—Å—Ç–æ)
          for (let i = 1; i < capacity; i++) {
            const virtualSeatId = `${seatId}_seat_${i}`;
            expandedSeatIds.push(virtualSeatId);
          }
          
          // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú —Å–∞–º –æ–±—ä–µ–∫—Ç —Å–ø–µ—Ü –∑–æ–Ω—ã (—ç—Ç–æ –∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –º–µ—Å—Ç–æ)
          expandedSeatIds.push(seatId);
        } else {
          // –û–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
          expandedSeatIds.push(seatId);
        }
      }
      
      
      // –£–±–∏—Ä–∞–µ–º —Ü–µ–Ω—ã —Å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç (–ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Å—Ç–æ–π priceId)
      await apiClient.applyPriceToSeats(priceSchemeId, expandedSeatIds, '');
      refetch(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∞–µ—Å–æ–≤–∫–∏
      setSelectedSeats([]);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ü–µ–Ω—ã —Å –º–µ—Å—Ç:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ü–µ–Ω—ã —Å –º–µ—Å—Ç');
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è inline —Ä–µ–∂–∏–º–∞
  const handleApplyAndReturn = () => {

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç–æ—è—â–∏–µ –º–µ—Å—Ç–∞ (—Å —Ä—è–¥–æ–º –∏ –º–µ—Å—Ç–æ–º, –Ω–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏)
    // –£–±—Ä–∞–ª–∏ –∞–ª–µ—Ä—Ç –¥–ª—è –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    const realSeats = seats.filter(seat => {
      // üé™ –°–ø–µ—Ü –∑–æ–Ω—ã –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º (—É –Ω–∏—Ö –Ω–µ—Ç row/place, –Ω–æ –µ—Å—Ç—å capacity)
      if (seat.objectType === 'special_zone') {
        return seat.capacity && seat.capacity > 0;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º row (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π —á–∏—Å–ª–∞)
      const hasValidRow = seat.row && 
                         String(seat.row) !== 'undefined' && 
                         String(seat.row) !== 'null' && 
                         !isNaN(Number(seat.row));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Å—Ç–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º place
      const hasValidSeatNumber = seat.place && 
                                String(seat.place) !== 'undefined' && 
                                String(seat.place) !== 'null' && 
                                String(seat.place) !== '';
      
      // –ò—Å–∫–ª—é—á–∞–µ–º –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –∏ —Å—Ü–µ–Ω—É –ø–æ objectType (–∫–ª—é—á–µ–≤–æ–µ –ø–æ–ª–µ!)
      const isNotDecoration = seat.objectType !== 'decoration' && 
                             seat.objectType !== 'scene';
      
      // –ò—Å–∫–ª—é—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å id='seat'
      const isNotJustSeat = seat.id !== 'seat';
      
      const isRealSeat = hasValidRow && hasValidSeatNumber && isNotDecoration && isNotJustSeat;
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
      if (!isRealSeat && (seat.row || seat.place)) {
      }
      
      return isRealSeat;
    });


    

    if (!priceScheme || !priceScheme.seatPrices || priceScheme.seatPrices.length === 0) {
      alert('–ù–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫—É –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ü–µ–Ω!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–∞ –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∏–º —Ü–µ–Ω—ã –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º.');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –≤—Å–µ—Ö –ù–ê–°–¢–û–Ø–©–ò–• –º–µ—Å—Ç –µ—Å—Ç—å —Ü–µ–Ω—ã
    const realSeatsWithoutPrices = realSeats.filter(seat => {
      // –î–ª—è —Å–ø–µ—Ü –∑–æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É ID (–±–µ–∑ _seat_X)
      if (seat.objectType === 'special_zone') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ —Å —Ü–µ–Ω–æ–π
        const hasAnyVirtualSeatWithPrice = priceScheme.seatPrices.some(sp => 
          sp.seatId.startsWith(seat.id + '_seat_')
        );
        return !hasAnyVirtualSeatWithPrice;
      } else {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –º–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É ID
        return !priceScheme.seatPrices.some(sp => sp.seatId === seat.id);
      }
    });


    if (realSeatsWithoutPrices.length > 0) {
      alert(`–ù–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫—É!\n\n–£ ${realSeatsWithoutPrices.length} –º–µ—Å—Ç –∏–∑ ${realSeats.length} –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ü–µ–Ω.\n\n–í—Å–µ –º–µ—Å—Ç–∞ —Å —Ä—è–¥–æ–º –∏ –Ω–æ–º–µ—Ä–æ–º –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ü–µ–Ω—É.`);
      return;
    }


    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–µ–∞–Ω—Å–∞ —Å ID –Ω–æ–≤–æ–π —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏
    if (returnTo) {
      const returnUrl = new URL(decodeURIComponent(returnTo), window.location.origin);
      returnUrl.searchParams.set('newPriceSchemeId', priceSchemeId);
      window.location.href = returnUrl.toString();
    } else {
      // Fallback –µ—Å–ª–∏ –Ω–µ—Ç returnTo
      window.location.href = `/sessions/create?newPriceSchemeId=${priceSchemeId}`;
    }
  };

  const handleCancelAndReturn = async () => {
    const confirmMessage = '–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏?\n\n–í—Å—è —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.';
    
    if (!confirm(confirmMessage)) {
      return;
    }

    try {
      // –£–¥–∞–ª—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫—É
      await apiClient.deletePriceScheme(priceSchemeId);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–µ–∞–Ω—Å–∞
      if (returnTo) {
        window.location.href = decodeURIComponent(returnTo);
      } else {
        // Fallback –µ—Å–ª–∏ –Ω–µ—Ç returnTo
        window.location.href = '/sessions/create';
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏');
    }
  };

  if (loading) {
    return (
      <div className="price-scheme-edit-page">
        <div className="price-scheme-edit-page__loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∞–µ—Å–æ–≤–∫–∏...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="price-scheme-edit-page">
        <div className="price-scheme-edit-page__error">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error}
          <button className="btn btn--primary">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="price-scheme-edit-page">
      <header className="price-scheme-edit-page__header">
        <div className="price-scheme-edit-page__title">
          <img src="/logo-black.png" alt="–õ–æ–≥–æ—Ç–∏–ø" className="price-scheme-edit-page__logo" />
          <div>
            <h1>{isInlineMode ? '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏ –¥–ª—è —Å–µ–∞–Ω—Å–∞' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏'}</h1>
            <p>{isInlineMode ? '–ù–∞–∑–Ω–∞—á—å—Ç–µ —Ü–µ–Ω—ã –º–µ—Å—Ç–∞–º –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–∞–Ω—Å–∞' : `ID: ${priceSchemeId}`}</p>
          </div>
        </div>
        
        <div className="price-scheme-edit-page__controls">
          {isInlineMode && sessionContext ? (
            <>
              <button 
                onClick={() => {
                  try {
                    handleApplyAndReturn();
                  } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ handleApplyAndReturn:', error);
                  }
                }}
                className="btn btn--success"
                title="–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫—É –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–µ–∞–Ω—Å–∞"
              >
                ‚úÖ –ü—Ä–∏–º–µ–Ω–∏—Ç—å
              </button>
              
              <button 
                onClick={handleCancelAndReturn}
                className="btn btn--outline-danger"
                title="–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è"
              >
                ‚ùå –û—Ç–º–µ–Ω–∞
              </button>
            </>
          ) : (
            <button 
              onClick={() => window.location.href = '/price-schemes'}
              className="btn btn--secondary"
            >
              ‚Üê –ö —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∞–º
            </button>
          )}
          
        </div>
      </header>

      <main className="price-scheme-edit-page__content">
        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∞–µ—Å–æ–≤–∫–µ */}
        <div className="price-scheme-edit-page__info">
          <div className="price-scheme-edit-page__title-section">
            {isEditingName ? (
              <div className="price-scheme-edit-page__name-edit">
                <input
                  type="text"
                  value={editedName}
                  onChange={(e) => setEditedName(e.target.value)}
                  className="price-scheme-edit-page__name-input"
                  autoFocus
                  onKeyDown={(e) => {
                    if (e.key === 'Enter') {
                      handleSaveName();
                    } else if (e.key === 'Escape') {
                      handleCancelEditName();
                    }
                  }}
                />
                <div className="price-scheme-edit-page__name-actions">
                  <button 
                    onClick={handleSaveName}
                    className="btn btn--success btn--sm"
                    title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
                  >
                    ‚úì
                  </button>
                  <button 
                    onClick={handleCancelEditName}
                    className="btn btn--outline btn--sm"
                    title="–û—Ç–º–µ–Ω–∏—Ç—å"
                  >
                    ‚úï
                  </button>
                </div>
              </div>
            ) : (
              <div className="price-scheme-edit-page__name-display">
                <h2>{priceScheme?.name}</h2>
                <button 
                  onClick={handleStartEditName}
                  className="btn btn--outline btn--sm"
                  title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ"
                >
                  ‚úèÔ∏è
                </button>
              </div>
            )}
            <p>–ó–∞–ª: {priceScheme?.hallName}</p>
            {selectedSeats.length > 0 && (
              <div className="price-scheme-edit-page__selection-info">
                –í—ã–±—Ä–∞–Ω–æ –º–µ—Å—Ç: {selectedSeats.length}
                <button onClick={handleClearSelection} className="btn btn--outline btn--sm">
                  –û—á–∏—Å—Ç–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ
                </button>
              </div>
            )}
            
            {/* Inline –≤–∏–¥–∂–µ—Ç –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã */}
            <SeatPriceInlineWidget
              selectedSeats={selectedSeats}
              prices={priceScheme?.prices || []}
              onApplyPrice={handleApplyPrice}
              onRemovePrice={handleRemovePrice}
            />
          </div>
        </div>

        {/* –ö–∞–Ω–±–∞–Ω */}
        <div className="price-scheme-edit-page__canvas-container">
          {seats.length > 0 ? (
            <PriceCanvasWithSelection
              seats={seats}
              zones={zones}
              width={900}
              height={600}
              interactionMode={interactionMode}
              selectedSeats={selectedSeats}
              onSeatClick={handleSeatClick}
              onSeatsSelected={handleSeatsSelected}
              onModeChange={setInteractionMode}
              seatPrices={priceScheme?.seatPrices || []}
              prices={priceScheme?.prices || []}
              hallSeats={hallSeats}
            />
          ) : (
            <div className="price-scheme-edit-page__canvas-placeholder">
              <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ö–µ–º—ã –∑–∞–ª–∞...</p>
              {priceScheme && !seats.length && (
                <p>–í –∑–∞–ª–µ "{priceScheme.hallName}" –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç.</p>
              )}
            </div>
          )}
        </div>

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏ */}
        <div className="price-scheme-edit-page__price-manager">
          <PriceManager
            prices={priceScheme?.prices || []}
            seatPrices={priceScheme?.seatPrices || []}
            onAddPrice={handleAddPrice}
            onUpdatePrice={handleUpdatePrice}
            onDeletePrice={handleDeletePrice}
            hallCurrency={hallCurrency}
          />
        </div>
      </main>


    </div>
  );
};