const express = require('express');
const router = express.Router();
const Order = require('../models/Order');
const Session = require('../models/Session');
const Ticket = require('../models/Ticket');

// GET /api/customers - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
router.get('/', async (req, res) => {
  try {
    const { startDate, endDate, page = 1, limit = 50, sortBy = 'paidAt', sortOrder = 'desc', orderNumber, ticketNumber } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
    const dateFilter = {};
    if (startDate || endDate) {
      dateFilter.paidAt = {};
      if (startDate) {
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ –¥–Ω—è
        const start = new Date(startDate);
        start.setHours(0, 0, 0, 0);
        dateFilter.paidAt.$gte = start;
      }
      if (endDate) {
        // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –≤ –∫–æ–Ω—Ü–µ –¥–Ω—è
        const end = new Date(endDate);
        end.setHours(23, 59, 59, 999);
        dateFilter.paidAt.$lte = end;
      }
    }

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞
    const orderNumberFilter = {};
    if (orderNumber) {
      orderNumberFilter.orderNumber = { $regex: orderNumber, $options: 'i' };
    }

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –Ω–æ–º–µ—Ä—É –±–∏–ª–µ—Ç–∞
    let ticketNumberFilter = {};
    if (ticketNumber) {
      // –ï—Å–ª–∏ –∏—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É –±–∏–ª–µ—Ç–∞, –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–∏–ª–µ—Ç—ã —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º
      const ticketsWithNumber = await Ticket.find({
        ticketId: { $regex: ticketNumber, $options: 'i' }
      }).select('orderId');
      
      const orderIds = ticketsWithNumber.map(ticket => ticket.orderId);
      if (orderIds.length > 0) {
        ticketNumberFilter._id = { $in: orderIds };
      } else {
        // –ï—Å–ª–∏ –±–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        ticketNumberFilter._id = { $in: [] };
      }
    }

    // –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª–∏–µ–Ω—Ç–∞—Ö
    const aggregationPipeline = [
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
      {
        $match: {
          status: 'paid',
          ...dateFilter,
          ...orderNumberFilter,
          ...ticketNumberFilter
        }
      },
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏
      {
        $lookup: {
          from: 'sessions',
          localField: 'sessionId',
          foreignField: '_id',
          as: 'session'
        }
      },
      {
        $unwind: '$session'
      },
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–±—ã—Ç–∏–∏
      {
        $lookup: {
          from: 'events',
          localField: 'session.eventId',
          foreignField: '_id',
          as: 'event'
        }
      },
      {
        $unwind: { path: '$event', preserveNullAndEmptyArrays: true }
      },
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–ª–µ
      {
        $lookup: {
          from: 'halls',
          localField: 'session.hallId',
          foreignField: '_id',
          as: 'hall'
        }
      },
      {
        $unwind: { path: '$hall', preserveNullAndEmptyArrays: true }
      },
      // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
      {
        $project: {
          _id: 1,
          orderNumber: 1,
          customerName: 1,
          customerEmail: 1,
          customerPhone: 1,
          total: { $sum: '$ticketData.price' },
          currency: '$hall.currency',
          paidAt: 1,
          paymentMethod: 1,
          supplier: 1,
          ticketCount: { $size: '$ticketData' },
          sessionInfo: {
            id: '$session._id',
            date: '$session.date',
            time: '$session.time',
            eventTitle: '$event.name',
            hallName: '$hall.name'
          }
        }
      },
      // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
      {
        $sort: {
          [sortBy]: sortOrder === 'desc' ? -1 : 1
        }
      }
    ];

    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const totalCountPipeline = [
      ...aggregationPipeline.slice(0, -1), // –í—Å–µ –∫—Ä–æ–º–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
      { $count: 'total' }
    ];

    const [customers, totalCountResult] = await Promise.all([
      Order.aggregate([
        ...aggregationPipeline,
        { $skip: (page - 1) * limit },
        { $limit: parseInt(limit) }
      ]),
      Order.aggregate(totalCountPipeline)
    ]);

    const totalCount = totalCountResult[0]?.total || 0;
    const totalPages = Math.ceil(totalCount / limit);

    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${customers.length} –∏–∑ ${totalCount}`);

    res.json({
      success: true,
      data: {
        customers,
        pagination: {
          currentPage: parseInt(page),
          totalPages,
          totalCount,
          limit: parseInt(limit),
          hasNext: page < totalPages,
          hasPrev: page > 1
        }
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// GET /api/customers/stats - –ø–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–ª–∏–µ–Ω—Ç–æ–≤
router.get('/stats', async (req, res) => {
  try {
    const { startDate, endDate } = req.query;

    // –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
    const dateFilter = {};
    if (startDate || endDate) {
      dateFilter.paidAt = {};
      if (startDate) {
        dateFilter.paidAt.$gte = new Date(startDate);
      }
      if (endDate) {
        dateFilter.paidAt.$lte = new Date(endDate);
      }
    }

    const stats = await Order.aggregate([
      {
        $match: {
          status: 'paid',
          ...dateFilter
        }
      },
      {
        $group: {
          _id: null,
          totalCustomers: { $sum: 1 },
          totalRevenue: { $sum: '$total' },
          totalTickets: { $sum: { $size: '$ticketData' } },
          avgOrderValue: { $avg: '$total' },
          uniqueCustomers: { $addToSet: '$customerEmail' }
        }
      },
      {
        $project: {
          _id: 0,
          totalCustomers: 1,
          totalRevenue: 1,
          totalTickets: 1,
          avgOrderValue: { $round: ['$avgOrderValue', 2] },
          uniqueCustomersCount: { $size: '$uniqueCustomers' }
        }
      }
    ]);

    const result = stats[0] || {
      totalCustomers: 0,
      totalRevenue: 0,
      totalTickets: 0,
      avgOrderValue: 0,
      uniqueCustomersCount: 0
    };

    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤:', result);

    res.json({
      success: true,
      data: result
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// GET /api/customers/:orderId/tickets - –ø–æ–ª—É—á–∏—Ç—å –±–∏–ª–µ—Ç—ã –∑–∞–∫–∞–∑–∞
router.get('/:orderId/tickets', async (req, res) => {
  try {
    const { orderId } = req.params;

    console.log(`üé´ –ü–æ–ª—É—á–∞–µ–º –±–∏–ª–µ—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞: ${orderId}`);

    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑
    const order = await Order.findById(orderId)
      .populate('sessionId')
      .populate({
        path: 'sessionId',
        populate: {
          path: 'eventId hallId'
        }
      });

    if (!order) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–∏–ª–µ—Ç—ã –∑–∞–∫–∞–∑–∞
    const tickets = await Ticket.find({ orderId })
      .sort({ createdAt: 1 });

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –±–∏–ª–µ—Ç–æ–≤: ${tickets.length}`);

    res.json({
      success: true,
      data: {
        order: {
          _id: order._id,
          orderNumber: order.orderNumber,
          customerName: order.customerName,
          customerEmail: order.customerEmail,
          customerPhone: order.customerPhone,
          total: order.total,
          paidAt: order.paidAt,
          sessionInfo: {
            id: order.sessionId._id,
            date: order.sessionId.date,
            time: order.sessionId.time,
            eventTitle: order.sessionId.eventId?.title || order.sessionId.eventId?.name,
            hallName: order.sessionId.hallId?.name
          }
        },
        tickets: tickets.map(ticket => ({
          _id: ticket._id,
          ticketId: ticket.ticketId,
          seatRow: ticket.seatRow,
          seatNumber: ticket.seatNumber,
          seatSection: ticket.seatSection,
          price: ticket.price,
          currency: ticket.currency,
          pdfGenerated: ticket.pdfGenerated
        }))
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∏–ª–µ—Ç–æ–≤ –∑–∞–∫–∞–∑–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

module.exports = router;
