const axios = require('axios');

class CurrencyService {
  constructor() {
    this.exchangeRates = new Map();
    this.lastUpdate = null;
    this.updateInterval = 60 * 60 * 1000; // 1 —á–∞—Å
  }

  // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
  async fetchExchangeRates() {
    try {
      console.log('üí± –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç...');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API exchangerate-api.com
      const response = await axios.get('https://api.exchangerate-api.com/v4/latest/USD', {
        timeout: 10000
      });

      if (response.data && response.data.rates) {
        this.exchangeRates = new Map(Object.entries(response.data.rates));
        this.lastUpdate = new Date();
        
        console.log('‚úÖ –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
          base: response.data.base,
          date: response.data.date,
          currencies: Array.from(this.exchangeRates.keys()).slice(0, 10) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        });
        
        return true;
      }
      
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:', error.message);
      
      // Fallback –∫—É—Ä—Å—ã (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
      this.setFallbackRates();
      return false;
    }
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º fallback –∫—É—Ä—Å—ã
  setFallbackRates() {
    console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç');
    this.exchangeRates = new Map([
      ['USD', 1.0],
      ['RUB', 95.0],
      ['KGS', 89.0], // 1 USD = 89 KGS
      ['KZT', 450.0], // 1 USD = 450 KZT
      ['EUR', 0.92],
      ['GBP', 0.79]
    ]);
    this.lastUpdate = new Date();
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫—É—Ä—Å—ã
  needsUpdate() {
    if (!this.lastUpdate) return true;
    return (Date.now() - this.lastUpdate.getTime()) > this.updateInterval;
  }

  // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã –∫ USD
  getRateToUSD(currency) {
    if (!this.exchangeRates.has(currency)) {
      console.warn(`‚ö†Ô∏è –ö—É—Ä—Å –¥–ª—è –≤–∞–ª—é—Ç—ã ${currency} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 1.0`);
      return 1.0;
    }
    return this.exchangeRates.get(currency);
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –æ–¥–Ω–æ–π –≤–∞–ª—é—Ç—ã –≤ –¥—Ä—É–≥—É—é
  convertCurrency(amount, fromCurrency, toCurrency) {
    if (fromCurrency === toCurrency) {
      return amount;
    }

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD, –∑–∞—Ç–µ–º –≤ —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
    const fromRate = this.getRateToUSD(fromCurrency);
    const toRate = this.getRateToUSD(toCurrency);
    
    const amountInUSD = amount / fromRate;
    const convertedAmount = amountInUSD * toRate;
    
    return Math.round(convertedAmount * 100) / 100; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
  async initialize() {
    if (this.needsUpdate()) {
      await this.fetchExchangeRates();
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–ª—é—Ç—ã
  getAvailableCurrencies() {
    return Array.from(this.exchangeRates.keys());
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–∞—Ö
  getRatesInfo() {
    return {
      lastUpdate: this.lastUpdate,
      currencies: this.getAvailableCurrencies(),
      rates: Object.fromEntries(this.exchangeRates)
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const currencyService = new CurrencyService();

module.exports = currencyService;
