import React, { useState, useEffect } from 'react';
import { apiClient } from '../../services/api';
import { saveAs } from 'file-saver';
import './TicketDownload.scss';

interface Ticket {
  id: string;
  ticketId: string;
  seatSection: string;
  seatRow: number;
  seatNumber: number;
  price: number;
  currency: string;
  eventName: string;
  eventDate: string;
  eventTime: string;
  hallName: string;
  buyerName: string;
  pdfGenerated: boolean;
  status: string;
  createdAt: string;
}

interface TicketDownloadProps {
  orderId: string;
  onError?: (error: string) => void;
}

const TicketDownload: React.FC<TicketDownloadProps> = ({ orderId, onError }) => {
  const [tickets, setTickets] = useState<Ticket[]>([]);
  const [loading, setLoading] = useState(true);
  const [downloading, setDownloading] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [generating, setGenerating] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–ª–µ—Ç—ã –∑–∞–∫–∞–∑–∞
  useEffect(() => {
    if (orderId) {
      loadTickets();
    }
  }, [orderId]);

  const loadTickets = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const response = await apiClient.getOrderTickets(orderId);
      
      if (response.success && response.data?.tickets) {
        setTickets(response.data.tickets);
      } else {
        setError('–ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–ª–µ—Ç–æ–≤';
      setError(errorMessage);
      onError?.(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∏–ª–µ—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  const generateTickets = async () => {
    try {
      setGenerating(true);
      setError(null);
      
      const response = await apiClient.generateTickets(orderId);
      
      if (response.success) {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –±–∏–ª–µ—Ç—ã
        await loadTickets();
      } else {
        setError(response.message || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–æ–≤');
      }
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–æ–≤';
      setError(errorMessage);
      onError?.(errorMessage);
    } finally {
      setGenerating(false);
    }
  };

  // –°–∫–∞—á–∏–≤–∞–µ–º –±–∏–ª–µ—Ç
  const downloadTicket = async (ticketId: string, ticketNumber: number) => {
    try {
      setDownloading(ticketId);
      
      const blob = await apiClient.downloadTicket(ticketId);
      const filename = `ticket_${ticketNumber}.pdf`;
      
      saveAs(blob, filename);
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–∞';
      setError(errorMessage);
      onError?.(errorMessage);
    } finally {
      setDownloading(null);
    }
  };

  // –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ –±–∏–ª–µ—Ç—ã
  const downloadAllTickets = async () => {
    const generatedTickets = tickets.filter(ticket => ticket.pdfGenerated);
    
    for (const ticket of generatedTickets) {
      try {
        setDownloading(ticket.ticketId);
        
        const blob = await apiClient.downloadTicket(ticket.ticketId);
        const filename = `ticket_${ticket.seatRow}_${ticket.seatNumber}.pdf`;
        
        saveAs(blob, filename);
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è–º–∏
        await new Promise(resolve => setTimeout(resolve, 500));
      } catch (err) {
        console.error(`–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–∞ ${ticket.ticketId}:`, err);
      } finally {
        setDownloading(null);
      }
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
  const formatEventDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: 'long',
      year: 'numeric'
    });
  };

  if (!orderId) {
    return (
      <div className="ticket-download">
        <div className="ticket-download__error">
          <div className="error-icon">‚ö†Ô∏è</div>
          <p>–û—à–∏–±–∫–∞: ID –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω</p>
        </div>
      </div>
    );
  }

  if (loading) {
    return (
      <div className="ticket-download">
        <div className="ticket-download__loading">
          <div className="spinner"></div>
          <p>–ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–ª–µ—Ç–æ–≤...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="ticket-download">
        <div className="ticket-download__error">
          <div className="error-icon">‚ö†Ô∏è</div>
          <p>{error}</p>
          <button 
            className="btn btn--primary" 
            onClick={loadTickets}
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  if (tickets.length === 0) {
    return (
      <div className="ticket-download">
        <div className="ticket-download__empty">
          <div className="empty-icon">üé´</div>
          <h3>–ë–∏–ª–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ë–∏–ª–µ—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞ –µ—â–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã</p>
          <button 
            className="btn btn--primary" 
            onClick={generateTickets}
            disabled={generating}
          >
            {generating ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –±–∏–ª–µ—Ç—ã'}
          </button>
        </div>
      </div>
    );
  }

  const generatedTickets = tickets.filter(ticket => ticket.pdfGenerated);
  const pendingTickets = tickets.filter(ticket => !ticket.pdfGenerated);

  return (
    <div className="ticket-download">
      <div className="ticket-download__header">
        <h2>–í–∞—à–∏ –±–∏–ª–µ—Ç—ã</h2>
        <p className="ticket-count">
          –í—Å–µ–≥–æ –±–∏–ª–µ—Ç–æ–≤: {tickets.length}
          {generatedTickets.length > 0 && (
            <span className="generated-count">
              (–≥–æ—Ç–æ–≤–æ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é: {generatedTickets.length})
            </span>
          )}
        </p>
      </div>

      {generatedTickets.length > 0 && (
        <div className="ticket-download__actions">
          <button 
            className="btn btn--primary btn--large"
            onClick={downloadAllTickets}
            disabled={downloading !== null}
          >
            üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ –±–∏–ª–µ—Ç—ã
          </button>
        </div>
      )}

      <div className="ticket-download__list">
        {tickets.map((ticket, index) => (
          <div key={ticket.id} className="ticket-item">
            <div className="ticket-item__info">
              <div className="ticket-item__header">
                <h3>–ë–∏–ª–µ—Ç #{index + 1}</h3>
                <span className={`ticket-status ticket-status--${ticket.status}`}>
                  {ticket.status === 'active' ? '–ê–∫—Ç–∏–≤–µ–Ω' : ticket.status}
                </span>
              </div>
              
              <div className="ticket-item__details">
                <div className="detail-row">
                  <span className="detail-label">–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</span>
                  <span className="detail-value">{ticket.eventName}</span>
                </div>
                
                <div className="detail-row">
                  <span className="detail-label">–î–∞—Ç–∞:</span>
                  <span className="detail-value">{formatEventDate(ticket.eventDate)} –≤ {ticket.eventTime}</span>
                </div>
                
                <div className="detail-row">
                  <span className="detail-label">–ó–∞–ª:</span>
                  <span className="detail-value">{ticket.hallName}</span>
                </div>
                
                <div className="detail-row">
                  <span className="detail-label">–ú–µ—Å—Ç–æ:</span>
                  <span className="detail-value">
                    {ticket.seatSection}, —Ä—è–¥ {ticket.seatRow}, –º–µ—Å—Ç–æ {ticket.seatNumber}
                  </span>
                </div>
                
                <div className="detail-row">
                  <span className="detail-label">–¶–µ–Ω–∞:</span>
                  <span className="detail-value">{ticket.price} {ticket.currency}</span>
                </div>
                
                <div className="detail-row">
                  <span className="detail-label">–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</span>
                  <span className="detail-value">{ticket.buyerName}</span>
                </div>
              </div>
            </div>
            
            <div className="ticket-item__actions">
              {ticket.pdfGenerated ? (
                <button 
                  className="btn btn--primary"
                  onClick={() => downloadTicket(ticket.ticketId, index + 1)}
                  disabled={downloading === ticket.ticketId}
                >
                  {downloading === ticket.ticketId ? (
                    <>
                      <div className="spinner spinner--small"></div>
                      –°–∫–∞—á–∏–≤–∞–Ω–∏–µ...
                    </>
                  ) : (
                    <>
                      üìÑ –°–∫–∞—á–∞—Ç—å PDF
                    </>
                  )}
                </button>
              ) : (
                <div className="ticket-item__pending">
                  <span className="pending-text">PDF –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...</span>
                  <button 
                    className="btn btn--secondary btn--small"
                    onClick={loadTickets}
                  >
                    –û–±–Ω–æ–≤–∏—Ç—å
                  </button>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>

      {pendingTickets.length > 0 && (
        <div className="ticket-download__pending">
          <p>
            {pendingTickets.length} –±–∏–ª–µ—Ç(–æ–≤) –µ—â–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è. 
            –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.
          </p>
          <button 
            className="btn btn--secondary"
            onClick={loadTickets}
          >
            –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          </button>
        </div>
      )}
    </div>
  );
};

export default TicketDownload;
