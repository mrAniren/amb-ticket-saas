import React, { useState, useEffect, useCallback } from 'react';
import { PromoCode, PromoCodeFormData, PromoCodeFilter } from '../../types/PromoCode.types';
import { PromoCodeCard } from '../../components/PromoCodeCard';
import { PromoCodeModal } from '../../components/PromoCodeModal';
import { Layout } from '../../components/Layout';
import { apiClient, getId } from '../../services/api';
import './PromoCodesPage.scss';

export const PromoCodesPage: React.FC = () => {
  const [promoCodes, setPromoCodes] = useState<PromoCode[]>([]);
  const [filteredPromoCodes, setFilteredPromoCodes] = useState<PromoCode[]>([]);
  const [activeFilter, setActiveFilter] = useState<PromoCodeFilter>('all');
  const [isLoading, setIsLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingPromoCode, setEditingPromoCode] = useState<PromoCode | null>(null);
  const [isModalLoading, setIsModalLoading] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [debouncedSearchQuery, setDebouncedSearchQuery] = useState('');
  const [error, setError] = useState<string | null>(null);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadPromoCodes();
  }, []);

  // Debounce –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedSearchQuery(searchQuery);
    }, 300);

    return () => clearTimeout(timer);
  }, [searchQuery]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞ –∏–ª–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  useEffect(() => {
    filterPromoCodes();
  }, [promoCodes, activeFilter, debouncedSearchQuery]);

  const loadPromoCodes = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const response = await apiClient.getPromoCodes();
      setPromoCodes(response.promoCodes);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: ${errorMessage}`);
    } finally {
      setIsLoading(false);
    }
  };

  const filterPromoCodes = () => {
    let filtered = [...promoCodes];

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (activeFilter === 'active') {
      filtered = filtered.filter(pc => pc.isActive);
    } else if (activeFilter === 'inactive') {
      filtered = filtered.filter(pc => !pc.isActive);
    }

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    if (debouncedSearchQuery.trim()) {
      const query = debouncedSearchQuery.toLowerCase();
      filtered = filtered.filter(pc => 
        pc.code.toLowerCase().includes(query) ||
        pc.name.toLowerCase().includes(query) ||
        pc.description.toLowerCase().includes(query)
      );
    }

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞, –∑–∞—Ç–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    filtered.sort((a, b) => {
      if (a.isActive && !b.isActive) return -1;
      if (!a.isActive && b.isActive) return 1;
      return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
    });

    setFilteredPromoCodes(filtered);
  };

  const handleCreatePromoCode = () => {
    setEditingPromoCode(null);
    setIsModalOpen(true);
  };

  const handleEditPromoCode = (promoCode: PromoCode) => {
    setEditingPromoCode(promoCode);
    setIsModalOpen(true);
  };

  const handleDeletePromoCode = async (promoCode: PromoCode) => {
    try {
      const promoCodeId = getId(promoCode);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Ç–∏–ª–∏—Ç—É getId –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å MongoDB
      const idToUse = getId(promoCode);
      
      if (!idToUse) {
        throw new Error('ID –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      await apiClient.deletePromoCode(idToUse);
      await loadPromoCodes(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
      // –£—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º alert, —Ç–∞–∫ –∫–∞–∫ —Å–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–∏—Ç—Å—è
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${errorMessage}`);
    }
  };

  const handleSavePromoCode = async (formData: PromoCodeFormData) => {
    try {
      setIsModalLoading(true);
      setError(null);

      const requestData = {
        code: formData.code,
        name: formData.name,
        type: formData.type,
        startDate: formData.type === 'temporary' ? formData.startDate : undefined,
        endDate: formData.type === 'temporary' ? formData.endDate : undefined,
        discountType: formData.discountType,
        discountValue: parseFloat(formData.discountValue),
        currency: formData.discountType === 'fixed' ? formData.currency : undefined,
        description: formData.description || undefined
      };

      if (editingPromoCode) {
        const promoCodeId = getId(editingPromoCode);
        await apiClient.updatePromoCode(promoCodeId, requestData);
        // –£—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º alert
      } else {
        await apiClient.createPromoCode(requestData);
        // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º alert
      }

      setIsModalOpen(false);
      setEditingPromoCode(null);
      await loadPromoCodes(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      setError(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${errorMessage}`);
    } finally {
      setIsModalLoading(false);
    }
  };

  const handleCloseModal = () => {
    if (!isModalLoading) {
      setIsModalOpen(false);
      setEditingPromoCode(null);
    }
  };

  const getFilterCounts = () => {
    return {
      all: promoCodes.length,
      active: promoCodes.filter(pc => pc.isActive).length,
      inactive: promoCodes.filter(pc => !pc.isActive).length
    };
  };

  const filterCounts = getFilterCounts();

  if (isLoading) {
    return (
      <Layout currentPage="promo-codes">
        <div className="promo-codes-page">
          <div className="promo-codes-page__loading">
            <div className="loading-spinner"></div>
            <p>–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...</p>
          </div>
        </div>
      </Layout>
    );
  }

  if (error) {
    return (
      <Layout currentPage="promo-codes">
        <div className="promo-codes-page">
          <div className="promo-codes-page__error">
            <h2>–û—à–∏–±–∫–∞</h2>
            <p>{error}</p>
            <button 
              className="promo-codes-page__empty-btn"
              onClick={() => {
                setError(null);
                loadPromoCodes();
              }}
            >
              –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      </Layout>
    );
  }

  return (
    <Layout currentPage="promo-codes">
      <div className="promo-codes-page">
      <div className="promo-codes-page__header">
        <div className="promo-codes-page__title-section">
          <h1 className="promo-codes-page__title">–ü—Ä–æ–º–æ–∫–æ–¥—ã</h1>
          <p className="promo-codes-page__subtitle">
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏ –∏ —Å–∫–∏–¥–∫–∞–º–∏
          </p>
        </div>
        <button 
          className="promo-codes-page__create-btn"
          onClick={handleCreatePromoCode}
        >
          ‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
        </button>
      </div>

      <div className="promo-codes-page__controls">
        <div className="promo-codes-page__search">
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É, –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏—é..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="promo-codes-page__search-input"
          />
        </div>

        <div className="promo-codes-page__filters">
          <button
            className={`promo-codes-page__filter-btn ${activeFilter === 'all' ? 'active' : ''}`}
            onClick={() => setActiveFilter('all')}
          >
            –í—Å–µ ({filterCounts.all})
          </button>
          <button
            className={`promo-codes-page__filter-btn ${activeFilter === 'active' ? 'active' : ''}`}
            onClick={() => setActiveFilter('active')}
          >
            –ê–∫—Ç–∏–≤–Ω—ã–µ ({filterCounts.active})
          </button>
          <button
            className={`promo-codes-page__filter-btn ${activeFilter === 'inactive' ? 'active' : ''}`}
            onClick={() => setActiveFilter('inactive')}
          >
            –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ ({filterCounts.inactive})
          </button>
        </div>
      </div>

      <div className="promo-codes-page__content">
        {filteredPromoCodes.length === 0 ? (
          <div className="promo-codes-page__empty">
            {searchQuery.trim() ? (
              <>
                <div className="promo-codes-page__empty-icon">üîç</div>
                <h3>–ü—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
                <p>–ü–æ –∑–∞–ø—Ä–æ—Å—É "{searchQuery}" –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</p>
                <button 
                  className="promo-codes-page__empty-btn"
                  onClick={() => setSearchQuery('')}
                >
                  –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫
                </button>
              </>
            ) : promoCodes.length === 0 ? (
              <>
                <div className="promo-codes-page__empty-icon">üé´</div>
                <h3>–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–¥–æ–∫ –∫–ª–∏–µ–Ω—Ç–∞–º</p>
                <button 
                  className="promo-codes-page__empty-btn"
                  onClick={handleCreatePromoCode}
                >
                  ‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
                </button>
              </>
            ) : (
              <>
                <div className="promo-codes-page__empty-icon">üé´</div>
                <h3>–ù–µ—Ç {activeFilter === 'active' ? '–∞–∫—Ç–∏–≤–Ω—ã—Ö' : '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö'} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤</h3>
                <p>
                  {activeFilter === 'active' 
                    ? '–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∏' 
                    : '–í—Å–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∞–∫—Ç–∏–≤–Ω—ã'
                  }
                </p>
                <button 
                  className="promo-codes-page__empty-btn"
                  onClick={() => setActiveFilter('all')}
                >
                  –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
                </button>
              </>
            )}
          </div>
        ) : (
          <div className="promo-codes-page__list">
            {filteredPromoCodes.map(promoCode => (
              <PromoCodeCard
                key={getId(promoCode)}
                promoCode={promoCode}
                onEdit={handleEditPromoCode}
                onDelete={handleDeletePromoCode}
              />
            ))}
          </div>
        )}
      </div>

      <PromoCodeModal
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onSave={handleSavePromoCode}
        promoCode={editingPromoCode}
        isLoading={isModalLoading}
      />
      </div>
    </Layout>
  );
};
