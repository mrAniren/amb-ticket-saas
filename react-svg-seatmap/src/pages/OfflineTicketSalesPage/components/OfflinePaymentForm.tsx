import React, { useState, useCallback } from 'react';
import './OfflinePaymentForm.scss';

interface SelectedSeat {
  seatId: string;
  row: number;
  place: number;
  zone?: string;
  price: number;
  priceColor?: string;
  virtualSeatsCount?: number;
  virtualSeatIds?: string[];
}

interface OfflinePaymentFormProps {
  selectedSeats: SelectedSeat[];
  totalAmount: number;
  tempOrderId: string | null;
  onClose: () => void;
  onSubmit: (paymentData: PaymentData) => void;
}

interface PaymentData {
  customerName: string;
  customerEmail: string;
  customerPhone: string;
  paymentMethod: 'cash' | 'card' | 'transfer';
  paymentStatus: 'paid' | 'pending';
  notes?: string;
  seats: SelectedSeat[];
  totalAmount: number;
  tempOrderId: string | null;
}

const OfflinePaymentForm: React.FC<OfflinePaymentFormProps> = ({
  selectedSeats,
  totalAmount,
  tempOrderId,
  onClose,
  onSubmit
}) => {
  const [formData, setFormData] = useState({
    customerName: '',
    customerEmail: '',
    customerPhone: '',
    paymentMethod: 'cash' as 'cash' | 'card' | 'transfer',
    paymentStatus: 'pending' as 'paid' | 'pending',
    notes: ''
  });

  const [errors, setErrors] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = useCallback(() => {
    const newErrors: Record<string, string> = {};

    if (!formData.customerName.trim()) {
      newErrors.customerName = '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (!formData.customerEmail.trim()) {
      newErrors.customerEmail = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.customerEmail)) {
      newErrors.customerEmail = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    }

    if (!formData.customerPhone.trim()) {
      newErrors.customerPhone = '–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/^[\+]?[1-9][\d]{0,15}$/.test(formData.customerPhone.replace(/[\s\-\(\)]/g, ''))) {
      newErrors.customerPhone = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  }, [formData]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –ø–æ–ª—è—Ö
  const handleInputChange = useCallback((field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  }, [errors]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = useCallback(async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    setIsSubmitting(true);

    try {
      const paymentData: PaymentData = {
        customerName: formData.customerName.trim(),
        customerEmail: formData.customerEmail.trim(),
        customerPhone: formData.customerPhone.trim(),
        paymentMethod: formData.paymentMethod,
        paymentStatus: formData.paymentStatus,
        notes: formData.notes.trim() || undefined,
        seats: selectedSeats,
        totalAmount,
        tempOrderId
      };

      await onSubmit(paymentData);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã:', error);
    } finally {
      setIsSubmitting(false);
    }
  }, [formData, validateForm, selectedSeats, totalAmount, onSubmit]);

  return (
    <div className="offline-payment-form-overlay">
      <div className="offline-payment-form">
        <div className="offline-payment-form__header">
          <h2>üí≥ –û—Ñ–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞</h2>
          <button 
            className="offline-payment-form__close"
            onClick={onClose}
            type="button"
          >
            √ó
          </button>
        </div>

        <div className="offline-payment-form__content">
          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö */}
          <div className="selected-seats-info">
            <h3>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞</h3>
            <div className="seats-list">
              {selectedSeats.map((seat, index) => (
                <div key={index} className="seat-item">
                  <div className="seat-details">
                    {seat.seatId.includes('-virtual-') ? (
                      <>
                        <span className="seat-name">{seat.zone || '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞'}</span>
                        <span className="seat-type">–í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –º–µ—Å—Ç–æ</span>
                      </>
                    ) : (
                      <>
                        <span className="seat-name">{seat.place} –º–µ—Å—Ç–æ, {seat.row} —Ä—è–¥</span>
                        <span className="seat-zone">{seat.zone || '–ü–∞—Ä—Ç–µ—Ä'}</span>
                      </>
                    )}
                  </div>
                  <div className="seat-price">
                    {seat.price.toLocaleString('ru-RU')} ‚ÇΩ
                  </div>
                </div>
              ))}
            </div>
            <div className="total-amount">
              <strong>–ò—Ç–æ–≥–æ: {totalAmount.toLocaleString('ru-RU')} ‚ÇΩ</strong>
            </div>
          </div>

          {/* –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ–ø–ª–∞—Ç—ã */}
          <form onSubmit={handleSubmit} className="payment-form">
            <h3>–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞</h3>
            
            <div className="form-group">
              <label htmlFor="customerName">
                –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ <span className="required">*</span>
              </label>
              <input
                type="text"
                id="customerName"
                value={formData.customerName}
                onChange={(e) => handleInputChange('customerName', e.target.value)}
                className={errors.customerName ? 'error' : ''}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"
                disabled={isSubmitting}
              />
              {errors.customerName && (
                <span className="error-message">{errors.customerName}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="customerEmail">
                Email <span className="required">*</span>
              </label>
              <input
                type="email"
                id="customerEmail"
                value={formData.customerEmail}
                onChange={(e) => handleInputChange('customerEmail', e.target.value)}
                className={errors.customerEmail ? 'error' : ''}
                placeholder="example@email.com"
                disabled={isSubmitting}
              />
              {errors.customerEmail && (
                <span className="error-message">{errors.customerEmail}</span>
              )}
            </div>

            <div className="form-group">
              <label htmlFor="customerPhone">
                –¢–µ–ª–µ—Ñ–æ–Ω <span className="required">*</span>
              </label>
              <input
                type="tel"
                id="customerPhone"
                value={formData.customerPhone}
                onChange={(e) => handleInputChange('customerPhone', e.target.value)}
                className={errors.customerPhone ? 'error' : ''}
                placeholder="+7 (999) 123-45-67"
                disabled={isSubmitting}
              />
              {errors.customerPhone && (
                <span className="error-message">{errors.customerPhone}</span>
              )}
            </div>

            <h3>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</h3>

            <div className="form-group">
              <label>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</label>
              <div className="payment-methods">
                <label className="payment-method">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="cash"
                    checked={formData.paymentMethod === 'cash'}
                    onChange={(e) => handleInputChange('paymentMethod', e.target.value)}
                    disabled={isSubmitting}
                  />
                  <div className="payment-method-content">
                    <span className="payment-icon">üíµ</span>
                    <span className="payment-name">–ù–∞–ª–∏—á–Ω—ã–µ</span>
                  </div>
                </label>

                <label className="payment-method">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="card"
                    checked={formData.paymentMethod === 'card'}
                    onChange={(e) => handleInputChange('paymentMethod', e.target.value)}
                    disabled={isSubmitting}
                  />
                  <div className="payment-method-content">
                    <span className="payment-icon">üí≥</span>
                    <span className="payment-name">–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</span>
                  </div>
                </label>

                <label className="payment-method">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="transfer"
                    checked={formData.paymentMethod === 'transfer'}
                    onChange={(e) => handleInputChange('paymentMethod', e.target.value)}
                    disabled={isSubmitting}
                  />
                  <div className="payment-method-content">
                    <span className="payment-icon">üè¶</span>
                    <span className="payment-name">–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥</span>
                  </div>
                </label>
              </div>
            </div>

            <div className="form-group">
              <label>–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã</label>
              <div className="payment-status">
                <label className="status-option">
                  <input
                    type="radio"
                    name="paymentStatus"
                    value="paid"
                    checked={formData.paymentStatus === 'paid'}
                    onChange={(e) => handleInputChange('paymentStatus', e.target.value)}
                    disabled={isSubmitting}
                  />
                  <div className="status-content">
                    <span className="status-icon">‚úÖ</span>
                    <span className="status-name">–û–ø–ª–∞—á–µ–Ω–æ</span>
                  </div>
                </label>

                <label className="status-option">
                  <input
                    type="radio"
                    name="paymentStatus"
                    value="pending"
                    checked={formData.paymentStatus === 'pending'}
                    onChange={(e) => handleInputChange('paymentStatus', e.target.value)}
                    disabled={isSubmitting}
                  />
                  <div className="status-content">
                    <span className="status-icon">‚è≥</span>
                    <span className="status-name">–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã</span>
                  </div>
                </label>
              </div>
            </div>

            <div className="form-group">
              <label htmlFor="notes">
                –ü—Ä–∏–º–µ—á–∞–Ω–∏—è
              </label>
              <textarea
                id="notes"
                value={formData.notes}
                onChange={(e) => handleInputChange('notes', e.target.value)}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ..."
                rows={3}
                disabled={isSubmitting}
              />
            </div>

            <div className="form-actions">
              <button
                type="button"
                onClick={onClose}
                className="btn-cancel"
                disabled={isSubmitting}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                className="btn-submit"
                disabled={isSubmitting || selectedSeats.length === 0}
              >
                {isSubmitting ? (
                  <>
                    <span className="spinner"></span>
                    –û–±—Ä–∞–±–æ—Ç–∫–∞...
                  </>
                ) : (
                  'üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'
                )}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
};

export default OfflinePaymentForm;
