const express = require('express');
const router = express.Router();
const fs = require('fs').promises;
const path = require('path');
const { v4: uuidv4 } = require('uuid');
const Session = require('../models/Session');
const Event = require('../models/Event');
const Hall = require('../models/Hall');
const PriceScheme = require('../models/PriceScheme');
const { mongoose } = require('../config/mongodb');
const { addTicketsToSession } = require('../utils/ticketGenerator');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ MongoDB –∏–ª–∏ —Ñ–∞–π–ª—ã
const isMongoConnected = () => {
  return mongoose.connection.readyState === 1;
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ObjectId
const isValidObjectId = (id) => {
  return mongoose.Types.ObjectId.isValid(id) && String(new mongoose.Types.ObjectId(id)) === id;
};

const SESSIONS_FILE = path.join(__dirname, '../../data/sessions.json');
const EVENTS_FILE = path.join(__dirname, '../../data/events.json');
const HALLS_FILE = path.join(__dirname, '../../data/halls.json');
const PRICE_SCHEMES_FILE = path.join(__dirname, '../../data/priceSchemes.json');

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∞–Ω—Å–∞–º–∏ —á–µ—Ä–µ–∑ MongoDB
async function getAllSessions() {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∞–Ω—Å–∞–º–∏.');
  }
  return await Session.find()
    .populate('eventId')
    .populate('hallId')
    .populate('priceSchemeId')
    .sort({ date: 1, time: 1 });
}

async function getSessionById(id) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∞–Ω—Å–∞–º–∏.');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ObjectId
  if (!isValidObjectId(id)) {
    return null;
  }
  
  return await Session.findById(id)
    .populate('eventId')
    .populate('hallId')
    .populate('priceSchemeId');
}

async function getSessionsByEvent(eventId) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∞–Ω—Å–∞–º–∏.');
  }
  return await Session.findByEvent(eventId);
}

async function createSessionData(sessionData) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∞–Ω—Å–∞–º–∏.');
  }
  const session = new Session(sessionData);
  return await session.save();
}

async function updateSessionData(id, updateData) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∞–Ω—Å–∞–º–∏.');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ObjectId
  if (!isValidObjectId(id)) {
    return null;
  }
  
  return await Session.findByIdAndUpdate(id, updateData, { new: true });
}

async function deleteSessionData(id) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∞–Ω—Å–∞–º–∏.');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ObjectId
  if (!isValidObjectId(id)) {
    return null;
  }
  
  return await Session.findByIdAndDelete(id);
}

async function createSessionData(sessionData) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∞–Ω—Å–∞–º–∏.');
  }
  
  const newSession = new Session({
    eventId: sessionData.eventId,
    date: sessionData.date,
    time: sessionData.time,
    hallId: sessionData.hallId,
    priceSchemeId: sessionData.priceSchemeId,
    ticketsSold: 0,
    totalTickets: 0
  });
  
  return await newSession.save();
}

async function getSessionsByEventId(eventId) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∞–Ω—Å–∞–º–∏.');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ObjectId
  if (!isValidObjectId(eventId)) {
    return [];
  }
  
  return await Session.find({ eventId })
    .populate('eventId')
    .populate('hallId')
    .populate('priceSchemeId')
    .sort({ date: 1, time: 1 });
}

// Fallback —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
async function loadSessionsFromFile() {
  try {
    const data = await fs.readFile(SESSIONS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    if (error.code === 'ENOENT') {
      return [];
    }
    throw error;
  }
}

async function saveSessionsToFile(sessions) {
  const dataDir = path.dirname(SESSIONS_FILE);
  try {
    await fs.access(dataDir);
  } catch {
    await fs.mkdir(dataDir, { recursive: true });
  }
  await fs.writeFile(SESSIONS_FILE, JSON.stringify(sessions, null, 2));
}

async function saveSessions(sessions) {
  const dataDir = path.dirname(SESSIONS_FILE);
  try {
    await fs.access(dataDir);
  } catch {
    await fs.mkdir(dataDir, { recursive: true });
  }
  await fs.writeFile(SESSIONS_FILE, JSON.stringify(sessions, null, 2));
}

async function loadEvents() {
  try {
    const data = await fs.readFile(EVENTS_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    return [];
  }
}

async function loadHalls() {
  try {
    const data = await fs.readFile(HALLS_FILE, 'utf8');
    const parsed = JSON.parse(data);
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç halls –≤ –º–∞—Å—Å–∏–≤
    if (parsed.halls && typeof parsed.halls === 'object') {
      return Object.values(parsed.halls);
    }
    return parsed.halls || [];
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ª–æ–≤ –≤ sessions.js:', error);
    return [];
  }
}

async function loadPriceSchemes() {
  try {
    const data = await fs.readFile(PRICE_SCHEMES_FILE, 'utf8');
    return JSON.parse(data);
  } catch (error) {
    return [];
  }
}

// GET /api/sessions - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–µ–∞–Ω—Å—ã
router.get('/', async (req, res) => {
  try {
    const sessions = await getAllSessions();
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const formattedSessions = sessions.map(session => ({
      id: session._id,
      eventId: session.eventId?._id || session.eventId,
      hallId: session.hallId?._id || session.hallId,
      priceSchemeId: session.priceSchemeId?._id || session.priceSchemeId,
      date: session.date,
      time: session.time,
      ticketsSold: session.ticketsSold || 0,
      totalTickets: session.totalTickets || 0,
      event: session.eventId ? {
        id: session.eventId._id,
        name: session.eventId.name,
        description: session.eventId.description,
        image: session.eventId.image
      } : null,
      hall: session.hallId ? {
        id: session.hallId._id,
        name: session.hallId.name,
        city: session.hallId.city,
        capacity: session.hallId.capacity
      } : null,
      priceScheme: session.priceSchemeId ? {
        id: session.priceSchemeId._id,
        name: session.priceSchemeId.name,
        hallId: session.priceSchemeId.hallId,
        prices: session.priceSchemeId.prices || [],
        seatPrices: session.priceSchemeId.seatPrices || []
      } : null
    }));
    
    res.json({
      success: true,
      sessions: formattedSessions
    });
  } catch (error) {
    console.error('‚ùå Error getting sessions:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–∞–Ω—Å–æ–≤'
    });
  }
});

// GET /api/sessions/event/:eventId - –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∞–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
router.get('/event/:eventId', async (req, res) => {
  try {
    const { eventId } = req.params;
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∞–Ω—Å—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–∑ MongoDB (—É–∂–µ —Å populate)
    const eventSessions = await getSessionsByEventId(eventId);
    
    console.log(`‚úÖ Found ${eventSessions.length} sessions for event ${eventId}`);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const sessionsWithDetails = eventSessions.map(session => {
      return {
        id: session._id,
        eventId: session.eventId?._id || session.eventId,
        hallId: session.hallId?._id || session.hallId,
        priceSchemeId: session.priceSchemeId?._id || session.priceSchemeId,
        date: session.date,
        time: session.time,
        ticketsSold: session.ticketsSold || 0,
        totalTickets: session.totalTickets || 0,
        event: session.eventId ? {
          id: session.eventId._id,
          name: session.eventId.name,
          description: session.eventId.description,
          image: session.eventId.image
        } : null,
        hall: session.hallId ? {
          id: session.hallId._id,
          name: session.hallId.name,
          city: session.hallId.city,
          capacity: session.hallId.capacity
        } : null,
        priceScheme: session.priceSchemeId ? {
          id: session.priceSchemeId._id,
          name: session.priceSchemeId.name,
          hallId: session.priceSchemeId.hallId,
          prices: session.priceSchemeId.prices || [],
          seatPrices: session.priceSchemeId.seatPrices || []
        } : null
      };
    });
    
    res.json({
      success: true,
      sessions: sessionsWithDetails
    });
  } catch (error) {
    console.error('‚ùå Error getting event sessions:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–∞–Ω—Å–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    });
  }
});

// GET /api/sessions/:id - –ü–æ–ª—É—á–∏—Ç—å —Å–µ–∞–Ω—Å –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üé¨ Getting session ${id} - –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –ö–û–î–ê`);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∞–Ω—Å –∏–∑ MongoDB –ë–ï–ó populate —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å tickets
    const session = await Session.findById(id);
    
    if (!session) {
      return res.status(404).json({
        success: false,
        message: '–°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB
    console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', {
      eventId: session.eventId,
      hallId: session.hallId,
      priceSchemeId: session.priceSchemeId
    });
    
    const [event, hall, priceScheme] = await Promise.all([
      Event.findById(session.eventId),
      Hall.findById(session.hallId).lean(false), // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º lean —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
      PriceScheme.findById(session.priceSchemeId)
    ]);
    
    console.log('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏:', {
      hasEvent: !!event,
      hasHall: !!hall,
      hasPriceScheme: !!priceScheme,
      hallName: hall?.name,
      hallSeatsCount: hall?.seats?.length || 0,
      hallSeatConfig: hall?.seat_config?.length || 0,
      hallSeatsType: Array.isArray(hall?.seats) ? 'array' : typeof hall?.seats
    });
    
    console.log('üé¨ Hall SVG –¥–∞–Ω–Ω—ã–µ:', {
      hallId: hall?._id,
      svg_file: hall?.svg_file,
      hallName: hall?.name
    });
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const sessionWithDetails = {
      id: session._id,
      eventId: session.eventId,
      hallId: session.hallId,
      priceSchemeId: session.priceSchemeId,
      date: session.date,
      time: session.time,
      ticketsSold: session.ticketsSold || 0,
      totalTickets: session.totalTickets || 0,
      createdAt: session.createdAt,
      updatedAt: session.updatedAt,
      tickets: session.tickets || [], // –ù–û–í–û–ï –ü–û–õ–ï - –±–∏–ª–µ—Ç—ã –∏–∑ —Å–µ–∞–Ω—Å–∞
      event: event ? {
        id: event._id,
        name: event.name,
        description: event.description,
        image: event.image
      } : null,
      hall: hall ? {
        id: hall._id,
        name: hall.name,
        capacity: hall.capacity,
        city: hall.city,
        country: hall.country,
        currency: hall.currency,
        svg_file: hall.svg_file,
        svg_url: hall.svg_file,
        seats: hall.seats || [], // –ù–û–í–û–ï –ü–û–õ–ï - –º–µ—Å—Ç–∞ –∏–∑ –∑–∞–ª–∞
        seat_config: hall.seat_config, // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ—Å—Ç —Å –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏
        zone_config: hall.zone_config // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–æ–Ω
      } : null,
      priceScheme: priceScheme ? {
        id: priceScheme._id,
        name: priceScheme.name,
        hallId: priceScheme.hallId,
        prices: priceScheme.prices || [],
        seatPrices: priceScheme.seatPrices || []
      } : null
    };
    
    console.log('üîç –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç API:', {
      hasHall: !!sessionWithDetails.hall,
      hallSeatsCount: sessionWithDetails.hall?.seats?.length || 0,
      hallId: sessionWithDetails.hall?.id,
      hallName: sessionWithDetails.hall?.name
    });
    
    res.json({
      success: true,
      session: sessionWithDetails
    });
  } catch (error) {
    console.error('‚ùå Error getting session:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–∞–Ω—Å–∞'
    });
  }
});

// POST /api/sessions - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∞–Ω—Å
router.post('/', async (req, res) => {
  try {
    const { eventId, date, time, hallId, priceSchemeId } = req.body;
    console.log('üé¨ Creating new session:', { eventId, date, time, hallId, priceSchemeId });
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!eventId || !eventId.trim()) {
      return res.status(400).json({
        success: false,
        message: 'ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      });
    }
    
    if (!date || !date.trim()) {
      return res.status(400).json({
        success: false,
        message: '–î–∞—Ç–∞ —Å–µ–∞–Ω—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
      });
    }
    
    if (!time || !time.trim()) {
      return res.status(400).json({
        success: false,
        message: '–í—Ä–µ–º—è —Å–µ–∞–Ω—Å–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'
      });
    }
    
    if (!hallId || !hallId.trim()) {
      return res.status(400).json({
        success: false,
        message: '–ó–∞–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'
      });
    }
    
    if (!priceSchemeId || !priceSchemeId.trim()) {
      return res.status(400).json({
        success: false,
        message: '–†–∞—Å–ø–æ—è—Å–æ–≤–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –≤ MongoDB
    console.log('üîç Checking related entities...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    const event = await Event.findById(eventId);
    if (!event) {
      console.log('‚ùå Event not found:', eventId);
      return res.status(400).json({
        success: false,
        message: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
      });
    }
    console.log('‚úÖ Event found:', event.name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ª
    const hall = await Hall.findById(hallId).lean(false); // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º lean —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!hall) {
      console.log('‚ùå Hall not found:', hallId);
      return res.status(400).json({
        success: false,
        message: '–ó–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    console.log('‚úÖ Hall found:', hall.name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∞–µ—Å–æ–≤–∫—É
    const priceScheme = await PriceScheme.findById(priceSchemeId);
    if (!priceScheme) {
      console.log('‚ùå Price scheme not found:', priceSchemeId);
      return res.status(400).json({
        success: false,
        message: '–†–∞—Å–ø–æ—è—Å–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    console.log('‚úÖ Price scheme found:', priceScheme.name);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∑–∞–ª—É
    if (priceScheme.hallId.toString() !== hallId.toString()) {
      console.log('‚ùå Price scheme hall mismatch:', { priceSchemeHallId: priceScheme.hallId, selectedHallId: hallId });
      return res.status(400).json({
        success: false,
        message: '–†–∞—Å–ø–æ—è—Å–æ–≤–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∑–∞–ª—É'
      });
    }
    console.log('‚úÖ Price scheme belongs to hall');
    
    // –°–æ–∑–¥–∞–µ–º —Å–µ–∞–Ω—Å –≤ MongoDB
    console.log('üíæ Creating session in MongoDB...');
    const newSession = await createSessionData({
      eventId: eventId.trim(),
      date: date.trim(),
      time: time.trim(),
      hallId: hallId.trim(),
      priceSchemeId: priceSchemeId.trim()
    });
    
    console.log('‚úÖ Session created in MongoDB:', newSession._id);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∏–ª–µ—Ç—ã –¥–ª—è —Å–µ–∞–Ω—Å–∞
    console.log('üé´ Generating tickets for session...');
    await addTicketsToSession(newSession, hall, priceScheme);
    console.log('‚úÖ Tickets generated for session:', newSession._id);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const sessionWithDetails = {
      id: newSession._id,
      eventId: newSession.eventId,
      date: newSession.date,
      time: newSession.time,
      hallId: newSession.hallId,
      priceSchemeId: newSession.priceSchemeId,
      ticketsSold: newSession.ticketsSold || 0,
      totalTickets: newSession.totalTickets || 0,
      createdAt: newSession.createdAt,
      updatedAt: newSession.updatedAt,
      event: {
        id: event._id,
        name: event.name,
        description: event.description,
        image: event.image
      },
      hall: {
        id: hall._id,
        name: hall.name,
        capacity: hall.capacity
      },
      priceScheme: {
        id: priceScheme._id,
        name: priceScheme.name,
        hallId: priceScheme.hallId,
        prices: priceScheme.prices || [],
        seatPrices: priceScheme.seatPrices || []
      }
    };
    
    console.log('‚úÖ Session created successfully:', newSession._id);
    res.status(201).json({
      success: true,
      session: sessionWithDetails
    });
  } catch (error) {
    console.error('‚ùå Error creating session:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ–∞–Ω—Å–∞'
    });
  }
});

// PUT /api/sessions/:id - –û–±–Ω–æ–≤–∏—Ç—å —Å–µ–∞–Ω—Å
router.put('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const { eventId, date, time, hallId, priceSchemeId } = req.body;
    console.log(`üé¨ PUT ROUTE: Updating session ${id}`);
    console.log(`üé¨ PUT ROUTE: Update data:`, { eventId, date, time, hallId, priceSchemeId });

    if (!isMongoConnected()) {
      throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–∞–Ω—Å–∞–º–∏.');
    }
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–µ–∞–Ω—Å
    const session = await getSessionById(id);
    
    if (!session) {
      console.log('‚ùå PUT ROUTE: –°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω:', id);
      return res.status(404).json({
        success: false,
        message: '–°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    if (hallId && priceSchemeId) {
      console.log(`üîç PUT ROUTE: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏: hallId=${hallId}, priceSchemeId=${priceSchemeId}`);
      
      const [hall, priceScheme] = await Promise.all([
        Hall.findById(hallId),
        PriceScheme.findById(priceSchemeId)
      ]);
      
      if (!hall) {
        console.log('‚ùå PUT ROUTE: –ó–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', hallId);
        return res.status(400).json({
          success: false,
          message: '–ó–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'
        });
      }
      
      if (!priceScheme) {
        console.log('‚ùå PUT ROUTE: –†–∞—Å–ø–æ—è—Å–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', priceSchemeId);
        return res.status(400).json({
          success: false,
          message: '–†–∞—Å–ø–æ—è—Å–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–∞–ª—É
      const priceSchemeHallId = priceScheme.hallId.toString();
      const currentHallId = hallId.toString();
      
      if (priceSchemeHallId !== currentHallId) {
        console.log('‚ùå PUT ROUTE: –†–∞—Å–ø–æ—è—Å–æ–≤–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∑–∞–ª—É:', { priceSchemeHallId, currentHallId });
        return res.status(400).json({
          success: false,
          message: '–†–∞—Å–ø–æ—è—Å–æ–≤–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –∑–∞–ª—É'
        });
      }
    }
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = { updatedAt: new Date() };
    
    if (eventId !== undefined) updateData.eventId = eventId;
    if (date !== undefined) updateData.date = date;
    if (time !== undefined) updateData.time = time;
    if (hallId !== undefined) updateData.hallId = hallId;
    if (priceSchemeId !== undefined) updateData.priceSchemeId = priceSchemeId;
    
    console.log(`üîÑ PUT ROUTE: –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è:`, Object.keys(updateData));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤ MongoDB
    const updatedSession = await Session.findByIdAndUpdate(
      id,
      updateData,
      { new: true, runValidators: true }
    );
    
    if (!updatedSession) {
      console.log('‚ùå PUT ROUTE: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–µ–∞–Ω—Å –≤ MongoDB');
      return res.status(404).json({
        success: false,
        message: '–°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    console.log('‚úÖ PUT ROUTE: Session updated successfully:', id);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const formattedSession = {
      id: updatedSession._id,
      eventId: updatedSession.eventId,
      date: updatedSession.date,
      time: updatedSession.time,
      hallId: updatedSession.hallId,
      priceSchemeId: updatedSession.priceSchemeId,
      ticketsSold: updatedSession.ticketsSold || 0,
      totalTickets: updatedSession.totalTickets || 0,
      createdAt: updatedSession.createdAt,
      updatedAt: updatedSession.updatedAt
    };
    
    res.json({
      success: true,
      session: formattedSession
    });
  } catch (error) {
    console.error('‚ùå PUT ROUTE: Error updating session:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ–∞–Ω—Å–∞'
    });
  }
});

// DELETE /api/sessions/:id - –£–¥–∞–ª–∏—Ç—å —Å–µ–∞–Ω—Å
router.delete('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üé¨ Deleting session ${id}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
    const session = await getSessionById(id);
    if (!session) {
      return res.status(404).json({
        success: false,
        message: '–°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –£–¥–∞–ª—è–µ–º —Å–µ–∞–Ω—Å –∏–∑ MongoDB
    const deletedSession = await deleteSessionData(id);
    
    if (!deletedSession) {
      return res.status(404).json({
        success: false,
        message: '–°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    console.log('‚úÖ Session deleted successfully:', id);
    res.json({
      success: true,
      message: '–°–µ–∞–Ω—Å —É–¥–∞–ª–µ–Ω',
      session: {
        id: deletedSession._id,
        date: deletedSession.date,
        time: deletedSession.time,
        eventId: deletedSession.eventId,
        hallId: deletedSession.hallId,
        priceSchemeId: deletedSession.priceSchemeId
      }
    });
  } catch (error) {
    console.error('‚ùå Error deleting session:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ–∞–Ω—Å–∞'
    });
  }
});

// PATCH /api/sessions/:id/archive - –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∞–Ω—Å
router.patch('/:id/archive', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üóÑÔ∏è Archiving session ${id}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
    const session = await getSessionById(id);
    if (!session) {
      return res.status(404).json({
        success: false,
        message: '–°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å–µ–∞–Ω—Å
    session.isArchived = true;
    await session.save();
    
    console.log('‚úÖ Session archived successfully:', id);
    res.json({
      success: true,
      message: '–°–µ–∞–Ω—Å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω',
      session: {
        id: session._id,
        date: session.date,
        time: session.time,
        eventId: session.eventId,
        hallId: session.hallId,
        priceSchemeId: session.priceSchemeId,
        isArchived: session.isArchived
      }
    });
  } catch (error) {
    console.error('‚ùå Error archiving session:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ–∞–Ω—Å–∞'
    });
  }
});

// PATCH /api/sessions/:id/unarchive - –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ–∞–Ω—Å
router.patch('/:id/unarchive', async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üìÇ Unarchiving session ${id}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
    const session = await getSessionById(id);
    if (!session) {
      return res.status(404).json({
        success: false,
        message: '–°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å–µ–∞–Ω—Å
    session.isArchived = false;
    await session.save();
    
    console.log('‚úÖ Session unarchived successfully:', id);
    res.json({
      success: true,
      message: '–°–µ–∞–Ω—Å —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω',
      session: {
        id: session._id,
        date: session.date,
        time: session.time,
        eventId: session.eventId,
        hallId: session.hallId,
        priceSchemeId: session.priceSchemeId,
        isArchived: session.isArchived
      }
    });
  } catch (error) {
    console.error('‚ùå Error unarchiving session:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–µ–∞–Ω—Å–∞'
    });
  }
});

// GET /api/sessions/event/:eventId/active - –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ–∞–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
router.get('/event/:eventId/active', async (req, res) => {
  try {
    const { eventId } = req.params;
    console.log(`üé¨ Getting active sessions for event ${eventId}`);
    
    const allSessions = await Session.findActive(eventId)
      .populate('eventId', 'name description')
      .populate('hallId', 'name timezone')
      .populate('priceSchemeId', 'name prices seatPrices');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ –ø—Ä–æ—à–µ–¥—à–∏–µ) —Å–µ—Å—Å–∏–∏
    const activeSessions = allSessions.filter(session => {
      try {
        return !session.isPast();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ isPast –¥–ª—è —Å–µ—Å—Å–∏–∏:', session._id, error);
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º —Å–µ—Å—Å–∏—é –∞–∫—Ç–∏–≤–Ω–æ–π
        return true;
      }
    });
    
    console.log(`‚úÖ Found ${activeSessions.length} active sessions for event ${eventId}`);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const sessionsWithDetails = activeSessions.map(session => {
      return {
        id: session._id,
        eventId: session.eventId?._id || session.eventId,
        hallId: session.hallId?._id || session.hallId,
        priceSchemeId: session.priceSchemeId?._id || session.priceSchemeId,
        date: session.date,
        time: session.time,
        ticketsSold: session.ticketsSold || 0,
        totalTickets: session.totalTickets || 0,
        isArchived: session.isArchived || false,
        event: session.eventId ? {
          id: session.eventId._id,
          name: session.eventId.name,
          description: session.eventId.description,
          image: session.eventId.image
        } : null,
        hall: session.hallId ? {
          id: session.hallId._id,
          name: session.hallId.name,
          city: session.hallId.city,
          capacity: session.hallId.capacity,
          timezone: session.hallId.timezone
        } : null,
        priceScheme: session.priceSchemeId ? {
          id: session.priceSchemeId._id,
          name: session.priceSchemeId.name,
          hallId: session.priceSchemeId.hallId,
          prices: session.priceSchemeId.prices || [],
          seatPrices: session.priceSchemeId.seatPrices || []
        } : null
      };
    });
    
    res.json({
      success: true,
      sessions: sessionsWithDetails
    });
  } catch (error) {
    console.error('‚ùå Error getting active event sessions:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    });
  }
});

// GET /api/sessions/event/:eventId/past - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–µ–∞–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
router.get('/event/:eventId/past', async (req, res) => {
  try {
    const { eventId } = req.params;
    console.log(`üé¨ Getting past sessions for event ${eventId}`);
    
    const allSessions = await Session.findPast(eventId)
      .populate('eventId', 'name description')
      .populate('hallId', 'name timezone')
      .populate('priceSchemeId', 'name prices seatPrices');
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–µ—Å—Å–∏–∏
    const pastSessions = allSessions.filter(session => {
      try {
        return session.isPast();
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ isPast –¥–ª—è —Å–µ—Å—Å–∏–∏:', session._id, error);
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º —Å–µ—Å—Å–∏—é –Ω–µ –ø—Ä–æ—à–µ–¥—à–µ–π
        return false;
      }
    });
    
    console.log(`‚úÖ Found ${pastSessions.length} past sessions for event ${eventId}`);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const sessionsWithDetails = pastSessions.map(session => {
      return {
        id: session._id,
        eventId: session.eventId?._id || session.eventId,
        hallId: session.hallId?._id || session.hallId,
        priceSchemeId: session.priceSchemeId?._id || session.priceSchemeId,
        date: session.date,
        time: session.time,
        ticketsSold: session.ticketsSold || 0,
        totalTickets: session.totalTickets || 0,
        isArchived: session.isArchived || false,
        event: session.eventId ? {
          id: session.eventId._id,
          name: session.eventId.name,
          description: session.eventId.description,
          image: session.eventId.image
        } : null,
        hall: session.hallId ? {
          id: session.hallId._id,
          name: session.hallId.name,
          city: session.hallId.city,
          capacity: session.hallId.capacity,
          timezone: session.hallId.timezone
        } : null,
        priceScheme: session.priceSchemeId ? {
          id: session.priceSchemeId._id,
          name: session.priceSchemeId.name,
          hallId: session.priceSchemeId.hallId,
          prices: session.priceSchemeId.prices || [],
          seatPrices: session.priceSchemeId.seatPrices || []
        } : null
      };
    });
    
    res.json({
      success: true,
      sessions: sessionsWithDetails
    });
  } catch (error) {
    console.error('‚ùå Error getting past event sessions:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–µ–∞–Ω—Å–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    });
  }
});

// GET /api/sessions/event/:eventId/archived - –ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ–∞–Ω—Å—ã –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
router.get('/event/:eventId/archived', async (req, res) => {
  try {
    const { eventId } = req.params;
    console.log(`üóÑÔ∏è Getting archived sessions for event ${eventId}`);
    
    const archivedSessions = await Session.findArchived(eventId)
      .populate('eventId', 'name description')
      .populate('hallId', 'name timezone')
      .populate('priceSchemeId', 'name prices seatPrices');
    
    console.log(`‚úÖ Found ${archivedSessions.length} archived sessions for event ${eventId}`);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const sessionsWithDetails = archivedSessions.map(session => {
      return {
        id: session._id,
        eventId: session.eventId?._id || session.eventId,
        hallId: session.hallId?._id || session.hallId,
        priceSchemeId: session.priceSchemeId?._id || session.priceSchemeId,
        date: session.date,
        time: session.time,
        ticketsSold: session.ticketsSold || 0,
        totalTickets: session.totalTickets || 0,
        isArchived: session.isArchived || false,
        event: session.eventId ? {
          id: session.eventId._id,
          name: session.eventId.name,
          description: session.eventId.description,
          image: session.eventId.image
        } : null,
        hall: session.hallId ? {
          id: session.hallId._id,
          name: session.hallId.name,
          city: session.hallId.city,
          capacity: session.hallId.capacity,
          timezone: session.hallId.timezone
        } : null,
        priceScheme: session.priceSchemeId ? {
          id: session.priceSchemeId._id,
          name: session.priceSchemeId.name,
          hallId: session.priceSchemeId.hallId,
          prices: session.priceSchemeId.prices || [],
          seatPrices: session.priceSchemeId.seatPrices || []
        } : null
      };
    });
    
    res.json({
      success: true,
      sessions: sessionsWithDetails
    });
  } catch (error) {
    console.error('‚ùå Error getting archived event sessions:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–∞–Ω—Å–æ–≤ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    });
  }
});

// POST /api/sessions/lock-tickets - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–∞–Ω—Å–æ–≤
router.post('/lock-tickets', async (req, res) => {
  try {
    console.log('üîí Starting ticket locking process for upcoming sessions');
    
    const result = await Session.lockTicketsForUpcomingSessions();
    
    console.log(`‚úÖ Ticket locking completed. Processed ${result.processed} sessions`);
    
    res.json({
      success: true,
      message: '–ü—Ä–æ—Ü–µ—Å—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω',
      processed: result.processed,
      results: result.results
    });
  } catch (error) {
    console.error('‚ùå Error locking tickets:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–∏–ª–µ—Ç–æ–≤',
      error: error.message
    });
  }
});

// POST /api/sessions/:sessionId/lock-tickets - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏
router.post('/:sessionId/lock-tickets', async (req, res) => {
  try {
    const { sessionId } = req.params;
    
    if (!isValidObjectId(sessionId)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–µ—Å—Å–∏–∏'
      });
    }
    
    console.log(`üîí Locking tickets for session ${sessionId}`);
    
    const session = await Session.findById(sessionId);
    if (!session) {
      return res.status(404).json({
        success: false,
        message: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      });
    }
    
    const result = await session.lockTicketsBeforeSession();
    
    console.log(`‚úÖ Ticket locking for session ${sessionId} completed:`, result);
    
    res.json({
      success: true,
      message: '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      sessionId: sessionId,
      ...result
    });
  } catch (error) {
    console.error('‚ùå Error locking tickets for session:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏',
      error: error.message
    });
  }
});

module.exports = router;
