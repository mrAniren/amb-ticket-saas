require('dotenv').config();
const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const morgan = require('morgan');
const rateLimit = require('express-rate-limit');
const path = require('path');

const { connectMongoDB } = require('./config/mongodb');
const ticketLockingService = require('./services/ticketLockingService');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤
function startOrderCleanupScheduler() {
  console.log('‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ (–∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É)');
  
  // –û—á–∏—â–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  cleanupExpiredOrders();
  
  // –ó–∞—Ç–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å 2-–º–∏–Ω—É—Ç–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏)
  setInterval(cleanupExpiredOrders, 1 * 60 * 1000);
}

async function cleanupExpiredOrders() {
  try {
    console.log('üïê –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤...');
    const Order = require('./models/Order');
    const Session = require('./models/Session');
    const mongoose = require('mongoose');
    
    const now = new Date();
    console.log(`‚è∞ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: ${now.toISOString()}`);
    
    // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–∫–∞–∑—ã
    const expiredOrders = await Order.find({
      status: { $in: ['temporary', 'pending'] },
      expiresAt: { $lt: now }
    });
    
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤: –Ω–∞–π–¥–µ–Ω–æ ${expiredOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
    if (expiredOrders.length > 0) {
      expiredOrders.forEach(order => {
        console.log(`   - –ó–∞–∫–∞–∑ ${order._id}: —Å—Ç–∞—Ç—É—Å=${order.status}, –∏—Å—Ç–µ–∫–∞–µ—Ç=${order.expiresAt}`);
      });
    }
    
    if (expiredOrders.length === 0) {
      return;
    }
    
    console.log(`üßπ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞: –Ω–∞–π–¥–µ–Ω–æ ${expiredOrders.length} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π MongoDB)
    for (const order of expiredOrders) {
      try {
        console.log(`   üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ ${order._id}...`);
        
        // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ expired
        await Order.findByIdAndUpdate(
          order._id,
          { status: 'expired' }
        );
        console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ${order._id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ expired`);
        
        // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
        const session = await Session.findById(order.sessionId);
        if (session) {
          let freedSeats = 0;
          session.tickets.forEach(ticket => {
            if (ticket.orderId && ticket.orderId.toString() === order._id.toString()) {
              ticket.status = 'available';
              delete ticket.orderId;
              delete ticket.reservedUntil;
              delete ticket.customerInfo;
              freedSeats++;
            }
          });
          
          if (freedSeats > 0) {
            await session.save();
            console.log(`   ‚úÖ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ ${freedSeats} –º–µ—Å—Ç –≤ —Å–µ—Å—Å–∏–∏ ${order.sessionId}`);
          }
        }
      } catch (error) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ ${order._id}:`, error.message);
      }
    }
    
    console.log(`‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${expiredOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤:', error);
  }
}

// Import routes
const authRoutes = require('./routes/auth');
const hallRoutes = require('./routes/halls');
const fileRoutes = require('./routes/files');
const priceSchemeRoutes = require('./routes/priceSchemes');
const eventRoutes = require('./routes/events');
const sessionRoutes = require('./routes/sessions');
const promoCodeRoutes = require('./routes/promoCodes');
const ticketRoutes = require('./routes/tickets');
const orderRoutes = require('./routes/orders'); // –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

const app = express();

// Security middleware - relaxed for SPA
app.use(helmet({
  crossOriginResourcePolicy: { policy: "cross-origin" },
  contentSecurityPolicy: false, // –û—Ç–∫–ª—é—á–∞–µ–º CSP –¥–ª—è SPA
  crossOriginOpenerPolicy: false,
  hsts: false, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π HTTPS –¥–ª—è HTTP —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  frameguard: false // –û—Ç–∫–ª—é—á–∞–µ–º X-Frame-Options –¥–ª—è iframe –≤–∏–¥–∂–µ—Ç–æ–≤
}));

// Rate limiting - –±–æ–ª–µ–µ –º—è–≥–∫–∏–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: process.env.NODE_ENV === 'production' ? 100 : 1000, // 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è dev
  skip: (req) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º rate limiting –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –≤ development
    if (process.env.NODE_ENV !== 'production') {
      return req.path.startsWith('/api/halls');
    }
    return false;
  }
});
app.use(limiter);

// CORS configuration
app.use(cors({
  origin: true, // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ origins –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  credentials: true,
  methods: ['GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization', 'x-requested-with']
}));

// Body parsing middleware
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// Logging
if (process.env.NODE_ENV === 'development') {
  app.use(morgan('dev'));
}

// Static files
app.use('/uploads', express.static(path.join(__dirname, '../uploads')));

// Health check endpoints
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    environment: process.env.NODE_ENV || 'development'
  });
});

app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    environment: process.env.NODE_ENV || 'development'
  });
});

// API routes
app.use('/api/auth', authRoutes);
app.use('/api/halls', hallRoutes);
app.use('/api/files', fileRoutes);
app.use('/api/price-schemes', priceSchemeRoutes);
app.use('/api/events', eventRoutes);
app.use('/api/sessions', sessionRoutes);
app.use('/api/promo-codes', promoCodeRoutes);
app.use('/api/tickets', ticketRoutes);
app.use('/api/orders', orderRoutes); // –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å Session.tickets
app.use('/api/customers', require('./routes/customers')); // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
app.use('/api/statistics', require('./routes/statistics')); // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∂
app.use('/api/widgets', require('./routes/widgets')); // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–∞–º–∏
app.use('/api/widget', require('./routes/widget-embed')); // –í—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –≤–∏–¥–∂–µ—Ç—ã
app.use('/api/facebook', require('./routes/facebook')); // Facebook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
app.use('/api/currency', require('./routes/currency')); // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç

// Serve static files from React build
app.use(express.static(path.join(__dirname, '../public')));

// Special route for iframe tickets pages
app.get('/tickets/:sessionId', (req, res) => {
  const indexPath = path.join(__dirname, '../public/index.html');
  res.sendFile(indexPath, (err) => {
    if (err) {
      console.error('‚ùå Error serving iframe index.html:', err);
      res.status(404).json({ error: 'Frontend not found' });
    }
  });
});

// Handle React routing, return all non-API requests to React app
app.get('*', (req, res, next) => {
  // Skip API routes
  if (req.path.startsWith('/api/')) {
    return next();
  }
  
  const indexPath = path.join(__dirname, '../public/index.html');
  
  res.sendFile(indexPath, (err) => {
    if (err) {
      console.error('‚ùå Error serving index.html:', err);
      res.status(404).json({ error: 'Frontend not found' });
    }
  });
});

// Global error handler
app.use((err, req, res, next) => {
  console.error(err.stack);
  
  if (err.type === 'entity.too.large') {
    return res.status(413).json({ error: 'File too large' });
  }
  
  res.status(err.status || 500).json({ 
    error: process.env.NODE_ENV === 'development' ? err.message : 'Internal server error'
  });
});

const PORT = process.env.PORT || 3001;

// Database connection and server start
async function startServer() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    const mongoConnection = await connectMongoDB();
    
    if (mongoConnection) {
      console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö');
    } else {
      console.log('‚ö†Ô∏è MongoDB –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ');
    }
    
    app.listen(PORT, () => {
        console.log(`üöÄ Server running on port ${PORT}`);
        console.log(`üì± Frontend: http://localhost:${PORT}`);
        console.log(`üîß API: http://localhost:${PORT}/api`);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        startOrderCleanupScheduler();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–∏–ª–µ—Ç–æ–≤
        ticketLockingService.start();
    });
  } catch (error) {
    console.error('‚ùå Unable to start server:', error);
    process.exit(1);
  }
}

startServer();