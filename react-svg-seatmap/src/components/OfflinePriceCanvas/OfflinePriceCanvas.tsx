import React, { useRef, useEffect, useState, useCallback } from 'react';
import { createPortal } from 'react-dom';
import { Seat, Zone } from '../../types/Seat.types';
import { InteractionMode } from '../../types/PriceScheme.types';
import SpecialZoneSelector from '../SpecialZoneSelector/SpecialZoneSelector';
import './OfflinePriceCanvas.scss';

interface OfflinePriceCanvasProps {
  seats: Seat[];
  zones: Zone[];
  width?: number;
  height?: number;
  interactionMode?: InteractionMode;
  selectedSeats?: string[];
  onSeatClick?: (seat: Seat) => void;
  onSeatsSelected?: (seatIds: string[]) => void;
  onModeChange?: (mode: InteractionMode) => void;
  // –¶–µ–Ω—ã –¥–ª—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∏ –º–µ—Å—Ç
  seatPrices?: { 
    seatId: string; 
    priceId: string; 
    row?: number; 
    seatNumber?: number; 
    section?: string; 
  }[];
  prices?: { id: string; color: string; name: string; value: number; currency: string }[];
  // –î–∞–Ω–Ω—ã–µ –º–µ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  hallSeats?: {
    seatId: string;
    row: number;
    seatNumber: number;
    section: string;
    zoneName?: string; // –ù–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã –∏–∑ –±–∏–ª–µ—Ç–∞
    price?: number; // –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞
    x: number;
    y: number;
    width: number;
    height: number;
    objectType: string;
    capacity?: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω
        // svgData –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–ª–µ–≥–∞—Å–∏ –∫–æ–¥)
  }[];
  // –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –±–∏–ª–µ—Ç—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—Ç
  virtualTickets?: {
    seatId: string;
    status: string;
    objectType: string;
    [key: string]: any;
  }[];
}

interface CanvasSeat extends Seat {
  x: number;
  y: number;
  width: number;
  height: number;
  section?: string; // –î–æ–±–∞–≤–ª—è–µ–º section
}

export const OfflinePriceCanvas: React.FC<OfflinePriceCanvasProps> = ({
  seats,
  zones = [], // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–æ–Ω—ã –∏–∑ zone_config
  width = 1920,
  height = 1080,
  interactionMode = InteractionMode.ZOOM_PAN,
  selectedSeats = [],
  onSeatClick,
  onSeatsSelected,
  onModeChange,
  seatPrices = [],
  prices = [],
  hallSeats = [],
  virtualTickets = []
}) => {
  
  
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [canvasSeats, setCanvasSeats] = useState<CanvasSeat[]>([]);
  const [hoveredSeat, setHoveredSeat] = useState<string | null>(null);
  const [tooltip, setTooltip] = useState<{
    visible: boolean;
    x: number;
    y: number;
    content: string;
  }>({ visible: false, x: 0, y: 0, content: '' });

  // // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  // React.useEffect(() => {
  //   console.log('üé® PriceCanvas –¥–∞–Ω–Ω—ã–µ:', {
  //     hallSeatsType: Array.isArray(hallSeats) ? 'array' : typeof hallSeats,
  //     hallSeatsCount: Array.isArray(hallSeats) ? hallSeats.length : 0,
  //     seatPricesCount: seatPrices.length,
  //     pricesCount: prices.length,
  //     sampleHallSeat: Array.isArray(hallSeats) && hallSeats.length > 0 ? hallSeats[0] : null,
  //     sampleSeatPrice: seatPrices.length > 0 ? seatPrices[0] : null
  //   });
  // }, [hallSeats, seatPrices, prices]);
  
  // State –¥–ª—è –∑—É–º–∞ –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
  const [transform, setTransform] = useState({
    scale: 1,
    offsetX: 0,
    offsetY: 0
  });

  // State –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è
  const [isAnimating, setIsAnimating] = useState(false);
  const [animationTarget, setAnimationTarget] = useState<{offsetX: number, offsetY: number} | null>(null);
  
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });
  
  // State –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ä–∞–º–∫–æ–π
  const [isSelecting, setIsSelecting] = useState(false);
  const [selectionStart, setSelectionStart] = useState<{ x: number; y: number } | null>(null);
  const [selectionEnd, setSelectionEnd] = useState<{ x: number; y: number } | null>(null);
  
  // State –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
  const [localSelectedSeats, setLocalSelectedSeats] = useState<string[]>([]);
  
  // –î–ª—è –æ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å–∏–∏ —Ñ–∏–ª—å—Ç—Ä—ã —Ü–µ–Ω –Ω–µ –Ω—É–∂–Ω—ã - –≤—Å–µ –º–µ—Å—Ç–∞ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã

  // State –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞–Ω–≤–∞—Å–∞
  const [canvasSize, setCanvasSize] = useState({ width: 1920, height: 1080 });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã
  const [specialZoneSelector, setSpecialZoneSelector] = useState<{
    isVisible: boolean;
    position: { x: number; y: number };
    zoneName: string;
    capacity: number;
    price: number;
    currency: string;
    seatId: string;
  } | null>(null);
  
  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å –≤–Ω–µ—à–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º selectedSeats
  useEffect(() => {
    setLocalSelectedSeats(selectedSeats);
  }, [selectedSeats]);

  // –î–ª—è –æ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å–∏–∏ –≤—Å–µ –º–µ—Å—Ç–∞ –≤—Å–µ–≥–¥–∞ –∞–∫—Ç–∏–≤–Ω—ã

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞–Ω–≤–∞—Å–∞
  useEffect(() => {
    const calculateCanvasSize = () => {
      const screenWidth = window.innerWidth;
      const screenHeight = window.innerHeight;
      
      // –ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ 1920x1080
      const baseWidth = 1920;
      const baseHeight = 1080;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—é —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞
      const maxWidth = screenWidth;
      const maxHeight = screenHeight * 0.9;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Å—à—Ç–∞–±
      const scaleX = maxWidth / baseWidth;
      const scaleY = maxHeight / baseHeight;
      const scale = Math.min(scaleX, scaleY);
      
      const newWidth = Math.floor(baseWidth * scale);
      const newHeight = Math.floor(baseHeight * scale);
      
      setCanvasSize({ width: newWidth, height: newHeight });
    };

    calculateCanvasSize();
    window.addEventListener('resize', calculateCanvasSize);
    
    return () => window.removeEventListener('resize', calculateCanvasSize);
  }, []);


  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ –º–µ—Å—Ç–æ (–¥–ª—è –æ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å–∏–∏)
  const isSeatActive = useCallback((seat: any): boolean => {
    // –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
    if (seat.status === 'reserved' || seat.status === 'sold' || seat.status === 'locked') {
      return false;
    }
    
    // –í –æ—Ñ–ª–∞–π–Ω –≤–µ—Ä—Å–∏–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞ –∞–∫—Ç–∏–≤–Ω—ã
    return true;
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–¥—Å–∫–∞–∑–∫–∏
  const createTooltipContent = useCallback((seatId: string): string => {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ hallSeats (—Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–æ–Ω)
    // –ü–†–ò–û–†–ò–¢–ï–¢: —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã, –ø–æ—Ç–æ–º –æ–±—ã—á–Ω—ã–µ –º–µ—Å—Ç–∞
    let hallSeat = Array.isArray(hallSeats) ? 
      hallSeats.find(hs => hs.objectType === 'special_zone' && hs.seatId === seatId) : null;
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ capacity (—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã —Å capacity > 1)
    if (!hallSeat) {
      hallSeat = Array.isArray(hallSeats) ? 
        hallSeats.find(hs => hs.seatId === seatId && hs.capacity && hs.capacity > 1) : null;
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –æ–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ
    if (!hallSeat) {
      hallSeat = Array.isArray(hallSeats) ? 
        hallSeats.find(hs => hs.seatId === seatId) : null;
    }
    
    
    let content = '';
    
    if (hallSeat) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω–æ–π
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å objectType: 'special_zone' –∏–ª–∏ objectType: 'seat' —Å capacity > 1
      const isSpecialZone = hallSeat.objectType === 'special_zone' || 
                           (hallSeat.objectType === 'seat' && hallSeat.capacity && hallSeat.capacity > 1);
      
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã –∏–∑ zone_config
      const zone = zones.find(z => z.id === hallSeat.section);
      const zoneName = zone ? zone.name : hallSeat.section || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–æ–Ω–∞';
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω
      if (isSpecialZone) {
        console.log('üé™ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –≤ –ø–æ–¥—Å–∫–∞–∑–∫–µ:', {
          seatId,
          hallSeatSection: hallSeat.section,
          zoneName,
          zone: zone
        });
      }
      
      if (isSpecialZone) {
        // üé™ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ + 1 (–æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç)
        const availableVirtualTickets = virtualTickets.filter(vt => 
          vt.seatId && vt.seatId.startsWith(`${seatId}_seat_`) && (vt.status === 'available' || vt.status === 'reserved')
        );
        const availableCount = availableVirtualTickets.length + 1; // +1 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã
        
        
        
        content += `${availableCount} –º–µ—Å—Ç`;
        content += `\\n${zoneName}`;
      } else {
        // –û–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—è–¥ –∏ –º–µ—Å—Ç–æ
        content += `–†—è–¥ ${hallSeat.row}, –º–µ—Å—Ç–æ ${hallSeat.seatNumber}`;
        content += `\\n${zoneName}`;
      }
      
      // –¶–µ–Ω–∞ –∏–∑ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏
      let seatPrice = seatPrices.find(sp => sp.seatId === seatId);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ü–µ–Ω (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—Ç)
      if (hallSeat.objectType === 'special_zone' || (hallSeat.objectType === 'seat' && !seatPrice)) {
      }
      
      // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω –∏—â–µ–º —Ü–µ–Ω—É –ø–æ zone
      if (!seatPrice && isSpecialZone && hallSeat.section) {
        // –ò—â–µ–º —Ü–µ–Ω—É –¥–ª—è –∑–æ–Ω—ã
        const zonePrice = prices.find(p => p.name === hallSeat.section || p.id === hallSeat.section);
        if (zonePrice) {
          content += `\\n${zonePrice.value.toLocaleString('ru-RU')} ${zonePrice.currency}`;
        } else {
          content += `\\n–¶–µ–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞`;
        }
      } else if (seatPrice) {
        const price = prices.find(p => p.id === seatPrice.priceId);
        if (price) {
          content += `\\n${price.value.toLocaleString('ru-RU')} ${price.currency}`;
        } else {
          content += `\\n–¶–µ–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞`;
        }
      } else {
        content += `\\n–¶–µ–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞`;
      }
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      } else {
      // Fallback - –∏—â–µ–º –≤ seats
      const seat = seats.find(s => s.id === seatId);
      
      
      if (seat) {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã –∏–∑ zone_config
        let zoneName = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∑–æ–Ω–∞';
        if (seat.zone) {
          const foundZone = zones.find(z => z.id === seat.zone);
          if (foundZone) {
            zoneName = foundZone.name;
          } else {
            zoneName = seat.zone;
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω–æ–π
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å objectType: 'special_zone' –∏–ª–∏ objectType: 'seat' —Å capacity > 1
        const isSpecialZone = seat.objectType === 'special_zone' || 
                             (seat.objectType === 'seat' && seat.capacity && seat.capacity > 1);
        
        if (isSpecialZone) {
          // üé™ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç
          const capacity = seat.capacity || 0;
          content += `${capacity} –º–µ—Å—Ç`;
          content += `\\n${zoneName}`;
        } else {
          // –û–±—ã—á–Ω–æ–µ –º–µ—Å—Ç–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä—è–¥ –∏ –º–µ—Å—Ç–æ
          const row = seat.row || 0;
          const place = seat.place || 0;
          content += `–†—è–¥ ${row}, –º–µ—Å—Ç–æ ${place}`;
          content += `\\n${zoneName}`;
        }
        
        // –¶–µ–Ω–∞ –∏–∑ —Ä–∞—Å–ø–æ—è—Å–æ–≤–∫–∏
        let seatPrice = seatPrices.find(sp => sp.seatId === String(seatId));
        
        // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω –∏—â–µ–º —Ü–µ–Ω—É –ø–æ zone
        if (!seatPrice && isSpecialZone && seat.zone) {
          // –ò—â–µ–º —Ü–µ–Ω—É –¥–ª—è –∑–æ–Ω—ã
          const zonePrice = prices.find(p => p.name === seat.zone || p.id === seat.zone);
          if (zonePrice) {
            content += `\\n${zonePrice.value.toLocaleString('ru-RU')} ${zonePrice.currency}`;
          } else {
            content += `\\n–¶–µ–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞`;
          }
        } else if (seatPrice) {
          const price = prices.find(p => p.id === seatPrice.priceId);
          if (price) {
            content += `\\n${price.value.toLocaleString('ru-RU')} ${price.currency}`;
          } else {
            content += `\\n–¶–µ–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞`;
          }
        } else {
          content += `\\n–¶–µ–Ω–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞`;
        }
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      } else {
        content += `–ú–µ—Å—Ç–æ: ${seatId}`;
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      }
    }
    
    return content;
  }, [seats, hallSeats, seatPrices, prices, zones]);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ SVG –¥–∞–Ω–Ω—ã—Ö
  const calculateSeatPositions = useCallback(() => {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
    
    if (!seats.length) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      return [];
    }

    const newCanvasSeats: CanvasSeat[] = [];
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–µ–º hallSeats –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if (hallSeats && hallSeats.length > 0) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      
      // –°–æ–∑–¥–∞–µ–º canvas –º–µ—Å—Ç–∞ –∏–∑ hallSeats (–≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –±–∞–∑–µ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã)
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      hallSeats.forEach((hallSeat) => {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –º–µ—Å—Ç –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω
        const isClickableSeat = (hallSeat.objectType === 'seat' && 
                                hallSeat.row && 
                                hallSeat.seatNumber && 
                                hallSeat.section) ||
                               (hallSeat.objectType === 'special_zone' && 
                                hallSeat.section);
        
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ—Å—Ç–æ –≤ seats –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ–ª–∏–≥–æ–Ω—ã –∏–∑ seat_config)
        const foundSeat = seats.find(s => s.id === hallSeat.seatId);
        
        
        // ‚úÖ isClickable –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è
        
        const correspondingSeat = foundSeat ? {
          ...foundSeat,
          isClickable: isClickableSeat // ‚úÖ –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—á–∏—Å–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        } : {
          id: hallSeat.seatId,
          row: hallSeat.row,
          place: hallSeat.seatNumber,
          section: hallSeat.section,
          objectType: hallSeat.objectType || 'seat',
          isClickable: isClickableSeat
        };
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ hallSeat (—É–∂–µ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö canvas)
        const transformedData = {
          x: hallSeat.x,
          y: hallSeat.y,
          width: hallSeat.width,
          height: hallSeat.height
        };
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–µ—Å—Ç
        const minSeatSize = hallSeat.objectType === 'seat' ? 12 : 8;
        const finalWidth = Math.max(transformedData.width, minSeatSize);
        const finalHeight = Math.max(transformedData.height, minSeatSize);
        
        const canvasSeat: CanvasSeat = {
          ...(correspondingSeat as any || {}),
          id: correspondingSeat?.id || hallSeat.seatId,
          cssSelector: `#${hallSeat.seatId}`,
          x: transformedData.x,
          y: transformedData.y,
          width: finalWidth,
          height: finalHeight,
          objectType: hallSeat.objectType as any,
          isClickable: Boolean(isClickableSeat),
          row: hallSeat.row,
          place: hallSeat.seatNumber,
          section: hallSeat.section,
          // svgData –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–ª–µ–≥–∞—Å–∏ –∫–æ–¥)
        };
        
        newCanvasSeats.push(canvasSeat);
        
        // // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—Ç
        // if (index < 5) {
        //   console.log(`üé≠ Canvas –º–µ—Å—Ç–æ ${index + 1}:`, {
        //     seatId: canvasSeat.id,
        //     objectType: canvasSeat.objectType,
        //     isClickable: canvasSeat.isClickable,
        //     row: hallSeat.row,
        //     seatNumber: hallSeat.seatNumber,
        //     section: hallSeat.section,
        //     coords: { x: canvasSeat.x, y: canvasSeat.y, width: canvasSeat.width, height: canvasSeat.height }
        //   });
        // }
      });
      
      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      // const renderStats = {
      //   totalElements: hallSeats.length,
      //   renderedElements: newCanvasSeats.length,
      //   objectTypes: newCanvasSeats.reduce((acc, s) => {
      //     acc[s.objectType || 'unknown'] = (acc[s.objectType || 'unknown'] || 0) + 1;
      //     return acc;
      //   }, {} as Record<string, number>),
      //   clickableSeats: newCanvasSeats.filter(s => s.isClickable).length
      // };
      
      // console.log(`‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ (–∏–∑ —á–∏—Å—Ç–æ–π –ë–î):`, renderStats);
      return newCanvasSeats;
    }
    
    // ‚ùå –ù–ï–¢ –î–ê–ù–ù–´–• HALLSEATS - –ù–ï –ú–û–ñ–ï–ú –†–ï–ù–î–ï–†–ò–¢–¨
    // console.log('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö hallSeats –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞');
    return [];
  }, [seats, hallSeats, width, height]);

  // üé® –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Ü–≤–µ—Ç –º–µ—Å—Ç–∞ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–Ω—ã –∏–ª–∏ —Å—Ç–∏–ª—å–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  const getSeatColor = useCallback((seatId: string) => {
    const seatPrice = seatPrices.find(sp => sp.seatId === seatId);
    if (seatPrice) {
      const price = prices.find(p => p.id === seatPrice.priceId);
      if (price) return price.color;
    }
    
    // üåà –ö—Ä–∞—Å–∏–≤—ã–µ —Ü–≤–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç ID –º–µ—Å—Ç–∞
    const colorPalette = [
      '#4ecdc4', // –ú—è—Ç–Ω—ã–π
      '#45b7d1', // –ù–µ–±–µ—Å–Ω–æ-–≥–æ–ª—É–±–æ–π  
      '#96ceb4', // –ú—è–≥–∫–∏–π –∑–µ–ª–µ–Ω—ã–π
      '#ffeaa7', // –¢–µ–ø–ª—ã–π –∂–µ–ª—Ç—ã–π
      '#dda0dd', // –°–≤–µ—Ç–ª–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
      '#98d8c8', // –ú–æ—Ä—Å–∫–∞—è –≤–æ–ª–Ω–∞
      '#f7dc6f', // –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
      '#bb8fce'  // –õ–∞–≤–∞–Ω–¥–æ–≤—ã–π
    ];
    
    // –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ö–µ—à–∞ ID –º–µ—Å—Ç–∞
    const hash = seatId.split('').reduce((a, b) => {
      a = ((a << 5) - a) + b.charCodeAt(0);
      return a & a;
    }, 0);
    
    return colorPalette[Math.abs(hash) % colorPalette.length];
  }, [seatPrices, prices]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –ø–æ–¥–ª–æ–∂–∫–∏
  const drawBackgroundOverlay = useCallback((ctx: CanvasRenderingContext2D) => {
    if (canvasSeats.length === 0) return;

    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö –º–µ—Å—Ç
    const minX = Math.min(...canvasSeats.map(s => s.x));
    const minY = Math.min(...canvasSeats.map(s => s.y));
    const maxX = Math.max(...canvasSeats.map(s => s.x + s.width));
    const maxY = Math.max(...canvasSeats.map(s => s.y + s.height));

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
    const padding = 50;
    const bgX = minX - padding;
    const bgY = minY - padding;
    const bgWidth = maxX - minX + padding * 2;
    const bgHeight = maxY - minY + padding * 2;

    // –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
    ctx.save();
    ctx.beginPath();
    ctx.roundRect(bgX, bgY, bgWidth, bgHeight, 20);
    ctx.fillStyle = '#ffffff'; // –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–ª—ã–π —Ñ–æ–Ω
    ctx.fill();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–Ω–∫—É—é –æ–±–≤–æ–¥–∫—É
    ctx.strokeStyle = 'rgba(200, 200, 200, 0.3)';
    ctx.lineWidth = 1;
    ctx.stroke();
    ctx.restore();
  }, [canvasSeats]);

  // –†–µ–Ω–¥–µ—Ä–∏–º Canvas
  const renderCanvas = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // –í–∫–ª—é—á–∞–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è –≥–ª–∞–¥–∫–∏—Ö –ø–æ–ª–∏–≥–æ–Ω–æ–≤
    ctx.imageSmoothingEnabled = true;
    ctx.imageSmoothingQuality = 'high';

    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, canvasSize.width, canvasSize.height);

    // –†–∏—Å—É–µ–º —Ñ–æ–Ω
    ctx.fillStyle = '#f5f5f5';
    ctx.fillRect(0, 0, canvasSize.width, canvasSize.height);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∑—É–º –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
    ctx.save();
    ctx.translate(transform.offsetX, transform.offsetY);
    ctx.scale(transform.scale, transform.scale);

    // –†–∏—Å—É–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø–æ–¥–ª–æ–∂–∫—É
    drawBackgroundOverlay(ctx);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–∞: —Å–Ω–∞—á–∞–ª–∞ –±–æ–ª—å—à–∏–µ (—Ñ–æ–Ω), –ø–æ—Ç–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ (–º–µ—Å—Ç–∞)
    const sortedSeats = [...canvasSeats].sort((a, b) => {
      const aSize = a.width * a.height;
      const bSize = b.width * b.height;
      return bSize - aSize; // –û—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–∞–ª–µ–Ω—å–∫–∏–º
    });

    // –†–∏—Å—É–µ–º –º–µ—Å—Ç–∞
    // console.log('üé≠ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –º–µ—Å—Ç:', {
    //   canvasSeatsCount: canvasSeats.length,
    //   sortedSeatsCount: sortedSeats.length,
    //   firstSeat: sortedSeats[0]
    // });
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞
    
    sortedSeats.forEach((seat) => {
      const isSelected = selectedSeats.includes(seat.id as string);
      const isHovered = hoveredSeat === seat.id;
      const isClickable = seat.isClickable === true; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–µ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
      const isActive = isSeatActive(seat); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –º–µ—Å—Ç–∞
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞

      // üé® –°–û–í–†–ï–ú–ï–ù–ù–´–ï –ö–†–ê–°–ò–í–´–ï –°–¢–ò–õ–ò
      let fillColor = '#f8f9fa';
      let strokeColor = '#dee2e6';
      let strokeWidth = 1;
      let shadow = false;
      let gradient = false;

      if (seat.objectType === 'seat' || seat.objectType === 'special_zone') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∏–ª–µ—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        if (seat.status === 'sold') {
          // üî¥ –ü—Ä–æ–¥–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ - —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç
          fillColor = '#9ca3af'; // –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
          strokeColor = 'transparent';
          strokeWidth = 0;
        } else if (seat.status === 'locked') {
          // üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ - —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç
          fillColor = '#6b7280'; // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
          strokeColor = 'transparent';
          strokeWidth = 0;
        } else if (seat.status === 'reserved') {
          // üü° –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ - —Ç–µ–º–Ω–æ-—Å–µ—Ä—ã–π —Ü–≤–µ—Ç
          fillColor = '#6b7280'; // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
          strokeColor = 'transparent';
          strokeWidth = 0;
        } else if (isClickable && seat.status === 'available') {
          // ‚ú® –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞ - —Ü–≤–µ—Ç –ø–æ —Ü–µ–Ω–µ
          if (!isActive) {
            // üö´ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—Ç–∞ (–Ω–µ –≤—ã–±—Ä–∞–Ω—ã –≤ —Ñ–∏–ª—å—Ç—Ä–µ) - —Å–µ—Ä—ã–µ
            fillColor = '#d1d5db';
            strokeColor = '#9ca3af';
            strokeWidth = 1;
          } else if (isSelected) {
            // üî• –í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ - —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
            fillColor = '#3b82f6'; // –°–∏–Ω–∏–π
            strokeColor = 'transparent';
            strokeWidth = 0;
            shadow = true;
          } else {
            // üíé –û–±—ã—á–Ω—ã–µ –º–µ—Å—Ç–∞ - —Ü–≤–µ—Ç –ø–æ —Ü–µ–Ω–µ
            fillColor = seat.priceColor || '#10b981'; // –¶–≤–µ—Ç –ø–æ —Ü–µ–Ω–µ
            strokeColor = 'transparent';
            strokeWidth = 0;
          }
          
        } else {
          // üö´ –ù–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—Ç–∞ - –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ
          fillColor = '#d1d5db';
          strokeColor = 'transparent';
          strokeWidth = 0;
        }
      } else if (seat.objectType === 'scene') {
        // üé≠ –°—Ü–µ–Ω–∞ - —Å–µ—Ä—ã–π —Ü–≤–µ—Ç
        fillColor = '#b0b0b0';
        strokeColor = 'transparent';
        strokeWidth = 0;
      } else if (seat.objectType === 'decoration') {
        // üé® –î–µ–∫–æ—Ä–∞—Ü–∏–∏ - —Å–µ—Ä—ã–π —Ü–≤–µ—Ç –±–µ–∑ –æ–±–≤–æ–¥–∫–∏
        fillColor = '#b0b0b0';
        strokeColor = 'transparent';
        strokeWidth = 0;
      } else if (seat.objectType === 'passage') {
        // –ü—Ä–æ—Ö–æ–¥—ã
        fillColor = '#6c757d';
        strokeColor = '#495057';
        strokeWidth = 1;
      } else {
        // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–æ–Ω—ã –∏ –ø—Ä–æ—á–µ–µ
        fillColor = '#f0f0f0';
        strokeColor = '#ccc';
        strokeWidth = 1;
      }

      // üé® –ü–†–ò–ú–ï–ù–Ø–ï–ú –ö–†–ê–°–ò–í–´–ï –≠–§–§–ï–ö–¢–´
      
      // –¢–µ–Ω—å –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –∏ –Ω–∞–≤–µ–¥–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç
      if (shadow) {
        ctx.shadowColor = 'rgba(0, 0, 0, 0.3)';
        ctx.shadowBlur = 8;
        ctx.shadowOffsetX = 2;
        ctx.shadowOffsetY = 2;
      } else {
        ctx.shadowColor = 'transparent';
        ctx.shadowBlur = 0;
        ctx.shadowOffsetX = 0;
        ctx.shadowOffsetY = 0;
      }
      
      // –ì—Ä–∞–¥–∏–µ–Ω—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç
      if (gradient && isSelected) {
        const gradientFill = ctx.createLinearGradient(
          seat.x, seat.y, 
          seat.x + seat.width, seat.y + seat.height
        );
        gradientFill.addColorStop(0, '#ff6b6b');
        gradientFill.addColorStop(0.5, '#ff5252');
        gradientFill.addColorStop(1, '#ff4444');
        ctx.fillStyle = gradientFill;
      } else {
      ctx.fillStyle = fillColor;
      }
      
      ctx.strokeStyle = strokeColor;
      ctx.lineWidth = strokeWidth;

      // üîç –≠—Ñ—Ñ–µ–∫—Ç —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∏–ª–∏ –≤—ã–±–æ—Ä–µ
      let scaleEffect = 1;
      const isSeatSelected = localSelectedSeats.includes(seat.id.toString());
      // –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –∫—É–ø–ª–µ–Ω–Ω—ã–µ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è
      const isReservedOrSold = seat.status === 'reserved' || seat.status === 'sold' || seat.status === 'locked';
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã —Ç–æ–∂–µ –º–æ–≥—É—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏/–≤—ã–±–æ—Ä–µ
      const shouldScale = (isHovered || isSeatSelected) && 
                         (seat.objectType === 'seat' || seat.objectType === 'special_zone') && 
                         isClickable && isActive && !isReservedOrSold;
      
      if (shouldScale) {
        // –†–∞–∑–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤
        if (seat.objectType === 'special_zone') {
          scaleEffect = 1.08; // –ú–µ–Ω—å—à–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω (8%)
        } else {
          scaleEffect = 1.15; // –û–±—ã—á–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–ª—è –º–µ—Å—Ç (15%)
        }
        
        ctx.save();
        
        // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—Ç—Ä–∞ –º–µ—Å—Ç–∞
        const centerX = seat.x + seat.width / 2;
        const centerY = seat.y + seat.height / 2;
        
        ctx.translate(centerX, centerY);
        ctx.scale(scaleEffect, scaleEffect);
        ctx.translate(-centerX, -centerY);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ–Ω—å –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        if (seat.objectType === 'special_zone') {
          // –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è —Ç–µ–Ω—å –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω
          ctx.shadowColor = 'rgba(59, 130, 246, 0.3)';
          ctx.shadowBlur = 8;
          ctx.shadowOffsetX = 0;
          ctx.shadowOffsetY = 2;
        } else {
          // –û–±—ã—á–Ω–∞—è —Ç–µ–Ω—å –¥–ª—è –º–µ—Å—Ç
          ctx.shadowColor = 'rgba(59, 130, 246, 0.4)';
          ctx.shadowBlur = 12;
          ctx.shadowOffsetX = 0;
          ctx.shadowOffsetY = 4;
        }
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º—É —ç–ª–µ–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ objectType (—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
      const objectType = seat.objectType;
      
      
      // –†–∏—Å—É–µ–º —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ seat_config (–ø–æ–ª–∏–≥–æ–Ω—ã)
      const foundSeat = seats.find(s => s.id === seat.id);
      
      
      if (foundSeat && foundSeat.svgData) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–∏–≥–æ–Ω—ã –∏–∑ seat_config
        const svgData = foundSeat.svgData;
        
        if (svgData.shape === 'circle') {
          const centerX = seat.x + seat.width / 2;
          const centerY = seat.y + seat.height / 2;
          const radius = Math.min(seat.width, seat.height) / 2 - strokeWidth;

          ctx.beginPath();
          ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
          ctx.fill();
          ctx.stroke();
        } else if (svgData.shape === 'rect') {
          const rectX = seat.x + strokeWidth / 2;
          const rectY = seat.y + strokeWidth / 2;
          const rectWidth = seat.width - strokeWidth;
          const rectHeight = seat.height - strokeWidth;

          if (svgData.rx && svgData.ry) {
            // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
            const rx = Math.min(svgData.rx, rectWidth / 2);
            const ry = Math.min(svgData.ry, rectHeight / 2);
            
            ctx.beginPath();
            ctx.roundRect(rectX, rectY, rectWidth, rectHeight, [rx, ry]);
            ctx.fill();
            ctx.stroke();
          } else {
            ctx.fillRect(rectX, rectY, rectWidth, rectHeight);
            ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);
          }
        } else if (svgData.shape === 'path' && svgData.pathData) {
          // –†–∏—Å—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SVG path
          try {
            const path2D = new Path2D(svgData.pathData);
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            ctx.save();
            
            // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º path –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –∏ –ø–æ–∑–∏—Ü–∏–∏
            if (svgData.width && svgData.height) {
              const scaleX = seat.width / svgData.width;
              const scaleY = seat.height / svgData.height;
              const offsetX = seat.x - svgData.x * scaleX;
              const offsetY = seat.y - svgData.y * scaleY;
              
              ctx.translate(offsetX, offsetY);
              ctx.scale(scaleX, scaleY);
            }
            
            ctx.fill(path2D);
            ctx.stroke(path2D);
            ctx.restore();
          } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ path:', error);
            // Fallback –∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫—É
            const rectX = seat.x + strokeWidth / 2;
            const rectY = seat.y + strokeWidth / 2;
            const rectWidth = seat.width - strokeWidth;
            const rectHeight = seat.height - strokeWidth;
            ctx.fillRect(rectX, rectY, rectWidth, rectHeight);
            ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);
          }
        } else if (svgData.shape === 'polygon' && svgData.points) {
          // –†–∏—Å—É–µ–º –ø–æ–ª–∏–≥–æ–Ω –ø–æ —Ç–æ—á–∫–∞–º
          const points = svgData.points;
          
          if (points.length >= 3) {
            ctx.beginPath();
            ctx.moveTo(seat.x + (points[0].x - svgData.x), seat.y + (points[0].y - svgData.y));
            
            for (let i = 1; i < points.length; i++) {
              ctx.lineTo(seat.x + (points[i].x - svgData.x), seat.y + (points[i].y - svgData.y));
            }
            
            ctx.closePath();
            ctx.fill();
            ctx.stroke();
          } else {
            // Fallback: –µ—Å–ª–∏ —Ç–æ—á–µ–∫ –º–∞–ª–æ, —Ä–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            const rectX = seat.x + strokeWidth / 2;
            const rectY = seat.y + strokeWidth / 2;
            const rectWidth = seat.width - strokeWidth;
            const rectHeight = seat.height - strokeWidth;
            ctx.fillRect(rectX, rectY, rectWidth, rectHeight);
            ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);
          }
        } else {
          // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º
          const rectX = seat.x + strokeWidth / 2;
          const rectY = seat.y + strokeWidth / 2;
          const rectWidth = seat.width - strokeWidth;
          const rectHeight = seat.height - strokeWidth;
          ctx.fillRect(rectX, rectY, rectWidth, rectHeight);
          ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);
        }
      } else {
        // Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ seat_config, —Ä–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        const rectX = seat.x + strokeWidth / 2;
        const rectY = seat.y + strokeWidth / 2;
        const rectWidth = seat.width - strokeWidth;
        const rectHeight = seat.height - strokeWidth;
        
        if (objectType === 'special_zone') {
          // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã - –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
          const defaultRadius = Math.min(rectWidth, rectHeight) * 0.1;
          ctx.beginPath();
          ctx.roundRect(rectX, rectY, rectWidth, rectHeight, defaultRadius);
          ctx.fill();
          ctx.stroke();
        } else {
          // –û–±—ã—á–Ω—ã–µ –º–µ—Å—Ç–∞ - –ø—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
          ctx.fillRect(rectX, rectY, rectWidth, rectHeight);
          ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);
        }
      }
      
      // –õ–µ–≥–∞—Å–∏ –∫–æ–¥ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ objectType

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      let displayText = '';
      if (seat.objectType === 'seat' && seat.isClickable && seat.place && (!seat.capacity || seat.capacity <= 1)) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–∞–ª–æ—á–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—Ç
        if (isSeatSelected && isActive && !isReservedOrSold) {
          displayText = '‚úì';
        } else {
        displayText = seat.place.toString();
        }
      } else if ((seat.objectType === 'special_zone' || (seat.objectType === 'seat' && seat.capacity && seat.capacity > 1)) && seat.isClickable) {
        // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã
        if (isSeatSelected && isActive && !isReservedOrSold) {
          displayText = '‚úì';
        } else {
          // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã –∏–∑ zone_config –ø–æ section
          const zone = zones.find(z => z.id === seat.section);
          displayText = zone ? zone.name : seat.section || '–ó–û–ù–ê';
        }
      } else if (seat.objectType === 'scene') {
        displayText = '–°–¶–ï–ù–ê';
      } else if (seat.objectType === 'decoration') {
        // –î–µ–∫–æ—Ä–∞—Ü–∏–∏ –±–µ–∑ –Ω–∞–¥–ø–∏—Å–∏
        displayText = '';
      } else if (seat.objectType === 'passage') {
        displayText = '–ü–†–û–•–û–î';
      }
      
      if (displayText) {
        // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        if (seat.objectType === 'scene') {
          ctx.fillStyle = '#808080'; // –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π –¥–ª—è —Å—Ü–µ–Ω—ã
        } else if (seat.objectType === 'seat' || seat.objectType === 'special_zone') {
          ctx.fillStyle = '#ffffff'; // –ë–µ–ª—ã–π –¥–ª—è –≤—Å–µ—Ö –º–µ—Å—Ç (—Ü–∏—Ñ—Ä—ã –∏ –≥–∞–ª–æ—á–∫–∏)
        } else {
        ctx.fillStyle = '#333'; // –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        // –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        let fontSize;
        if (shouldScale && isActive) {
          // –ü—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –∏–ª–∏ –≤—ã–±–æ—Ä–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—Ç - —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
          if (seat.objectType === 'special_zone') {
            // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω - —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤ 2 —Ä–∞–∑–∞ –º–µ–Ω—å—à–µ (30% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞)
            fontSize = Math.min(seat.width, seat.height) * 0.3;
          } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –º–µ—Å—Ç - –æ–±—ã—á–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ (50% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞)
            fontSize = Math.min(seat.width, seat.height) * 0.5;
          }
          ctx.font = `bold ${fontSize}px Arial`;
        } else {
          // –û–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
          if (seat.objectType === 'special_zone') {
            // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω - –Ω–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —à—Ä–∏—Ñ—Ç
            fontSize = Math.min(seat.width, seat.height) * 0.2;
          } else {
            // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –º–µ—Å—Ç - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            fontSize = Math.min(seat.width, seat.height) / 4;
          }
          ctx.font = `${fontSize}px Arial`;
        }
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        
        const textX = seat.x + seat.width / 2;
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –≤—ã—Å–æ—Ç–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–æ–π
        const textY = seat.y + seat.height / 2 + (fontSize * 0.1);
        
        ctx.fillText(displayText, textX, textY);
      }

      // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ canvas –ø–æ—Å–ª–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è
      if (shouldScale) {
        ctx.restore();
      }
    });

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
    ctx.restore();

    // –†–∏—Å—É–µ–º —Ä–∞–º–∫—É –≤—ã–¥–µ–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞)
    if (isSelecting && interactionMode === InteractionMode.SELECTION && selectionStart && selectionEnd) {
      const selectionRect = {
        x: Math.min(selectionStart.x, selectionEnd.x),
        y: Math.min(selectionStart.y, selectionEnd.y),
        width: Math.abs(selectionEnd.x - selectionStart.x),
        height: Math.abs(selectionEnd.y - selectionStart.y)
      };

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã canvas —Å —É—á–µ—Ç–æ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
      const canvasRect = {
        x: (selectionRect.x - transform.offsetX) / transform.scale,
        y: (selectionRect.y - transform.offsetY) / transform.scale,
        width: selectionRect.width / transform.scale,
        height: selectionRect.height / transform.scale
      };

      // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞
      const previewSelectedSeats = canvasSeats.filter(seat => 
        (seat.objectType === 'seat' || seat.objectType === 'special_zone') &&
        seat.x < canvasRect.x + canvasRect.width &&
        seat.x + seat.width > canvasRect.x &&
        seat.y < canvasRect.y + canvasRect.height &&
        seat.y + seat.height > canvasRect.y
      );

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
      ctx.save();
      ctx.translate(transform.offsetX, transform.offsetY);
      ctx.scale(transform.scale, transform.scale);

      // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –º–µ—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
      previewSelectedSeats.forEach(seat => {
        ctx.fillStyle = 'rgba(0, 123, 255, 0.3)';
        ctx.strokeStyle = '#007bff';
        ctx.lineWidth = 2;
        
        // –†–µ–Ω–¥–µ—Ä–∏–º preview –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ seat_config
        const foundSeat = seats.find(s => s.id === seat.id);
        
        if (foundSeat && foundSeat.svgData) {
          const svgData = foundSeat.svgData;
          
          if (svgData.shape === 'circle') {
            const centerX = seat.x + seat.width / 2;
            const centerY = seat.y + seat.height / 2;
            const radius = Math.min(seat.width, seat.height) / 2 - 1;
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
            ctx.fill();
            ctx.stroke();
          } else if (svgData.shape === 'rect' && svgData.rx && svgData.ry) {
            // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
            const rx = Math.min(svgData.rx, seat.width / 2);
            const ry = Math.min(svgData.ry, seat.height / 2);
            ctx.beginPath();
            ctx.roundRect(seat.x, seat.y, seat.width, seat.height, [rx, ry]);
            ctx.fill();
            ctx.stroke();
          } else {
            // –û–±—ã—á–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            ctx.fillRect(seat.x, seat.y, seat.width, seat.height);
            ctx.strokeRect(seat.x, seat.y, seat.width, seat.height);
          }
        } else {
          // Fallback: –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ seat_config
          if (seat.objectType === 'special_zone') {
            // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–æ–Ω—ã - –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
            const defaultRadius = Math.min(seat.width, seat.height) * 0.1;
            ctx.beginPath();
            ctx.roundRect(seat.x, seat.y, seat.width, seat.height, defaultRadius);
            ctx.fill();
            ctx.stroke();
          } else {
            // –û–±—ã—á–Ω—ã–µ –º–µ—Å—Ç–∞ - –ø—Ä–æ—Å—Ç–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            ctx.fillRect(seat.x, seat.y, seat.width, seat.height);
            ctx.strokeRect(seat.x, seat.y, seat.width, seat.height);
          }
        }
      });

      ctx.restore();

      // –†–∏—Å—É–µ–º —Å–∞–º—É —Ä–∞–º–∫—É –≤—ã–¥–µ–ª–µ–Ω–∏—è
      ctx.strokeStyle = '#007bff';
      ctx.lineWidth = 2;
      ctx.setLineDash([5, 5]);
      ctx.strokeRect(selectionRect.x, selectionRect.y, selectionRect.width, selectionRect.height);
      
      // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ —Ä–∞–º–∫–∏
      ctx.fillStyle = 'rgba(0, 123, 255, 0.05)';
      ctx.fillRect(selectionRect.x, selectionRect.y, selectionRect.width, selectionRect.height);
      ctx.setLineDash([]);
    }
  }, [canvasSeats, selectedSeats, hoveredSeat, width, height, transform, isSelecting, selectionStart, selectionEnd, interactionMode, getSeatColor]);

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑—É–º–æ–º
  const zoomIn = useCallback(() => {
    setTransform(prev => ({
      ...prev,
      scale: Math.min(5, prev.scale * 1.2)
    }));
  }, []);

  const zoomOut = useCallback(() => {
    setTransform(prev => ({
      ...prev,
      scale: Math.max(0.1, prev.scale / 1.2)
    }));
  }, []);

  const fitToView = useCallback(() => {
    if (canvasSeats.length === 0) return;

    const minX = Math.min(...canvasSeats.map(s => s.x));
    const minY = Math.min(...canvasSeats.map(s => s.y));
    const maxX = Math.max(...canvasSeats.map(s => s.x + s.width));
    const maxY = Math.max(...canvasSeats.map(s => s.y + s.height));

    const contentWidth = maxX - minX;
    const contentHeight = maxY - minY;

    const scaleX = (canvasSize.width - 40) / contentWidth;
    const scaleY = (canvasSize.height - 40) / contentHeight;
    const newScale = Math.min(scaleX, scaleY, 1);

    const centerX = (minX + maxX) / 2;
    const centerY = (minY + maxY) / 2;

    setTransform({
      scale: newScale,
      offsetX: canvasSize.width / 2 - centerX * newScale,
      offsetY: canvasSize.height / 2 - centerY * newScale
    });
  }, [canvasSeats, canvasSize]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –º–µ—Å—Ç
  const getVisibleSeats = useCallback(() => {
    if (!canvasRef.current || canvasSeats.length === 0) return [];

    const canvas = canvasRef.current;
    const rect = canvas.getBoundingClientRect();
    
    return canvasSeats.filter(seat => {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞ –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã canvas
      const seatCanvasX = seat.x * transform.scale + transform.offsetX;
      const seatCanvasY = seat.y * transform.scale + transform.offsetY;
      const seatCanvasWidth = seat.width * transform.scale;
      const seatCanvasHeight = seat.height * transform.scale;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è –ª–∏ –º–µ—Å—Ç–æ —Å –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç—å—é
      return !(seatCanvasX + seatCanvasWidth < 0 || 
               seatCanvasX > rect.width || 
               seatCanvasY + seatCanvasHeight < 0 || 
               seatCanvasY > rect.height);
    });
  }, [canvasSeats, transform, canvasSize]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –º–µ—Å—Ç–∞ –∫ —Ü–µ–Ω—Ç—Ä—É —ç–∫—Ä–∞–Ω–∞
  const findNearestSeatToCenter = useCallback(() => {
    if (canvasSeats.length === 0) return null;

    const centerX = canvasSize.width / 2;
    const centerY = canvasSize.height / 2;
    
    let nearestSeat = null;
    let minDistance = Infinity;
    
    canvasSeats.forEach(seat => {
      const seatCenterX = seat.x + seat.width / 2;
      const seatCenterY = seat.y + seat.height / 2;
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã canvas
      const seatCanvasX = seatCenterX * transform.scale + transform.offsetX;
      const seatCanvasY = seatCenterY * transform.scale + transform.offsetY;
      
      const distance = Math.sqrt(
        Math.pow(seatCanvasX - centerX, 2) + 
        Math.pow(seatCanvasY - centerY, 2)
      );
      
      if (distance < minDistance) {
        minDistance = distance;
        nearestSeat = seat;
      }
    });
    
    return nearestSeat;
  }, [canvasSeats, transform, canvasSize]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–≤–Ω–æ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –º–µ—Å—Ç—É
  const returnToNearestSeat = useCallback(() => {
    const nearestSeat = findNearestSeatToCenter() as CanvasSeat | null;
    if (!nearestSeat) return;

    const seatCenterX = nearestSeat.x + nearestSeat.width / 2;
    const seatCenterY = nearestSeat.y + nearestSeat.height / 2;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ offset –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞
    const targetOffsetX = canvasSize.width / 2 - seatCenterX * transform.scale;
    const targetOffsetY = canvasSize.height / 2 - seatCenterY * transform.scale;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
    setIsAnimating(true);
    setAnimationTarget({ offsetX: targetOffsetX, offsetY: targetOffsetY });
  }, [findNearestSeatToCenter, transform.scale, canvasSize]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –º—ã—à–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Safari)
  const getCanvasCoordinates = useCallback((event: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current;
    if (!canvas) return { x: 0, y: 0 };
    
    // –ü–æ–ª—É—á–∞–µ–º bounding rect
    const rect = canvas.getBoundingClientRect();
    
    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞ canvas
    const canvasWidth = canvas.width;
    const canvasHeight = canvas.height;
    const displayWidth = rect.width;
    const displayHeight = rect.height;
    
    // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ canvas —ç–ª–µ–º–µ–Ω—Ç–∞
    const clientX = event.clientX - rect.left;
    const clientY = event.clientY - rect.top;
    
    // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —Ä–∞–∑–º–µ—Ä–∞–º canvas
    const scaleX = canvasWidth / displayWidth;
    const scaleY = canvasHeight / displayHeight;
    
    const result = {
      x: clientX * scaleX,
      y: clientY * scaleY
    };
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Safari
    if (navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome')) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
    }
    
    return result;
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏
  const handleMouseDown = useCallback((event: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const { x, y } = getCanvasCoordinates(event);

    if (interactionMode === InteractionMode.SELECTION) {
      // –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–º–∫–æ–π
      setIsSelecting(true);
      setSelectionStart({ x, y });
      setSelectionEnd({ x, y });
    } else if (interactionMode === InteractionMode.ZOOM_PAN) {
      // –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ
      setIsDragging(true);
      setDragStart({ x: event.clientX - transform.offsetX, y: event.clientY - transform.offsetY });
    }
  }, [interactionMode, transform, getCanvasCoordinates]);

  const handleMouseMove = useCallback((event: React.MouseEvent<HTMLCanvasElement>) => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const { x, y } = getCanvasCoordinates(event);

    if (isSelecting && interactionMode === InteractionMode.SELECTION) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–º–∫—É –≤—ã–¥–µ–ª–µ–Ω–∏—è
      setSelectionEnd({ x, y });
    } else if (isDragging && interactionMode === InteractionMode.ZOOM_PAN) {
      // –ü–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ
      const newOffsetX = event.clientX - dragStart.x;
      const newOffsetY = event.clientY - dragStart.y;
      
      setTransform(prev => ({
        ...prev,
        offsetX: newOffsetX,
        offsetY: newOffsetY
      }));
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–∞
      const canvasX = (x - transform.offsetX) / transform.scale;
      const canvasY = (y - transform.offsetY) / transform.scale;

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Safari
      if (navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome')) {
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      }

      const hoveredSeatElement = canvasSeats.find(seat =>
        canvasX >= seat.x && canvasX <= seat.x + seat.width &&
        canvasY >= seat.y && canvasY <= seat.y + seat.height &&
        (seat.objectType === 'seat' || seat.objectType === 'special_zone') &&
        seat.isClickable === true && // –¢–æ–ª—å–∫–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã
        isSeatActive(seat) // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–µ—Å—Ç–∞ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–¥—Å–≤–µ—á–µ–Ω—ã
      );

      const newHoveredId = hoveredSeatElement?.id as string || null;
      
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è Safari
      if (navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome')) {
        if (hoveredSeatElement) {
          // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
        } else {
          // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
        }
      }
      
      if (newHoveredId !== hoveredSeat) {
        setHoveredSeat(newHoveredId);
        canvas.style.cursor = newHoveredId ? 'pointer' : (isDragging ? 'grabbing' : (interactionMode === InteractionMode.SELECTION ? 'crosshair' : 'grab'));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
        if (newHoveredId) {
          const tooltipContent = createTooltipContent(newHoveredId);
          // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
          setTooltip({
            visible: true,
            x: event.clientX + 10,
            y: event.clientY - 10,
            content: tooltipContent
          });
        } else {
          // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
          setTooltip(prev => ({ ...prev, visible: false }));
        }
      }
    }
  }, [isSelecting, isDragging, interactionMode, transform, canvasSeats, hoveredSeat, dragStart, createTooltipContent, getCanvasCoordinates]);

  const handleMouseUp = useCallback((event: React.MouseEvent<HTMLCanvasElement>) => {
    if (isSelecting && interactionMode === InteractionMode.SELECTION && selectionStart) {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–º–∫–æ–π
      const canvas = canvasRef.current;
      if (!canvas) return;

      const { x: endX, y: endY } = getCanvasCoordinates(event);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–º–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è (–º–∏–Ω–∏–º—É–º 5px)
      const minSelectionSize = 5;
      if (Math.abs(endX - selectionStart.x) > minSelectionSize || Math.abs(endY - selectionStart.y) > minSelectionSize) {
        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö canvas
        const selectionRect = {
          x: Math.min(selectionStart.x, endX),
          y: Math.min(selectionStart.y, endY),
          width: Math.abs(endX - selectionStart.x),
          height: Math.abs(endY - selectionStart.y)
        };

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã canvas —Å —É—á–µ—Ç–æ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
        const canvasRect = {
          x: (selectionRect.x - transform.offsetX) / transform.scale,
          y: (selectionRect.y - transform.offsetY) / transform.scale,
          width: selectionRect.width / transform.scale,
          height: selectionRect.height / transform.scale
        };

        // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–∞ –≤ –æ–±–ª–∞—Å—Ç–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
        const newSelectedSeatIds = canvasSeats
          .filter(seat => 
            (seat.objectType === 'seat' || seat.objectType === 'special_zone') &&
            seat.x < canvasRect.x + canvasRect.width &&
            seat.x + seat.width > canvasRect.x &&
            seat.y < canvasRect.y + canvasRect.height &&
            seat.y + seat.height > canvasRect.y
          )
          .map(seat => seat.id as string);

        if (newSelectedSeatIds.length > 0 && onSeatsSelected) {
          // –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è:
          // 1. –ï—Å–ª–∏ –≤—Å–µ –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞ —É–∂–µ –≤—ã–¥–µ–ª–µ–Ω—ã - —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
          // 2. –ò–Ω–∞—á–µ –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤—ã–¥–µ–ª–µ–Ω–∏—é
          const allAlreadySelected = newSelectedSeatIds.every(id => selectedSeats.includes(id));
          
          if (allAlreadySelected && newSelectedSeatIds.length === selectedSeats.length) {
            // –ï—Å–ª–∏ –≤—ã–¥–µ–ª–∏–ª–∏ —Ç–æ—á–Ω–æ —Ç–µ –∂–µ –º–µ—Å—Ç–∞ - –æ—á–∏—â–∞–µ–º
            onSeatsSelected([]);
          } else if (allAlreadySelected) {
            // –ï—Å–ª–∏ –≤—Å–µ –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞ —É–∂–µ –≤—ã–¥–µ–ª–µ–Ω—ã, –Ω–æ –µ—Å—Ç—å –∏ –¥—Ä—É–≥–∏–µ - —É–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ
            const remainingSeats = selectedSeats.filter(id => !newSelectedSeatIds.includes(id));
            onSeatsSelected(remainingSeats);
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –≤—ã–¥–µ–ª–µ–Ω–∏—é
            const combinedSelection = [...new Set([...selectedSeats, ...newSelectedSeatIds])];
            onSeatsSelected(combinedSelection);
          }
        }
      }

      setIsSelecting(false);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ä–µ–∂–∏–º –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
      if (onModeChange) {
        onModeChange(InteractionMode.ZOOM_PAN);
      }
    }

    setIsDragging(false);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –º–µ—Å—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    if (interactionMode === InteractionMode.ZOOM_PAN) {
      setTimeout(() => {
        const visibleSeats = getVisibleSeats();
        if (visibleSeats.length === 0) {
          // –ï—Å–ª–∏ –Ω–µ—Ç –≤–∏–¥–∏–º—ã—Ö –º–µ—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –±–ª–∏–∂–∞–π—à–µ–º—É
          returnToNearestSeat();
        }
      }, 100);
    }
  }, [isSelecting, interactionMode, selectionStart, transform, canvasSeats, onSeatsSelected, onModeChange, selectedSeats, getVisibleSeats, returnToNearestSeat, getCanvasCoordinates]);

  // üÜï –ù–û–í–´–ô –ü–†–û–°–¢–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–õ–ò–ö–û–í
  const handleCanvasClick = useCallback((event: React.MouseEvent<HTMLCanvasElement>) => {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
    
    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    if (isDragging || isSelecting) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      return;
    }
    
    const canvas = canvasRef.current;
    if (!canvas) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞
    const { x: canvasX, y: canvasY } = getCanvasCoordinates(event);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –º–∞—Å—à—Ç–∞–±–∞ –∏ —Å–¥–≤–∏–≥–∞
    const worldX = (canvasX - transform.offsetX) / transform.scale;
    const worldY = (canvasY - transform.offsetY) / transform.scale;
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏

    // –ò—â–µ–º –º–µ—Å—Ç–æ –ø–æ–¥ –∫–ª–∏–∫–æ–º
    let foundSeat = null;
    for (const seat of canvasSeats) {
      if ((seat.objectType === 'seat' || seat.objectType === 'special_zone') && 
          seat.isClickable === true && 
          isSeatActive(seat)) {
        const inBounds = worldX >= seat.x && 
                        worldX <= seat.x + seat.width && 
                        worldY >= seat.y && 
                        worldY <= seat.y + seat.height;
        
        if (inBounds) {
          foundSeat = seat;
          break;
        }
      }
    }

    if (foundSeat) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω–æ–π
      if (foundSeat.objectType === 'special_zone') {
        // –î–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
        const seatId = foundSeat.id.toString();
        const hallSeat = hallSeats.find(hs => hs.seatId === seatId);
        
        if (hallSeat) {
          // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã
          const zone = zones.find(z => z.id === hallSeat.section);
          const zoneName = zone ? zone.name : hallSeat.section || '–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∑–æ–Ω–∞';
          
          // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
          let price = 0;
          let currency = 'RUB';
          const seatPrice = seatPrices.find(sp => sp.seatId === seatId);
          if (seatPrice) {
            const priceInfo = prices.find(p => p.id === seatPrice.priceId);
            if (priceInfo) {
              price = priceInfo.value;
              currency = priceInfo.currency;
            }
          }
          
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä –ø–æ —Ü–µ–Ω—Ç—Ä—É –∫–∞–Ω–≤–∞—Å–∞
          const canvas = canvasRef.current;
          if (canvas) {
            const rect = canvas.getBoundingClientRect();
            const centerX = rect.left + rect.width / 2;
            const centerY = rect.top + rect.height / 2;
            
            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ + 1 (–æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—ä–µ–∫—Ç)
            const availableVirtualTickets = virtualTickets.filter(vt => 
              vt.seatId && vt.seatId.startsWith(`${seatId}_seat_`) && (vt.status === 'available' || vt.status === 'reserved')
            );
            const availableCapacity = availableVirtualTickets.length + 1; // +1 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã
            
            
            
            setSpecialZoneSelector({
              isVisible: true,
              position: { x: centerX, y: centerY },
              zoneName,
              capacity: availableCapacity, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
              price,
              currency,
              seatId
            });
          }
        }
      } else {
        // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–µ—Å—Ç
        setLocalSelectedSeats(prev => {
          const seatId = foundSeat.id.toString();
          const isCurrentlySelected = prev.includes(seatId);
          let newSelectedSeats;
          
          if (isCurrentlySelected) {
            // –£–±–∏—Ä–∞–µ–º –º–µ—Å—Ç–æ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö
            newSelectedSeats = prev.filter(id => id !== seatId);
          } else {
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
            newSelectedSeats = [...prev, seatId];
          }
          
          // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
          if (onSeatsSelected) {
            onSeatsSelected(newSelectedSeats);
          }
          
          return newSelectedSeats;
        });
        
        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        if (onSeatClick) {
          onSeatClick(foundSeat);
        }
      }
    } else {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
    }
  }, [canvasSeats, onSeatClick, onSeatsSelected, transform, isDragging, isSelecting, getCanvasCoordinates, isSeatActive, hallSeats, zones, seatPrices, prices, seats]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã
  const handleSpecialZoneAddToCart = useCallback((quantity: number) => {
    if (!specialZoneSelector) return;
    
    // –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã
    const virtualSeats: string[] = [];
    for (let i = 0; i < quantity; i++) {
      virtualSeats.push(`${specialZoneSelector.seatId}-virtual-${i + 1}`);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –º–µ—Å—Ç–∞ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º
    setLocalSelectedSeats(prev => {
      const newSelectedSeats = [...prev, ...virtualSeats];
      
      // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å–ø–∏—Å–∫–æ–º
      if (onSeatsSelected) {
        onSeatsSelected(newSelectedSeats);
      }
      
      return newSelectedSeats;
    });
    
    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–ª–µ–∫—Ç–æ—Ä
    setSpecialZoneSelector(null);
  }, [specialZoneSelector, onSeatsSelected]);

  const handleSpecialZoneCancel = useCallback(() => {
    setSpecialZoneSelector(null);
  }, []);

  const handleWheel = useCallback((event: React.WheelEvent<HTMLCanvasElement>) => {
    if (interactionMode !== InteractionMode.ZOOM_PAN) return;
    
    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ preventDefault
    if (event.cancelable) {
    event.preventDefault();
    }
    
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const rect = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rect.left;
    const mouseY = event.clientY - rect.top;
    
    const scaleFactor = event.deltaY > 0 ? 0.9 : 1.1;
    const newScale = Math.max(0.1, Math.min(5, transform.scale * scaleFactor));
    
    // –ó—É–º –∫ —Ç–æ—á–∫–µ –∫—É—Ä—Å–æ—Ä–∞
    const newOffsetX = mouseX - (mouseX - transform.offsetX) * (newScale / transform.scale);
    const newOffsetY = mouseY - (mouseY - transform.offsetY) * (newScale / transform.scale);
    
    setTransform({
      scale: newScale,
      offsetX: newOffsetX,
      offsetY: newOffsetY
    });
  }, [transform, interactionMode]);


  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    // console.log('üîÑ –ü–µ—Ä–µ—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–π –º–µ—Å—Ç...');
    const newCanvasSeats = calculateSeatPositions();
    // console.log('üìç –ù–æ–≤—ã–µ canvas –º–µ—Å—Ç–∞:', {
    //   count: newCanvasSeats.length,
    //   firstSeat: newCanvasSeats[0]
    // });
    setCanvasSeats(newCanvasSeats);
  }, [seats, hallSeats, width, height]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (canvasSeats.length > 0) {
      setTimeout(() => {
        fitToView();
      }, 100);
    }
  }, [canvasSeats.length]);

  // –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫ –±–ª–∏–∂–∞–π—à–µ–º—É –º–µ—Å—Ç—É
  useEffect(() => {
    if (!isAnimating || !animationTarget) return;

    const startTime = Date.now();
    const duration = 500; // 500ms –∞–Ω–∏–º–∞—Ü–∏—è
    const startOffsetX = transform.offsetX;
    const startOffsetY = transform.offsetY;
    const deltaX = animationTarget.offsetX - startOffsetX;
    const deltaY = animationTarget.offsetY - startOffsetY;

    const animate = () => {
      const elapsed = Date.now() - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º easing —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      const easeOutCubic = 1 - Math.pow(1 - progress, 3);
      
      const currentOffsetX = startOffsetX + deltaX * easeOutCubic;
      const currentOffsetY = startOffsetY + deltaY * easeOutCubic;
      
      setTransform(prev => ({
        ...prev,
        offsetX: currentOffsetX,
        offsetY: currentOffsetY
      }));
      
      if (progress < 1) {
        requestAnimationFrame(animate);
      } else {
        setIsAnimating(false);
        setAnimationTarget(null);
      }
    };

    requestAnimationFrame(animate);
  }, [isAnimating, animationTarget, transform.offsetX, transform.offsetY]);

  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
  useEffect(() => {
    renderCanvas();
  }, [canvasSeats, selectedSeats, transform, canvasSize, renderCanvas]);

  // –û—Ç–¥–µ–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è hover —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –≤–µ—Å—å –∫–∞–Ω–≤–∞—Å)
  useEffect(() => {
    if (hoveredSeat) {
      // –¢–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –∏ –ø–æ–¥—Å–∫–∞–∑–∫—É, –Ω–µ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–∞–Ω–≤–∞—Å
      const canvas = canvasRef.current;
      if (canvas) {
        canvas.style.cursor = 'pointer';
      }
    }
  }, [hoveredSeat]);

  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏)
  useEffect(() => {
    if (tooltip.visible && tooltip.content) {
      // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–±—Ä–∞–Ω–æ –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã –∫–æ–Ω—Å–æ–ª–∏
    }
  }, [tooltip.visible, tooltip.content, tooltip.x, tooltip.y]);

  return (
    <div className="offline-price-canvas">
      
      <div className="offline-price-canvas__canvas-container">
      <canvas
        ref={canvasRef}
        width={canvasSize.width}
        height={canvasSize.height}
        onClick={handleCanvasClick}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={() => {
          setHoveredSeat(null);
          setIsDragging(false);
          setIsSelecting(false);
          setTooltip(prev => ({ ...prev, visible: false }));
        }}
        onWheel={handleWheel}
        className="offline-price-canvas__canvas"
        style={{ 
          cursor: interactionMode === InteractionMode.SELECTION ? 'crosshair' : 
                 (isDragging ? 'grabbing' : 'grab') 
        }}
      />
      
      {/* –ö–Ω–æ–ø–∫–∏ –∑—É–º–∞ –Ω–∞ –∫–∞–Ω–≤–∞—Å–µ */}
      <div className="offline-price-canvas__zoom-buttons">
        <button onClick={zoomIn} className="offline-price-canvas__zoom-btn" title="–£–≤–µ–ª–∏—á–∏—Ç—å">+</button>
        <button onClick={zoomOut} className="offline-price-canvas__zoom-btn" title="–£–º–µ–Ω—å—à–∏—Ç—å">-</button>
      </div>
      </div>
      
      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ - —Ä–µ–Ω–¥–µ—Ä–∏–º –≤ body —á–µ—Ä–µ–∑ Portal */}
      {tooltip.visible && createPortal(
        <div 
          style={{
            position: 'fixed',
            left: tooltip.x,
            top: tooltip.y,
            zIndex: 99999,
            pointerEvents: 'none',
            background: 'white',
            color: '#2c3e50',
            padding: '12px 16px',
            borderRadius: '8px',
            fontSize: '14px',
            lineHeight: '1.4',
            maxWidth: '200px',
            boxShadow: '0 8px 24px rgba(0, 0, 0, 0.15)',
            border: '2px solid #3b82f6',
            fontFamily: 'Arial, sans-serif',
            whiteSpace: 'pre-line'
          }}
        >
          {tooltip.content.split('\\n').map((line, index) => (
            <div key={index} style={{ margin: '2px 0' }}>{line}</div>
          ))}
        </div>,
        document.body
      )}
      
      {/* –°–µ–ª–µ–∫—Ç–æ—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã */}
      {specialZoneSelector && (
        <SpecialZoneSelector
          isVisible={specialZoneSelector!.isVisible}
          position={specialZoneSelector!.position}
          zoneName={specialZoneSelector!.zoneName}
          capacity={specialZoneSelector!.capacity}
          price={specialZoneSelector!.price}
          currency={specialZoneSelector!.currency}
          onAddToCart={handleSpecialZoneAddToCart}
          onCancel={handleSpecialZoneCancel}
        />
      )}
    </div>
  );
};
