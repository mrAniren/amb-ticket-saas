const QRCode = require('qrcode');
const path = require('path');
const fs = require('fs').promises;

class QRCodeGenerator {
  constructor() {
    this.outputDir = path.join(__dirname, '../../uploads/tickets/qr');
    this.ensureOutputDir();
  }

  async ensureOutputDir() {
    try {
      await fs.mkdir(this.outputDir, { recursive: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è QR-–∫–æ–¥–æ–≤:', error);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –¥–ª—è –±–∏–ª–µ—Ç–∞
   * @param {string} ticketId - ID –±–∏–ª–µ—Ç–∞
   * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @returns {Promise<string>} - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É QR-–∫–æ–¥–∞
   */
  async generateQRCode(ticketId, options = {}) {
    try {
      const {
        size = 200,
        margin = 2,
        color = {
          dark: '#000000',
          light: '#FFFFFF'
        },
        errorCorrectionLevel = 'M'
      } = options;

      // –°–æ–∑–¥–∞–µ–º QR-–∫–æ–¥ –∫–∞–∫ –±—É—Ñ–µ—Ä
      const qrBuffer = await QRCode.toBuffer(ticketId, {
        type: 'png',
        width: size,
        margin: margin,
        color: color,
        errorCorrectionLevel: errorCorrectionLevel
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
      const filename = `qr_${ticketId}.png`;
      const filepath = path.join(this.outputDir, filename);
      
      await fs.writeFile(filepath, qrBuffer);
      
      console.log(`‚úÖ QR-–∫–æ–¥ —Å–æ–∑–¥–∞–Ω: ${filepath}`);
      return filepath;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥: ${error.message}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –∫–∞–∫ base64 —Å—Ç—Ä–æ–∫—É
   * @param {string} ticketId - ID –±–∏–ª–µ—Ç–∞
   * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @returns {Promise<string>} - Base64 —Å—Ç—Ä–æ–∫–∞ QR-–∫–æ–¥–∞
   */
  async generateQRCodeBase64(ticketId, options = {}) {
    try {
      const {
        size = 200,
        margin = 2,
        color = {
          dark: '#000000',
          light: '#FFFFFF'
        },
        errorCorrectionLevel = 'M'
      } = options;

      const qrBase64 = await QRCode.toDataURL(ticketId, {
        type: 'png',
        width: size,
        margin: margin,
        color: color,
        errorCorrectionLevel: errorCorrectionLevel
      });

      return qrBase64;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ base64:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥: ${error.message}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ PDF
   * @param {string} ticketId - ID –±–∏–ª–µ—Ç–∞
   * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   * @returns {Promise<Buffer>} - –ë—É—Ñ–µ—Ä —Å QR-–∫–æ–¥–æ–º
   */
  async generateQRCodeBuffer(ticketId, options = {}) {
    try {
      const {
        size = 200,
        margin = 2,
        color = {
          dark: '#000000',
          light: '#FFFFFF'
        },
        errorCorrectionLevel = 'M'
      } = options;

      const qrBuffer = await QRCode.toBuffer(ticketId, {
        type: 'png',
        width: size,
        margin: margin,
        color: color,
        errorCorrectionLevel: errorCorrectionLevel
      });

      return qrBuffer;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ buffer:', error);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QR-–∫–æ–¥: ${error.message}`);
    }
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç QR-–∫–æ–¥ —Ñ–∞–π–ª
   * @param {string} ticketId - ID –±–∏–ª–µ—Ç–∞
   * @returns {Promise<boolean>} - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è
   */
  async deleteQRCode(ticketId) {
    try {
      const filename = `qr_${ticketId}.png`;
      const filepath = path.join(this.outputDir, filename);
      
      await fs.unlink(filepath);
      console.log(`‚úÖ QR-–∫–æ–¥ —É–¥–∞–ª–µ–Ω: ${filepath}`);
      return true;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è QR-–∫–æ–¥–∞:', error);
      return false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ QR-–∫–æ–¥–∞
   * @param {string} ticketId - ID –±–∏–ª–µ—Ç–∞
   * @returns {Promise<boolean>} - –°—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
   */
  async qrCodeExists(ticketId) {
    try {
      const filename = `qr_${ticketId}.png`;
      const filepath = path.join(this.outputDir, filename);
      
      await fs.access(filepath);
      return true;

    } catch (error) {
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ QR-–∫–æ–¥—É
   * @param {string} ticketId - ID –±–∏–ª–µ—Ç–∞
   * @returns {string} - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
   */
  getQRCodePath(ticketId) {
    const filename = `qr_${ticketId}.png`;
    return path.join(this.outputDir, filename);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ QR-–∫–æ–¥—ã (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π)
   * @param {number} daysOld - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
   * @returns {Promise<number>} - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
   */
  async cleanupOldQRCodes(daysOld = 30) {
    try {
      const files = await fs.readdir(this.outputDir);
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysOld);
      
      let deletedCount = 0;
      
      for (const file of files) {
        if (file.startsWith('qr_') && file.endsWith('.png')) {
          const filepath = path.join(this.outputDir, file);
          const stats = await fs.stat(filepath);
          
          if (stats.mtime < cutoffDate) {
            await fs.unlink(filepath);
            deletedCount++;
            console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π QR-–∫–æ–¥: ${file}`);
          }
        }
      }
      
      console.log(`‚úÖ –û—á–∏—â–µ–Ω–æ QR-–∫–æ–¥–æ–≤: ${deletedCount}`);
      return deletedCount;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ QR-–∫–æ–¥–æ–≤:', error);
      return 0;
    }
  }
}

module.exports = QRCodeGenerator;
