const express = require('express');
const fs = require('fs').promises;
const fsSync = require('fs');
const path = require('path');
const { authenticateToken } = require('../middleware/auth');
const { uploadFields } = require('../middleware/upload');
const { validateHall, validateId } = require('../middleware/validation');
const Hall = require('../models/Hall');
const { mongoose } = require('../config/mongodb');
const SVGParser = require('../utils/svgParser');

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞, –ø–æ–∑–∏—Ü–∏–∏ –∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
 * @param {Object} seat - –æ–±—ä–µ–∫—Ç –º–µ—Å—Ç–∞ –∏–∑ –ø–∞—Ä—Å–µ—Ä–∞
 * @param {number} index - –∏–Ω–¥–µ–∫—Å —ç–ª–µ–º–µ–Ω—Ç–∞
 * @returns {string} —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
 */
function determineObjectType(seat, index) {
  const { width, height, x, y, svgElementId, svgTagName } = seat;
  const elementId = (svgElementId || '').toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ ID —ç–ª–µ–º–µ–Ω—Ç–∞
  if (elementId.includes('scene') || elementId.includes('stage')) {
    return 'scene';
  }
  
  if (elementId.includes('decoration') || elementId.includes('decor')) {
    return 'decoration';
  }
  
  if (elementId.includes('passage') || elementId.includes('aisle') || 
      elementId.includes('corridor')) {
    return 'passage';
  }
  
  if (elementId.includes('tech') || elementId.includes('technical') ||
      elementId.includes('service')) {
    return 'technical_zone';
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É
  const area = width * height;
  
  // –û—á–µ–Ω—å –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã (—Å—Ü–µ–Ω–∞, –±–æ–ª—å—à–∏–µ –¥–µ–∫–æ—Ä–∞—Ü–∏–∏)
  if (area > 15000 || width > 250 || height > 250) {
    // –ï—Å–ª–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ - –≤–µ—Ä–æ—è—Ç–Ω–æ —Å—Ü–µ–Ω–∞
    if (y < 150) {
      return 'scene';
    }
    return 'decoration';
  }
  
  // –î–ª–∏–Ω–Ω—ã–µ —É–∑–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã (–ø—Ä–æ—Ö–æ–¥—ã)
  if ((width > 150 && height < 25) || (height > 150 && width < 25)) {
    return 'passage';
  }
  
  // –°—Ä–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –∑–æ–Ω–∞–º–∏
  if (area > 2000 && area < 10000) {
    return 'technical_zone';
  }
  
  // –ú–∞–ª–µ–Ω—å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–º —Å –º–µ—Å—Ç–æ - —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –º–µ—Å—Ç–∞
  if (area < 2000 && width < 80 && height < 80) {
    return 'seat';
  }
  
  // –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ - –≤–µ—Ä–æ—è—Ç–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ
  if (area > 500) {
    return 'technical_zone';
  }
  
  // –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º (–Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º)
  return 'unknown';
}

const router = express.Router();

// –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
router.use(authenticateToken);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ MongoDB –∏–ª–∏ —Ñ–∞–π–ª—ã
const isMongoConnected = () => {
  return mongoose.connection.readyState === 1;
};

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ObjectId
const isValidObjectId = (id) => {
  return mongoose.Types.ObjectId.isValid(id) && String(new mongoose.Types.ObjectId(id)) === id;
};





async function createHallData(hallData) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ª–∞–º–∏.');
  }
  const hall = new Hall(hallData);
  return await hall.save();
}

async function updateHallData(id, updateData) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ª–∞–º–∏.');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ObjectId
  if (!isValidObjectId(id)) {
    return null;
  }
  
  return await Hall.findByIdAndUpdate(id, updateData, { new: true });
}

async function deleteHallData(id) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ª–∞–º–∏.');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ObjectId
  if (!isValidObjectId(id)) {
    return null;
  }
  
  return await Hall.findByIdAndDelete(id);
}

// GET /api/halls - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–ª–æ–≤
router.get('/', async (req, res) => {
  try {
    const hallsData = await getAllHalls();
    
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    const halls = hallsData.map(hall => ({
      id: hall._id || hall.id,
      name: hall.name,
      city: hall.city,
      address: hall.address,
      description: hall.description,
      capacity: hall.capacity,
      photo_url: hall.photo_file || hall.photo_url,
      svg_file: hall.svg_file,
      svg_url: hall.svg_file, // –ú–∞–ø–ø–∏–Ω–≥ svg_file -> svg_url –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      seat_count: hall.metadata?.totalSeats || hall.seat_count || 0,
      last_modified: hall.updatedAt || hall.updated_at,
      created_at: hall.createdAt || hall.created_at
    }));

    res.json({
      halls,
      total: halls.length
    });
  } catch (error) {
    console.error('‚ùå Error fetching halls:', error);
    res.status(500).json({ error: 'Failed to fetch halls' });
  }
});

// GET /api/halls/:id - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ª
router.get('/:id', validateId, async (req, res) => {
  try {
    const { id } = req.params;
    
    const hall = await getHallById(id);
    
    if (!hall) {
      return res.status(404).json({ error: 'Hall not found' });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    const formattedHall = {
      id: hall._id || hall.id,
      name: hall.name,
      city: hall.city,
      address: hall.address,
      description: hall.description,
      capacity: hall.capacity,
      currency: hall.currency, // –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
      photo_file: hall.photo_file || hall.photo_url,
      photo_url: hall.photo_file || hall.photo_url, // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      svg_file: hall.svg_file,
      svg_url: hall.svg_file, // –ú–∞–ø–ø–∏–Ω–≥ svg_file -> svg_url –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      seat_config: hall.seat_config,
      zone_config: hall.zone_config,
      seat_count: hall.metadata?.totalSeats || hall.seat_count || 0,
      seats: hall.seats || [], // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Å—Ç–∞—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      created_at: hall.createdAt || hall.created_at,
      updated_at: hall.updatedAt || hall.updated_at
    };

    console.log('üîç –î–∞–Ω–Ω—ã–µ –∑–∞–ª–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:', {
      id: formattedHall.id,
      svg_file: formattedHall.svg_file,
      svg_url: formattedHall.svg_url,
      hasFile: !!hall.svg_file,
      hasSeats: !!formattedHall.seats,
      seatsCount: formattedHall.seats?.length || 0,
      seatConfigLength: hall.seat_config?.length || 0,
      rawSeats: Array.isArray(hall.seats) ? hall.seats.slice(0, 2) : [], // –ü–µ—Ä–≤—ã–µ 2 –º–µ—Å—Ç–∞ –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
      sampleSeatConfig: hall.seat_config?.substring(0, 100) || 'empty'
    });

    res.json({ hall: formattedHall });
  } catch (error) {
    console.error('‚ùå Error fetching hall:', {
      id: req.params.id,
      error: error.message,
      stack: error.stack,
      mongoConnected: mongoose.connection.readyState === 1
    });
    res.status(500).json({ error: 'Failed to fetch hall' });
  }
});

// MongoDB CRUD —Ñ—É–Ω–∫—Ü–∏–∏
async function getAllHalls() {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  }

  try {
    const halls = await Hall.find({ isActive: true }).sort({ name: 1 });
    console.log('‚úÖ –ó–∞–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ MongoDB:', halls.length);
    return halls;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ª–æ–≤ –∏–∑ MongoDB:', error);
    throw error;
  }
}

async function getHallById(id) {
  console.log('üîç –ü–æ–∏—Å–∫ –∑–∞–ª–∞ –≤ MongoDB:', { id, type: typeof id });
  
  if (!isMongoConnected()) {
    console.log('‚ùå MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  }

  if (!isValidObjectId(id)) {
    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ObjectId:', id);
    return null;
  }

  try {
    const hall = await Hall.findById(id);
    console.log('‚úÖ –ó–∞–ª –Ω–∞–π–¥–µ–Ω –≤ MongoDB:', hall ? hall._id : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    return hall;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∑–∞–ª–∞ –≤ MongoDB:', error);
    throw error;
  }
}

async function createHallData(hallData) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  }

  try {
    const newHall = new Hall(hallData);
    const savedHall = await newHall.save();
    console.log('‚úÖ –ó–∞–ª —Å–æ–∑–¥–∞–Ω –≤ MongoDB:', savedHall._id);
    return savedHall;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ª–∞ –≤ MongoDB:', error);
    throw error;
  }
}

async function updateHallData(id, updateData) {
  if (!isMongoConnected()) {
    throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  }

  if (!isValidObjectId(id)) {
    return null;
  }

  try {
    console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ª–∞ –≤ MongoDB:', {
      id: id,
      updateData: updateData,
      updateDataKeys: Object.keys(updateData)
    });
    
    const updatedHall = await Hall.findByIdAndUpdate(id, updateData, { new: true });
    console.log('‚úÖ –ó–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω –≤ MongoDB:', updatedHall ? updatedHall._id : '–Ω–µ –Ω–∞–π–¥–µ–Ω');
    
    if (updatedHall) {
      console.log('üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∑–∞–ª–∞:', {
        capacity: updatedHall.capacity,
        seat_config_length: updatedHall.seat_config ? updatedHall.seat_config.length : 0,
        zone_config_length: updatedHall.zone_config ? updatedHall.zone_config.length : 0
      });
    }
    
    return updatedHall;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ª–∞ –≤ MongoDB:', error);
    throw error;
  }
}


// POST /api/halls - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ª
router.post('/', uploadFields, validateHall, async (req, res) => {
  try {
    const { name, country, city, address, timezone } = req.body;
    const photoFile = req.files?.photo?.[0];
    const svgFile = req.files?.svg?.[0];

    console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ª–∞:', { 
      name, 
      country,
      city, 
      address,
      timezone,
      hasPhoto: !!photoFile, 
      hasSvg: !!svgFile,
      photoFilename: photoFile?.filename,
      svgFilename: svgFile?.filename,
      photoPath: photoFile ? `/uploads/photos/${photoFile.filename}` : null,
      svgPath: `/uploads/svg/${svgFile?.filename}`,
      files: req.files
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –Ω–∞ –¥–∏—Å–∫–µ
    if (svgFile) {
      const svgFullPath = path.join(__dirname, '../../uploads/svg', svgFile.filename);
      const svgExists = fsSync.existsSync(svgFullPath);
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SVG —Ñ–∞–π–ª–∞:', {
        filename: svgFile.filename,
        fullPath: svgFullPath,
        exists: svgExists,
        size: svgFile.size,
        mimetype: svgFile.mimetype
      });
    }

    if (photoFile) {
      const photoFullPath = path.join(__dirname, '../../uploads/photos', photoFile.filename);
      const photoExists = fsSync.existsSync(photoFullPath);
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ —Ñ–∞–π–ª–∞:', {
        filename: photoFile.filename,
        fullPath: photoFullPath,
        exists: photoExists,
        size: photoFile.size,
        mimetype: photoFile.mimetype
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!svgFile) {
      return res.status(400).json({ error: 'SVG —Ñ–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ª–∞' });
    }

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ª–∞ (–±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ SVG)
    const hallData = {
      name,
      country,
      city,
      address: address || null,
      timezone,
      description: address || null, // –ò—Å–ø–æ–ª—å–∑—É–µ–º address –∫–∞–∫ description
      capacity: 100, // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ
      photo_file: photoFile ? `/uploads/photos/${photoFile.filename}` : null,
      svg_file: `/uploads/svg/${svgFile.filename}`, // SVG —Ñ–∞–π–ª —Ç–µ–ø–µ—Ä—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
      seat_config: '[]', // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
      zone_config: '[]' // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
    };

    // SVG –ø–∞—Ä—Å–∏–Ω–≥ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ - —Å–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–ª–∞
    console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ª–∞ –±–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ SVG');
    
    const seats = []; // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –ø–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
    const zones = [{   // –ë–∞–∑–æ–≤–∞—è –∑–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      id: 1,
      name: '–ü–∞—Ä—Ç–µ—Ä',
      color: '#F8D013',
      is_default: true,
      description: '–ó–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
      section: 'parterre'
    }];
    
    console.log('üèõÔ∏è –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è –∑–æ–Ω–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ª–∞');
      
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ª–∞ —Å –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    hallData.seat_config = JSON.stringify(seats);
    hallData.zone_config = JSON.stringify(zones);
    hallData.capacity = 0; // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ª –≤ MongoDB
    const newHall = await createHallData(hallData);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    const formattedHall = {
      id: newHall._id,
      name: newHall.name,
      country: newHall.country,
      city: newHall.city,
      address: newHall.address,
      timezone: newHall.timezone,
      description: newHall.description,
      capacity: newHall.capacity,
      photo_url: newHall.photo_file,
      svg_url: newHall.svg_file,
      seat_config: newHall.seat_config,
      zone_config: newHall.zone_config,
      seat_count: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
      seats: [], // –ü–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ
      zones: newHall.zones, // –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –∏–∑ –º–æ–¥–µ–ª–∏
      created_at: newHall.createdAt,
      updated_at: newHall.updatedAt
    };

    console.log('‚úÖ –ó–∞–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω (–±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞ SVG):', {
      id: formattedHall.id,
      name: formattedHall.name,
      capacity: formattedHall.capacity,
      zonesCount: zones.length,
      zones: zones.map(z => ({ id: z.id, name: z.name, section: z.section })),
      svg_url: formattedHall.svg_url,
      photo_url: formattedHall.photo_url,
      note: 'SVG –ø–∞—Ä—Å–∏–Ω–≥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ'
    });
    
    res.status(201).json({ hall: formattedHall });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ª–∞:', error);
    res.status(500).json({ error: 'Failed to create hall' });
  }
});

// PUT /api/halls/:id - –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ª
router.put('/:id', validateId, uploadFields, validateHall, async (req, res) => {
  try {
    const { id } = req.params;
    const { name, country, city, address, timezone } = req.body;
    const photoFile = req.files?.photo?.[0];
    const svgFile = req.files?.svg?.[0];

    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ª–∞:', { id, name, country, city, address, timezone, hasPhoto: !!photoFile, hasSvg: !!svgFile });

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {};
    if (name) updateData.name = name;
    if (country !== undefined) updateData.country = country;
    if (city !== undefined) updateData.city = city;
    if (address !== undefined) updateData.address = address;
    if (timezone !== undefined) updateData.timezone = timezone;
    if (photoFile) updateData.photo_file = `/uploads/photos/${photoFile.filename}`;
    if (svgFile) updateData.svg_file = `/uploads/svg/${svgFile.filename}`;

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ª –≤ MongoDB
    const updatedHall = await updateHallData(id, updateData);
    
    if (!updatedHall) {
      return res.status(404).json({ error: 'Hall not found' });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    const formattedHall = {
      id: updatedHall._id,
      name: updatedHall.name,
      country: updatedHall.country,
      city: updatedHall.city,
      address: updatedHall.address,
      timezone: updatedHall.timezone,
      description: updatedHall.description,
      capacity: updatedHall.capacity,
      photo_url: updatedHall.photo_file,
      svg_url: updatedHall.svg_file,
      seat_config: updatedHall.seat_config,
      zone_config: updatedHall.zone_config,
      seat_count: updatedHall.metadata?.totalSeats || 0,
      zones: updatedHall.zones,
      created_at: updatedHall.createdAt,
      updated_at: updatedHall.updatedAt
    };

    console.log('‚úÖ –ó–∞–ª —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', formattedHall.id);
    res.json({ hall: formattedHall });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ª–∞:', error);
    res.status(500).json({ error: 'Failed to update hall' });
  }
});

// PUT /api/halls/:id/config - –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–ª–∞ (–º–µ—Å—Ç–∞ –∏ –∑–æ–Ω—ã)
router.put('/:id/config', validateId, async (req, res) => {
  try {
    const { id } = req.params;
    const { seat_config, zone_config, capacity, currency } = req.body;

    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–ª–∞:', { 
      id, 
      hasSeatConfig: !!seat_config, 
      hasZoneConfig: !!zone_config,
      capacity: capacity,
      capacityType: typeof capacity
    });
    
    // –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', {
      body: req.body,
      seat_config_length: seat_config ? seat_config.length : 0,
      zone_config_length: zone_config ? zone_config.length : 0,
      capacity_value: capacity
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!seat_config && !zone_config) {
      return res.status(400).json({ error: 'seat_config or zone_config is required' });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è JSON
    if (seat_config) {
      try {
        JSON.parse(seat_config);
      } catch (error) {
        return res.status(400).json({ error: 'Invalid seat_config JSON' });
      }
    }

    if (zone_config) {
      try {
        JSON.parse(zone_config);
      } catch (error) {
        return res.status(400).json({ error: 'Invalid zone_config JSON' });
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const updateData = {};
    if (seat_config) updateData.seat_config = seat_config;
    if (zone_config) updateData.zone_config = zone_config;
    if (capacity !== undefined) updateData.capacity = capacity;
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∏ –Ω–µ –ø—É—Å—Ç–∞—è
    if (currency !== undefined && currency !== null && currency !== '') {
      updateData.currency = currency;
    }
    
    console.log('üíæ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ MongoDB:', updateData);

    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç (–º–µ—Å—Ç–∞ + —Å–ø–µ—Ü. –∑–æ–Ω—ã)
    if (seat_config) {
      try {
        const config = JSON.parse(seat_config);
        if (config.seats && Array.isArray(config.seats)) {
          const regularSeats = config.seats.filter(seat => 
            seat.objectType === 'seat' || seat.objectType === undefined
          ).length;
          
          const specialZones = config.seats.filter(seat => 
            seat.objectType === 'special_zone'
          );
          
          const specialZoneCapacity = specialZones.reduce((sum, zone) => 
            sum + (zone.capacity || 0), 0
          );
          
          const totalCapacity = regularSeats + specialZoneCapacity;
          updateData['metadata.totalSeats'] = totalCapacity;
        }
      } catch (error) {
        console.error('Error parsing seat_config for counting:', error);
      }
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ª –≤ MongoDB
    const updatedHall = await updateHallData(id, updateData);
    
    if (!updatedHall) {
      return res.status(404).json({ error: 'Hall not found' });
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
    const formattedHall = {
      id: updatedHall._id,
      name: updatedHall.name,
      country: updatedHall.country,
      city: updatedHall.city,
      address: updatedHall.address,
      timezone: updatedHall.timezone,
      description: updatedHall.description,
      capacity: updatedHall.capacity,
      photo_url: updatedHall.photo_file,
      svg_url: updatedHall.svg_file,
      seat_config: updatedHall.seat_config,
      zone_config: updatedHall.zone_config,
      seat_count: updatedHall.metadata?.totalSeats || 0,
      zones: updatedHall.zones,
      created_at: updatedHall.createdAt,
      updated_at: updatedHall.updatedAt
    };

    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', formattedHall.id);
    res.json({ hall: formattedHall });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–∞–ª–∞:', error);
    res.status(500).json({ error: 'Failed to update hall config' });
  }
});

// PUT /api/halls/:id/svg - –æ–±–Ω–æ–≤–∏—Ç—å SVG —Ñ–∞–π–ª –∑–∞–ª–∞
router.put('/:id/svg', validateId, uploadFields, async (req, res) => {
  try {
    const { id } = req.params;
    const svgFile = req.files?.svg?.[0];

    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SVG –∑–∞–ª–∞:', { id, hasFile: !!svgFile });

    if (!svgFile) {
      return res.status(400).json({ error: 'SVG file is required' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ SVG
    if (svgFile.mimetype !== 'image/svg+xml') {
      return res.status(400).json({ error: 'File must be an SVG' });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º SVG —Ñ–∞–π–ª –≤ MongoDB
    const updateData = {
      svg_file: `/uploads/svg/${svgFile.filename}`
    };

    const updatedHall = await updateHallData(id, updateData);
    
    if (!updatedHall) {
      return res.status(404).json({ error: 'Hall not found' });
    }

    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
    const svgFileInfo = {
      id: Math.floor(Math.random() * 1000),
      filename: svgFile.filename,
      path: `/uploads/svg/${svgFile.filename}`,
      mimetype: svgFile.mimetype,
      size: svgFile.size,
      type: 'svg',
      created_at: new Date().toISOString()
    };

    console.log('‚úÖ SVG –∑–∞–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedHall._id);
    res.json({ 
      message: 'SVG file updated successfully',
      svg_file: svgFileInfo,
      svg_url: `/uploads/svg/${svgFile.filename}`
    });
  } catch (error) {
    console.error('Error updating hall SVG:', error);
    res.status(500).json({ error: 'Failed to update SVG file' });
  }
});

// DELETE /api/halls/:id - —É–¥–∞–ª–∏—Ç—å –∑–∞–ª
router.delete('/:id', validateId, async (req, res) => {
  try {
    const { id } = req.params;

    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ª–∞:', { id });

    // –£–¥–∞–ª—è–µ–º –∑–∞–ª –∏–∑ MongoDB
    const deletedHall = await deleteHallData(id);
    
    if (!deletedHall) {
      return res.status(404).json({ error: 'Hall not found' });
    }

    // –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if (deletedHall.photo_file) {
      const photoPath = path.join(__dirname, '../../uploads', path.basename(deletedHall.photo_file));
      try {
        if (fsSync.existsSync(photoPath)) {
          await fs.unlink(photoPath);
        }
      } catch (err) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ —Ñ–∞–π–ª:', err.message);
      }
    }

    if (deletedHall.svg_file) {
      const svgPath = path.join(__dirname, '../../uploads', path.basename(deletedHall.svg_file));
      try {
        if (fsSync.existsSync(svgPath)) {
          await fs.unlink(svgPath);
        }
      } catch (err) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å SVG —Ñ–∞–π–ª:', err.message);
      }
    }

    console.log('‚úÖ –ó–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:', deletedHall._id);
    res.json({ 
      message: 'Hall deleted successfully',
      id: deletedHall._id
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ª–∞:', error);
    res.status(500).json({ error: 'Failed to delete hall' });
  }
});

module.exports = router;