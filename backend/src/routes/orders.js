const express = require('express');
const Order = require('../models/Order');
const Session = require('../models/Session');
const PromoCode = require('../models/PromoCode');
const Hall = require('../models/Hall');
const { authenticateToken } = require('../middleware/auth');
const { mongoose } = require('../config/mongodb');

const router = express.Router();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
const isMongoConnected = () => {
  return mongoose.connection.readyState === 1;
};

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
const validatePromoCode = async (code, subtotal) => {
  try {
    const promoCode = await PromoCode.findOne({ 
      code: code.toUpperCase(),
      isActive: true 
    });
    
    if (!promoCode) {
      return { valid: false, message: '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
    }
    
    if (promoCode.expiresAt && promoCode.expiresAt < new Date()) {
      return { valid: false, message: '–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫' };
    }
    
    if (promoCode.usageLimit && promoCode.usageCount >= promoCode.usageLimit) {
      return { valid: false, message: '–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω' };
    }
    
    if (promoCode.minOrderAmount && subtotal < promoCode.minOrderAmount) {
      return { 
        valid: false, 
        message: `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: ${promoCode.minOrderAmount} ‚ÇΩ` 
      };
    }
    
    let discount = 0;
    if (promoCode.discountType === 'percentage') {
      discount = Math.round((subtotal * promoCode.discountValue) / 100);
      if (promoCode.maxDiscountAmount) {
        discount = Math.min(discount, promoCode.maxDiscountAmount);
      }
    } else if (promoCode.discountType === 'fixed') {
      discount = Math.min(promoCode.discountValue, subtotal);
    }
    
    return { 
      valid: true, 
      discount, 
      promoCodeData: promoCode 
    };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
    return { valid: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞' };
  }
};

// POST /api/orders - –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
router.post('/', async (req, res) => {
  try {
    const { 
      sessionId, 
      customerName, 
      customerPhone, 
      customerEmail, 
      selectedSeatIds, // –ò–∑–º–µ–Ω–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å –º–∞—Å—Å–∏–≤ ID –º–µ—Å—Ç
      specialZoneData, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω
      promoCode,
      attribution, // UTM-–º–µ—Ç–∫–∏ –¥–ª—è –∞—Ç—Ä–∏–±—É—Ü–∏–∏
      widgetId, // ID –≤–∏–¥–∂–µ—Ç–∞
      isInvitation, // –§–ª–∞–≥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
      notes // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
    } = req.body;
    
    if (!isMongoConnected()) {
      throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    console.log(`üìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Å–µ–∞–Ω—Å–∞ ${sessionId}:`, {
      customerName,
      customerPhone,
      customerEmail,
      selectedSeatIds,
      specialZoneData,
      promoCode,
      attribution,
      widgetId
    });
    
    console.log('üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!sessionId || !customerName || !customerPhone || !customerEmail || !selectedSeatIds || selectedSeatIds.length === 0) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ–∞–Ω—Å–∞
    const session = await Session.findById(sessionId);
    if (!session) {
      return res.status(404).json({
        success: false,
        message: '–°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç—ã –≤ Session.tickets
    const selectedTickets = [];
    
    for (const seatId of selectedSeatIds) {
      const ticket = session.tickets.find(t => t.seatId === seatId);
      
      console.log(`üîç –ü–æ–∏—Å–∫ –±–∏–ª–µ—Ç–∞ –¥–ª—è ${seatId}:`, {
        found: !!ticket,
        ticket: ticket ? {
          seatId: ticket.seatId,
          status: ticket.status,
          capacity: ticket.capacity,
          objectType: ticket.objectType
        } : null,
        totalTickets: session.tickets.length,
        firstFewTickets: session.tickets.slice(0, 3).map(t => ({
          seatId: t.seatId,
          status: t.status,
          capacity: t.capacity,
          objectType: t.objectType
        }))
      });
      
      if (!ticket) {
        return res.status(400).json({
          success: false,
          message: `–ú–µ—Å—Ç–æ ${seatId} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`
        });
      }
      
      if (ticket.status !== 'available') {
        return res.status(400).json({
          success: false,
          message: `–ú–µ—Å—Ç–æ ${seatId} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ (—Å—Ç–∞—Ç—É—Å: ${ticket.status})`
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω–æ–π
      if (specialZoneData && specialZoneData[seatId]) {
        const requestedSeats = specialZoneData[seatId];
        
        console.log(`üé™ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∑–æ–Ω—É ${seatId}: –∑–∞–ø—Ä–æ—à–µ–Ω–æ ${requestedSeats} –º–µ—Å—Ç`);
        
        // –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –±–∏–ª–µ—Ç—ã –¥–ª—è —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω—ã
        const virtualTickets = session.tickets.filter(t => 
          t.seatId.startsWith(`${seatId}_seat_`) && t.status === 'available'
        );
        
        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤: ${virtualTickets.length}`, 
          virtualTickets.map(t => ({ seatId: t.seatId, status: t.status }))
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
        if (virtualTickets.length < requestedSeats) {
          return res.status(400).json({
            success: false,
            message: `–í —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –∑–æ–Ω–µ ${seatId} –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ ${virtualTickets.length} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –º–µ—Å—Ç, –∑–∞–ø—Ä–æ—à–µ–Ω–æ ${requestedSeats}`
          });
        }
        
        // –ë—Ä–æ–Ω–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –±–∏–ª–µ—Ç—ã
        const selectedVirtualTickets = virtualTickets.slice(0, requestedSeats);
        selectedVirtualTickets.forEach(virtualTicket => {
          selectedTickets.push(virtualTicket);
        });
        
        console.log(`‚úÖ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ ${selectedVirtualTickets.length} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤:`, 
          selectedVirtualTickets.map(t => t.seatId)
        );
      } else {
        selectedTickets.push(ticket);
      }
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
    let subtotal = 0;
    
    console.log('üí∞ –†–∞—Å—á–µ—Ç subtotal:', {
      selectedTickets: selectedTickets.map(t => ({ seatId: t.seatId, price: t.price }))
    });
    
    // –í—Å–µ –±–∏–ª–µ—Ç—ã (–≤–∫–ª—é—á–∞—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ)
    subtotal = selectedTickets.reduce((sum, ticket) => sum + (ticket.price || 0), 0);
    
    console.log('üí∞ –ò—Ç–æ–≥–æ–≤—ã–π subtotal:', { subtotal });
    let discount = 0;
    let promoCodeData = null;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (promoCode && promoCode.trim()) {
      const promoValidation = await validatePromoCode(promoCode.trim(), subtotal);
      
      if (!promoValidation.valid) {
        return res.status(400).json({
          success: false,
          message: promoValidation.message
        });
      }
      
      discount = promoValidation.discount;
      promoCodeData = promoValidation.promoCodeData;
    }
    
    const total = subtotal - discount;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π MongoDB)
    let newOrder;
    
    try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –±–∏–ª–µ—Ç–æ–≤
        console.log('üîç –°–æ–∑–¥–∞–µ–º ticketData –¥–ª—è –∑–∞–∫–∞–∑–∞:', {
          selectedTickets: selectedTickets.map(t => ({
            seatId: t.seatId,
            row: t.row,
            place: t.place,
            section: t.section,
            zone: t.zone,
            price: t.price
          }))
        });
        
        const orderData = {
          sessionId,
          customerName: customerName.trim(),
          customerPhone: customerPhone.trim(),
          customerEmail: customerEmail.trim().toLowerCase(),
          ticketData: selectedTickets.map(ticket => ({
            seatId: ticket.seatId,
            row: ticket.row || 0,
            place: ticket.place || 0,
            zone: ticket.section || ticket.zone || '–û–±—â–∞—è –∑–æ–Ω–∞',
            price: ticket.price || 0,
            currency: ticket.currency || 'RUB',
            priceColor: ticket.priceColor || '#cccccc',
            x: ticket.x || 0,
            y: ticket.y || 0,
            width: ticket.width || 20,
            height: ticket.height || 20
          })),
          subtotal,
          discount,
          total,
          promoCode: promoCode ? promoCode.trim() : undefined,
          promoCodeId: promoCodeData ? promoCodeData._id : undefined,
          status: req.body.status || 'pending', // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏–ª–∏ pending –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          attribution: attribution || {}, // UTM-–º–µ—Ç–∫–∏ –¥–ª—è –∞—Ç—Ä–∏–±—É—Ü–∏–∏
          widgetId: widgetId, // ID –≤–∏–¥–∂–µ—Ç–∞
          isInvitation: isInvitation || false, // –§–ª–∞–≥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
          notes: notes ? notes.trim() : undefined // –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        };
        
        newOrder = await Order.create(orderData);
        console.log(`üìã –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: ${newOrder.status}`);
        
        // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏–ª–∏ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –æ—Ñ–ª–∞–π–Ω –∑–∞–∫–∞–∑, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∏–ª–µ—Ç—ã
        if (isInvitation || newOrder.status === 'paid') {
          try {
            const { generateTicketsForOrder } = require('../utils/ticketGenerator');
            await generateTicketsForOrder(newOrder._id);
            console.log(`‚úÖ –ë–∏–ª–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞: ${newOrder._id}`);
            
            // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ 'paid'
            if (isInvitation) {
              newOrder.status = 'paid';
              newOrder.paidAt = new Date();
              await newOrder.save();
              console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'paid': ${newOrder._id}`);
            }
            // –î–ª—è –æ—Ñ–ª–∞–π–Ω –∑–∞–∫–∞–∑–æ–≤ —Å—Ç–∞—Ç—É—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ 'paid'
          } catch (ticketError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–æ–≤:', ticketError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–æ–≤
          }
        }
        
        // –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –±–∏–ª–µ—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
        selectedTickets.forEach(ticket => {
          // –í—Å–µ –±–∏–ª–µ—Ç—ã (–≤–∫–ª—é—á–∞—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ) —Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞–∫–æ–≤–æ
          ticket.status = 'reserved';
          // –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ –∑–∞–∫–∞–∑–∞, –∏–Ω–∞—á–µ 15 –º–∏–Ω—É—Ç
          ticket.reservedUntil = newOrder.expiresAt || new Date(Date.now() + 15 * 60 * 1000);
          ticket.orderId = newOrder._id;
          ticket.customerInfo = {
            name: customerName.trim(),
            phone: customerPhone.trim(),
            email: customerEmail.trim().toLowerCase()
          };
          
          console.log(`üîí –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –±–∏–ª–µ—Ç: ${ticket.seatId}`);
        });
        
        await session.save();
        console.log(`üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ capacity –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–æ–Ω`);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        if (promoCodeData) {
          await PromoCode.findByIdAndUpdate(
            promoCodeData._id,
            { $inc: { usageCount: 1 } }
          );
        }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:', error);
      throw error;
    }
    
    console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ${newOrder._id}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    const updatedOrder = await Order.findById(newOrder._id);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const formattedOrder = {
      id: updatedOrder._id,
      sessionId: updatedOrder.sessionId,
      customerName: updatedOrder.customerName,
      customerPhone: updatedOrder.customerPhone,
      customerEmail: updatedOrder.customerEmail,
      tickets: updatedOrder.ticketData,
      subtotal: updatedOrder.subtotal,
      discount: updatedOrder.discount,
      total: updatedOrder.total,
      promoCode: updatedOrder.promoCode,
      status: updatedOrder.status,
      orderNumber: updatedOrder.orderNumber,
      createdAt: updatedOrder.createdAt,
      expiresAt: updatedOrder.expiresAt,
      paidAt: updatedOrder.paidAt,
      isInvitation: updatedOrder.isInvitation
    };
    
    res.status(201).json({
      success: true,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      order: formattedOrder
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// GET /api/orders - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã (—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π)
router.get('/', authenticateToken, async (req, res) => {
  try {
    if (!isMongoConnected()) {
      throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    const { page = 1, limit = 20, status, sessionId } = req.query;
    const skip = (page - 1) * limit;
    
    // –°—Ç—Ä–æ–∏–º —Ñ–∏–ª—å—Ç—Ä
    const filter = {};
    if (status) filter.status = status;
    if (sessionId) filter.sessionId = sessionId;
    
    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤:`, { filter, page, limit });
    
    const orders = await Order.find(filter)
      .populate('sessionId', 'date time eventId hallId')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));
    
    const total = await Order.countDocuments(filter);
    
    const formattedOrders = orders.map(order => ({
      id: order._id,
      sessionId: order.sessionId,
      customerName: order.customerName,
      customerPhone: order.customerPhone,
      customerEmail: order.customerEmail,
      ticketsCount: order.ticketData ? order.ticketData.length : 0,
      subtotal: order.subtotal,
      discount: order.discount,
      total: order.total,
      promoCode: order.promoCode,
      status: order.status,
      createdAt: order.createdAt,
      expiresAt: order.expiresAt
    }));
    
    res.json({
      success: true,
      orders: formattedOrders,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / limit)
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤'
    });
  }
});

// GET /api/orders/:id - –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
router.get('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    
    if (!isMongoConnected()) {
      throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    console.log(`üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: ${id}`);
    
    const order = await Order.findById(id)
      .populate('sessionId', 'date time eventId hallId');
    
    if (!order) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    const formattedOrder = {
      id: order._id,
      sessionId: order.sessionId,
      customerName: order.customerName,
      customerPhone: order.customerPhone,
      customerEmail: order.customerEmail,
      tickets: order.ticketData || [],
      subtotal: order.subtotal,
      discount: order.discount,
      total: order.total,
      promoCode: order.promoCode,
      status: order.status,
      createdAt: order.createdAt,
      expiresAt: order.expiresAt
    };
    
    res.json({
      success: true,
      order: formattedOrder
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞'
    });
  }
});

// PATCH /api/orders/:id/status - –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
router.patch('/:id/status', async (req, res) => {
  try {
    const { id } = req.params;
    const { status } = req.body;
    
    if (!isMongoConnected()) {
      throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    console.log(`üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ ${id} –Ω–∞ ${status}`);
    
    const allowedStatuses = ['pending', 'paid', 'cancelled', 'expired'];
    if (!allowedStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å'
      });
    }
    
    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const session_db = await mongoose.startSession();
    
    try {
      await session_db.withTransaction(async () => {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        await Order.findByIdAndUpdate(
          id,
          { status },
          { session: session_db }
        );
        
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç—Å—è, –æ–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–µ—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
        if (status === 'paid') {
          const session = await Session.findById(order.sessionId);
          if (session) {
            // –ü–æ–º–µ—á–∞–µ–º –±–∏–ª–µ—Ç—ã –∫–∞–∫ –ø—Ä–æ–¥–∞–Ω–Ω—ã–µ
            session.tickets.forEach(ticket => {
              if (ticket.orderId && ticket.orderId.toString() === id) {
                ticket.status = 'sold';
                delete ticket.reservedUntil;
              }
            });
            await session.save({ session: session_db });
          }
        }
        
        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è, –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–∏–ª–µ—Ç—ã
        if (status === 'cancelled' || status === 'expired') {
          const session = await Session.findById(order.sessionId);
          if (session) {
            // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –±–∏–ª–µ—Ç—ã
            session.tickets.forEach(ticket => {
              if (ticket.orderId && ticket.orderId.toString() === id) {
                ticket.status = 'available';
                delete ticket.orderId;
                delete ticket.reservedUntil;
                delete ticket.customerInfo;
              }
            });
            await session.save({ session: session_db });
          }
        }
      });
    } finally {
      await session_db.endSession();
    }
    
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω: ${id} -> ${status}`);
    
    res.json({
      success: true,
      message: `–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${status}`
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞'
    });
  }
});

// POST /api/orders/:id/pay - –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑
router.post('/:id/pay', async (req, res) => {
  try {
    const { id } = req.params;
    const { paymentMethod = 'cash' } = req.body;
    
    if (!isMongoConnected()) {
      throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    console.log(`üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ${id}, –º–µ—Ç–æ–¥: ${paymentMethod}`);
    
    const order = await Order.findById(id);
    if (!order) {
      console.log(`‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${id}`);
      return res.status(404).json({
        success: false,
        message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    console.log(`üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: ${order.status}, –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${order.expiresAt}`);
    
    if (order.status !== 'pending') {
      console.log(`‚ùå –ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω. –°—Ç–∞—Ç—É—Å: ${order.status}`);
      return res.status(400).json({
        success: false,
        message: '–ó–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–ª–∞—á–µ–Ω'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ –∑–∞–∫–∞–∑
    if (order.expiresAt < new Date()) {
      await Order.findByIdAndUpdate(id, { status: 'expired' });
      return res.status(400).json({
        success: false,
        message: '–í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –∏—Å—Ç–µ–∫–ª–æ'
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ–ø–ª–∞—á–µ–Ω"
    const now = new Date();
    await Order.findByIdAndUpdate(id, { 
      status: 'paid', 
      paymentMethod,
      paidAt: now,
      updatedAt: now
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∏–ª–µ—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
    const session = await Session.findById(order.sessionId);
    if (session) {
      session.tickets.forEach(ticket => {
        if (ticket.orderId && ticket.orderId.toString() === id) {
          ticket.status = 'sold';
          ticket.soldAt = now;
          delete ticket.reservedUntil;
        }
      });
      await session.save();
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF –±–∏–ª–µ—Ç—ã
    try {
      const { generateTicketsForOrder } = require('../utils/ticketGenerator');
      await generateTicketsForOrder(id);
      console.log(`‚úÖ –ë–∏–ª–µ—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞: ${id}`);
    } catch (ticketError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–æ–≤:', ticketError);
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–ª–µ—Ç–æ–≤
    }
    
    console.log(`‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω: ${id}`);
    
    res.json({
      success: true,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞'
    });
  }
});

// PATCH /api/orders/:id - –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑
router.patch('/:id', async (req, res) => {
  try {
    const { id } = req.params;
    const updateData = req.body;
    
    if (!isMongoConnected()) {
      throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    console.log(`üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ${id}:`, updateData);
    
    // –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑
    const order = await Order.findById(id);
    if (!order) {
      return res.status(404).json({
        success: false,
        message: '–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω'
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
    const updateFields = {
      ...updateData,
      updatedAt: new Date()
    };
    
    // –ï—Å–ª–∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Å temporary –Ω–∞ pending, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è
    if (updateData.status === 'pending' && order.status === 'temporary') {
      updateFields.expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 –º–∏–Ω—É—Ç
    }
    
    const updatedOrder = await Order.findByIdAndUpdate(
      id,
      updateFields,
      { new: true }
    );
    
    console.log('‚úÖ –ó–∞–∫–∞–∑ –æ–±–Ω–æ–≤–ª–µ–Ω:', updatedOrder._id);
    
    res.json({
      success: true,
      order: updatedOrder,
      message: '–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω'
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

// POST /api/orders/cleanup-expired - –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–∫–∞–∑—ã
router.post('/cleanup-expired', async (req, res) => {
  try {
    if (!isMongoConnected()) {
      throw new Error('MongoDB –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    }
    
    console.log('üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤...');
    
    const now = new Date();
    
    // –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ç–µ–∫—à–∏–µ –∑–∞–∫–∞–∑—ã
    const expiredOrders = await Order.find({
      status: { $in: ['temporary', 'pending'] },
      expiresAt: { $lt: now }
    });
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤: ${expiredOrders.length}`);
    
    if (expiredOrders.length === 0) {
      return res.json({
        success: true,
        message: '–ò—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ',
        cleanedOrders: 0
      });
    }
    
    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const session_db = await mongoose.startSession();
    let cleanedCount = 0;
    
    try {
      await session_db.withTransaction(async () => {
        for (const order of expiredOrders) {
          // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ expired
          await Order.findByIdAndUpdate(
            order._id,
            { status: 'expired' },
            { session: session_db }
          );
          
          // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –º–µ—Å—Ç–∞ –≤ —Å–µ—Å—Å–∏–∏
          const session = await Session.findById(order.sessionId);
          if (session) {
            session.tickets.forEach(ticket => {
              if (ticket.orderId && ticket.orderId.toString() === order._id.toString()) {
                ticket.status = 'available';
                delete ticket.orderId;
                delete ticket.reservedUntil;
                delete ticket.customerInfo;
              }
            });
            await session.save({ session: session_db });
          }
          
          cleanedCount++;
          console.log(`‚úÖ –ó–∞–∫–∞–∑ ${order._id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ expired, –º–µ—Å—Ç–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã`);
        }
      });
    } finally {
      await session_db.endSession();
    }
    
    console.log(`üéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: ${cleanedCount}`);
    
    res.json({
      success: true,
      message: `–û—á–∏—â–µ–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤: ${cleanedCount}`,
      cleanedOrders: cleanedCount
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
    res.status(500).json({
      success: false,
      message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
});

module.exports = router;