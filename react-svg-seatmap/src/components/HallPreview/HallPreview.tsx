import React, { useRef, useEffect, useState, useCallback } from 'react';
import { Seat, Zone } from '../../types/Seat.types';
import { transformSvgToCanvas } from '../../utils/svgDataExtractor';
import './HallPreview.scss';

interface HallPreviewProps {
  seats: Seat[];
  zones: Zone[];
  width?: number;
  height?: number;
  onSeatClick?: (seat: Seat) => void;
  selectedSeats?: string[]; // IDs –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç
}

interface CanvasSeat extends Seat {
  x: number;
  y: number;
  width: number;
  height: number;
}

export const HallPreview: React.FC<HallPreviewProps> = ({
  seats,
  zones,
  width = 800,
  height = 600,
  onSeatClick,
  selectedSeats = []
}) => {
  const canvasRef = useRef<HTMLCanvasElement>(null);
  const [canvasSeats, setCanvasSeats] = useState<CanvasSeat[]>([]);
  const [hoveredSeat, setHoveredSeat] = useState<string | null>(null);
  
  // State –¥–ª—è –∑—É–º–∞ –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏—è
  const [transform, setTransform] = useState({
    scale: 1,
    offsetX: 0,
    offsetY: 0
  });
  
  const [isDragging, setIsDragging] = useState(false);
  const [dragStart, setDragStart] = useState({ x: 0, y: 0 });

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ SVG –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ fallback –∫ –∞–≤—Ç–æ–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
  const calculateSeatPositions = useCallback(() => {
    if (!seats.length) return [];

    const newCanvasSeats: CanvasSeat[] = [];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    const seatsWithSvgData = seats.filter(seat => seat.svgData);
    let svgBounds: DOMRect;

    console.log(`üé® Canvas Preview: ${seats.length} –º–µ—Å—Ç –≤—Å–µ–≥–æ, ${seatsWithSvgData.length} —Å SVG –¥–∞–Ω–Ω—ã–º–∏`);

    if (seatsWithSvgData.length > 0) {
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã –≤—Å–µ—Ö SVG —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      const allX = seatsWithSvgData.map(s => s.svgData!.x);
      const allY = seatsWithSvgData.map(s => s.svgData!.y);
      const allMaxX = seatsWithSvgData.map(s => s.svgData!.x + s.svgData!.width);
      const allMaxY = seatsWithSvgData.map(s => s.svgData!.y + s.svgData!.height);

      const minX = Math.min(...allX);
      const minY = Math.min(...allY);
      const maxX = Math.max(...allMaxX);
      const maxY = Math.max(...allMaxY);

      svgBounds = {
        x: minX,
        y: minY,
        width: maxX - minX,
        height: maxY - minY
      } as DOMRect;
    } else {
      // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
      svgBounds = {
        x: 0,
        y: 0,
        width: width,
        height: height
      } as DOMRect;
    }

    seats.forEach((seat, index) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Å—Ç–∞ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏–π (–æ–±—ä–µ–∫—Ç—ã —Ç–∏–ø–∞ 'seat' –±–µ–∑ —Ä—è–¥–∞ –∏ –º–µ—Å—Ç–∞)
      if (seat.objectType === 'seat' && (!seat.row || !seat.place)) {
        console.log(`‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–Ω–∞–∑–≤–∞–Ω–Ω–æ–µ –º–µ—Å—Ç–æ: ${seat.id}`);
        return;
      }
      
      if (seat.svgData) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ SVG –¥–∞–Ω–Ω—ã–µ
        const transformedData = transformSvgToCanvas(seat.svgData, svgBounds, width, height);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –º–µ—Å—Ç, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –≤–∏–¥–Ω—ã
        const minSeatSize = seat.objectType === 'seat' ? 12 : 8; // –ú–∏–Ω–∏–º—É–º 12px –¥–ª—è –º–µ—Å—Ç
        const finalWidth = Math.max(transformedData.width, minSeatSize);
        const finalHeight = Math.max(transformedData.height, minSeatSize);
        
        if (index < 5) { // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 5 –º–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          console.log(`üé® Canvas: –º–µ—Å—Ç–æ ${seat.id} - SVG:`, {
            x: seat.svgData.x, 
            y: seat.svgData.y, 
            width: seat.svgData.width, 
            height: seat.svgData.height
          }, '‚Üí Canvas:', transformedData, '‚Üí Final:', {width: finalWidth, height: finalHeight});
        }
        
        newCanvasSeats.push({
          ...seat,
          x: transformedData.x,
          y: transformedData.y,
          width: finalWidth,
          height: finalHeight
        });
      } else {
        // Fallback: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–µ—Å—Ç –±–µ–∑ SVG –¥–∞–Ω–Ω—ã—Ö
        if (seat.objectType === 'seat' && seat.row !== undefined) {
          // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä—è–¥–∞–º (–∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ)
          const rowNum = seat.row;
          const seatPlace = seat.place || 0;
          
          const seatWidth = 25;
          const seatHeight = 25;
          const rowSpacing = 35;
          const seatSpacing = 30;
          
          newCanvasSeats.push({
            ...seat,
            x: 50 + seatPlace * seatSpacing,
            y: 50 + rowNum * rowSpacing,
            width: seatWidth,
            height: seatHeight
          });
        } else {
          // –°—Ç–∞—Ç–∏—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ SVG –¥–∞–Ω–Ω—ã—Ö
          let elementWidth = 80;
          let elementHeight = 40;
          let x = width / 2 - elementWidth / 2;
          let y = 10;

          if (seat.objectType === 'scene') {
            elementWidth = 200;
            elementHeight = 30;
            x = width / 2 - elementWidth / 2;
            y = 10;
          } else if (seat.objectType === 'decoration') {
            elementWidth = 40;
            elementHeight = 40;
            x = 20 + (index % 3) * 50;
            y = height - 60;
          }

          newCanvasSeats.push({
            ...seat,
            x,
            y,
            width: elementWidth,
            height: elementHeight
          });
        }
      }
    });

    return newCanvasSeats;
  }, [seats, width, height]);

  // –ü–æ–ª—É—á–∞–µ–º —Ü–≤–µ—Ç –∑–æ–Ω—ã
  const getZoneColor = useCallback((zoneId: string) => {
    const zone = zones.find(z => z.id === zoneId);
    return zone?.color || '#F8D013';
  }, [zones]);

  // –†–µ–Ω–¥–µ—Ä–∏–º Canvas
  const renderCanvas = useCallback(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;

    const ctx = canvas.getContext('2d');
    if (!ctx) return;

    // –û—á–∏—â–∞–µ–º canvas
    ctx.clearRect(0, 0, width, height);

    // –†–∏—Å—É–µ–º —Ñ–æ–Ω
    ctx.fillStyle = '#f5f5f5';
    ctx.fillRect(0, 0, width, height);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∑—É–º –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ)
    ctx.save();
    ctx.translate(transform.offsetX, transform.offsetY);
    ctx.scale(transform.scale, transform.scale);

    // console.log(`üé® –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ Canvas: ${canvasSeats.length} –º–µ—Å—Ç –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏`);
    if (canvasSeats.length > 0) {
      console.log('üé® –ü–µ—Ä–≤—ã–µ 3 –º–µ—Å—Ç–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:', canvasSeats.slice(0, 3).map(seat => ({
        id: seat.id,
        x: seat.x,
        y: seat.y,
        width: seat.width,
        height: seat.height,
        objectType: seat.objectType,
        shape: seat.svgData?.shape
      })));
      
      // –ò—â–µ–º –±–æ–ª—å—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ, –∂—ë–ª—Ç—ã–π –∫–≤–∞–¥—Ä–∞—Ç)
      const bigElements = canvasSeats.filter(seat => seat.width > 200 || seat.height > 200);
      if (bigElements.length > 0) {
        console.log('üü® –ë–û–õ–¨–®–ò–ï —ç–ª–µ–º–µ–Ω—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç –≤—Å—ë):', bigElements.map(seat => ({
          id: seat.id,
          objectType: seat.objectType,
          x: seat.x,
          y: seat.y,
          width: seat.width,
          height: seat.height,
          fillColor: seat.objectType === 'seat' ? getZoneColor(seat.zone || '') : 'unknown'
        })));
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—Ç–∞: —Å–Ω–∞—á–∞–ª–∞ –±–æ–ª—å—à–∏–µ (—Ñ–æ–Ω), –ø–æ—Ç–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ (–º–µ—Å—Ç–∞)
    const sortedSeats = [...canvasSeats].sort((a, b) => {
      // –°–Ω–∞—á–∞–ª–∞ —Ä–∏—Å—É–µ–º –±–æ–ª—å—à–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (—Å—Ü–µ–Ω–∞, –¥–µ–∫–æ—Ä–∞—Ü–∏–∏, —Ñ–æ–Ω)
      const aSize = a.width * a.height;
      const bSize = b.width * b.height;
      return bSize - aSize; // –û—Ç –±–æ–ª—å—à–∏—Ö –∫ –º–∞–ª–µ–Ω—å–∫–∏–º
    });

    // –†–∏—Å—É–µ–º –º–µ—Å—Ç–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    sortedSeats.forEach((seat, index) => {
      const isSelected = selectedSeats.includes(seat.id as string);
      const isHovered = hoveredSeat === seat.id;
      const isClickable = seat.objectType === 'seat';

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –∏ —Å—Ç–∏–ª—å
      let fillColor = '#e0e0e0';
      let strokeColor = '#999';
      let strokeWidth = 1;

      if (seat.objectType === 'seat') {
        fillColor = isSelected ? '#ff6b35' : getZoneColor(seat.zone || '');
        strokeColor = isSelected ? '#ff6b35' : '#333';
        strokeWidth = isSelected ? 3 : 1;
        
        if (isHovered) {
          strokeColor = '#007bff';
          strokeWidth = 2;
        }
      } else if (seat.objectType === 'scene') {
        fillColor = '#8a2be2';
        strokeColor = '#5a1b82';
      } else if (seat.objectType === 'decoration') {
        fillColor = '#28a745';
        strokeColor = '#1e7e34';
      } else if (seat.objectType === 'passage') {
        fillColor = '#6c757d';
        strokeColor = '#495057';
      }

      // –†–∏—Å—É–µ–º —ç–ª–µ–º–µ–Ω—Ç
      ctx.fillStyle = fillColor;
      ctx.strokeStyle = strokeColor;
      ctx.lineWidth = strokeWidth;

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É –ø–µ—Ä–≤—ã—Ö 3 –º–µ—Å—Ç
      if (index < 3 && seat.objectType === 'seat') {
        console.log(`üñåÔ∏è –†–∏—Å—É–µ–º –º–µ—Å—Ç–æ ${seat.id}:`, {
          x: seat.x, y: seat.y, width: seat.width, height: seat.height,
          fillColor, strokeColor, strokeWidth, zone: seat.zone
        });
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º—É —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
      const shape = seat.svgData?.shape;
      
      // –†–∏—Å—É–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –µ–≥–æ —Ñ–æ—Ä–º–µ –∏–∑ SVG
      if (shape === 'circle') {
        const centerX = seat.x + seat.width / 2;
        const centerY = seat.y + seat.height / 2;
        const radius = Math.min(seat.width, seat.height) / 2 - strokeWidth;

        ctx.beginPath();
        ctx.arc(centerX, centerY, radius, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
      } else if (shape === 'ellipse') {
        const ellipseCenterX = seat.x + seat.width / 2;
        const ellipseCenterY = seat.y + seat.height / 2;
        const radiusX = seat.width / 2 - strokeWidth;
        const radiusY = seat.height / 2 - strokeWidth;

        ctx.beginPath();
        ctx.ellipse(ellipseCenterX, ellipseCenterY, radiusX, radiusY, 0, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
      } else if (shape === 'rect') {
        const rectX = seat.x + strokeWidth / 2;
        const rectY = seat.y + strokeWidth / 2;
        const rectWidth = seat.width - strokeWidth;
        const rectHeight = seat.height - strokeWidth;

        if (seat.svgData?.rx && seat.svgData?.ry) {
          // –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ —Å –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–º–∏ —É–≥–ª–∞–º–∏
          const rx = Math.min(seat.svgData.rx, rectWidth / 2);
          const ry = Math.min(seat.svgData.ry, rectHeight / 2);
          
          ctx.beginPath();
          ctx.roundRect(rectX, rectY, rectWidth, rectHeight, [rx, ry]);
          ctx.fill();
          ctx.stroke();
        } else {
          ctx.fillRect(rectX, rectY, rectWidth, rectHeight);
          ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);
        }
      } else if (shape === 'path' && seat.svgData?.pathData) {
        // –†–∏—Å—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π SVG path
        try {
          const path2D = new Path2D(seat.svgData.pathData);
          
          // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          ctx.save();
          
          // –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º path –∫ –Ω—É–∂–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –∏ –ø–æ–∑–∏—Ü–∏–∏
          const originalBBox = seat.svgData;
          if (originalBBox.width && originalBBox.height) {
            const scaleX = seat.width / originalBBox.width;
            const scaleY = seat.height / originalBBox.height;
            const offsetX = seat.x - originalBBox.x * scaleX;
            const offsetY = seat.y - originalBBox.y * scaleY;
            
            ctx.translate(offsetX, offsetY);
            ctx.scale(scaleX, scaleY);
          }
          
          ctx.fill(path2D);
          ctx.stroke(path2D);
          ctx.restore();
          
          console.log(`üé® –û—Ç—Ä–∏—Å–æ–≤–∞–Ω path –¥–ª—è ${seat.id}: ${seat.svgData.pathData.substring(0, 50)}...`);
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ path:', error);
          // Fallback –∫ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫—É
          const rectX = seat.x + strokeWidth / 2;
          const rectY = seat.y + strokeWidth / 2;
          const rectWidth = seat.width - strokeWidth;
          const rectHeight = seat.height - strokeWidth;

          ctx.fillRect(rectX, rectY, rectWidth, rectHeight);
          ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);
        }
      } else {
        // –î–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ñ–æ—Ä–º - —Ä–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        const rectX = seat.x + strokeWidth / 2;
        const rectY = seat.y + strokeWidth / 2;
        const rectWidth = seat.width - strokeWidth;
        const rectHeight = seat.height - strokeWidth;

        ctx.fillRect(rectX, rectY, rectWidth, rectHeight);
        ctx.strokeRect(rectX, rectY, rectWidth, rectHeight);
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
      let displayText = '';
      if (seat.objectType === 'seat' && seat.place) {
        displayText = seat.place.toString();
      } else if (seat.objectType === 'scene') {
        displayText = '–°–¶–ï–ù–ê';
      } else if (seat.objectType === 'decoration') {
        displayText = '–î–ï–ö';
      } else if (seat.objectType === 'passage') {
        displayText = '–ü–†–û–•–û–î';
      } else if (seat.objectType === 'technical_zone') {
        displayText = '–¢–ï–•';
      }
      
      if (displayText) {
        ctx.fillStyle = (shape === 'circle' || shape === 'ellipse') ? '#fff' : '#333';
        ctx.font = `${Math.min(seat.width, seat.height) / 4}px Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        
        const textX = seat.x + seat.width / 2;
        const textY = seat.y + seat.height / 2;
        
        ctx.fillText(displayText, textX, textY);
      }
    });

    // –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä–∞ —Ä—è–¥–æ–≤
    const rows = [...new Set(canvasSeats.filter(s => s.objectType === 'seat' && s.row).map(s => s.row))].sort();
    ctx.fillStyle = '#666';
    ctx.font = '12px Arial';
    ctx.textAlign = 'left';
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π
    ctx.restore();

    // –†–∏—Å—É–µ–º –Ω–æ–º–µ—Ä–∞ —Ä—è–¥–æ–≤ (–±–µ–∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π)
    rows.forEach(row => {
      const firstSeatInRow = canvasSeats.find(s => s.row === row);
      if (firstSeatInRow) {
        const transformedY = firstSeatInRow.y * transform.scale + transform.offsetY;
        ctx.fillText(`–†—è–¥ ${row}`, 10, transformedY + firstSeatInRow.height / 2 + 4);
      }
    });

  }, [canvasSeats, selectedSeats, hoveredSeat, zones, width, height, getZoneColor, transform]);

  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑—É–º–æ–º –∏ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const handleWheel = useCallback((event: React.WheelEvent<HTMLCanvasElement>) => {
    event.preventDefault();
    
    const canvas = canvasRef.current;
    if (!canvas) return;
    
    const rect = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rect.left;
    const mouseY = event.clientY - rect.top;
    
    const scaleFactor = event.deltaY > 0 ? 0.9 : 1.1;
    const newScale = Math.max(0.1, Math.min(5, transform.scale * scaleFactor));
    
    // –ó—É–º –∫ —Ç–æ—á–∫–µ –∫—É—Ä—Å–æ—Ä–∞
    const newOffsetX = mouseX - (mouseX - transform.offsetX) * (newScale / transform.scale);
    const newOffsetY = mouseY - (mouseY - transform.offsetY) * (newScale / transform.scale);
    
    setTransform({
      scale: newScale,
      offsetX: newOffsetX,
      offsetY: newOffsetY
    });
  }, [transform]);

  const handleMouseDown = useCallback((event: React.MouseEvent<HTMLCanvasElement>) => {
    if (event.button === 0) { // –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏
      setIsDragging(true);
      setDragStart({ x: event.clientX - transform.offsetX, y: event.clientY - transform.offsetY });
    }
  }, [transform]);

  const handleMouseMove = useCallback((event: React.MouseEvent<HTMLCanvasElement>) => {
    if (isDragging) {
      const newOffsetX = event.clientX - dragStart.x;
      const newOffsetY = event.clientY - dragStart.y;
      
      setTransform(prev => ({
        ...prev,
        offsetX: newOffsetX,
        offsetY: newOffsetY
      }));
    } else {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–µ–¥–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–∞
      const canvas = canvasRef.current;
      if (!canvas) return;

      const rect = canvas.getBoundingClientRect();
      const x = (event.clientX - rect.left - transform.offsetX) / transform.scale;
      const y = (event.clientY - rect.top - transform.offsetY) / transform.scale;

      const hoveredSeatElement = canvasSeats.find(seat =>
        x >= seat.x && x <= seat.x + seat.width &&
        y >= seat.y && y <= seat.y + seat.height &&
        seat.objectType === 'seat'
      );

      const newHoveredId = hoveredSeatElement?.id as string || null;
      if (newHoveredId !== hoveredSeat) {
        setHoveredSeat(newHoveredId);
        canvas.style.cursor = newHoveredId ? 'pointer' : (isDragging ? 'grabbing' : 'grab');
      }
    }
  }, [isDragging, dragStart, transform, canvasSeats, hoveredSeat]);

  const handleMouseUp = useCallback(() => {
    setIsDragging(false);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤
  const handleCanvasClick = useCallback((event: React.MouseEvent<HTMLCanvasElement>) => {
    if (isDragging) return; // –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
    
    const canvas = canvasRef.current;
    if (!canvas) return;

    const rect = canvas.getBoundingClientRect();
    const x = (event.clientX - rect.left - transform.offsetX) / transform.scale;
    const y = (event.clientY - rect.top - transform.offsetY) / transform.scale;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∏–∫ –ø–æ –º–µ—Å—Ç–∞–º
    const clickedSeat = canvasSeats.find(seat => 
      seat.objectType === 'seat' &&
      x >= seat.x && 
      x <= seat.x + seat.width && 
      y >= seat.y && 
      y <= seat.y + seat.height
    );

    if (clickedSeat && onSeatClick) {
      onSeatClick(clickedSeat);
    }
  }, [canvasSeats, onSeatClick, transform, isDragging]);



  // –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑—É–º–æ–º (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –î–û –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ useEffect!)
  const zoomIn = useCallback(() => {
    setTransform(prev => ({
      ...prev,
      scale: Math.min(5, prev.scale * 1.2)
    }));
  }, []);

  const zoomOut = useCallback(() => {
    setTransform(prev => ({
      ...prev,
      scale: Math.max(0.1, prev.scale / 1.2)
    }));
  }, []);

  const fitToView = useCallback(() => {
    if (canvasSeats.length === 0) return;

    const minX = Math.min(...canvasSeats.map(s => s.x));
    const minY = Math.min(...canvasSeats.map(s => s.y));
    const maxX = Math.max(...canvasSeats.map(s => s.x + s.width));
    const maxY = Math.max(...canvasSeats.map(s => s.y + s.height));

    const contentWidth = maxX - minX;
    const contentHeight = maxY - minY;

    const scaleX = (width - 40) / contentWidth;
    const scaleY = (height - 40) / contentHeight;
    const newScale = Math.min(scaleX, scaleY, 1);

    const centerX = (minX + maxX) / 2;
    const centerY = (minY + maxY) / 2;

    setTransform({
      scale: newScale,
      offsetX: width / 2 - centerX * newScale,
      offsetY: height / 2 - centerY * newScale
    });
  }, [canvasSeats, width, height]);

  // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    const newCanvasSeats = calculateSeatPositions();
    setCanvasSeats(newCanvasSeats);
  }, [seats, zones, width, height]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    if (canvasSeats.length > 0) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞
      setTimeout(() => {
        fitToView();
      }, 100);
    }
  }, [canvasSeats.length]);

  // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  useEffect(() => {
    renderCanvas();
  }, [renderCanvas]);

  return (
    <div className="hall-preview">
      <div className="hall-preview__controls">
        <button onClick={zoomIn} className="hall-preview__control-btn">+</button>
        <button onClick={zoomOut} className="hall-preview__control-btn">-</button>
        <button onClick={fitToView} className="hall-preview__control-btn">‚åÇ</button>
        <span className="hall-preview__zoom-level">{Math.round(transform.scale * 100)}%</span>
      </div>
      
      <canvas
        ref={canvasRef}
        width={width}
        height={height}
        onClick={handleCanvasClick}
        onMouseDown={handleMouseDown}
        onMouseMove={handleMouseMove}
        onMouseUp={handleMouseUp}
        onMouseLeave={() => {
          setHoveredSeat(null);
          setIsDragging(false);
        }}
        onWheel={handleWheel}
        className="hall-preview__canvas"
        style={{ cursor: isDragging ? 'grabbing' : 'grab' }}
      />
    </div>
  );
};

export default HallPreview;
